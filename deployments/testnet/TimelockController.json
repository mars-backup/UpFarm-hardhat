{
  "address": "0x9CD3AE5d7BC4FAFeeB5A82F2AA21748D066b8Ad3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minDelayReduced",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "proposers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "executors",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "CallExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "CallScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "Cancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "MinDelayChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "MinDelayReducedChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "SetScheduled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXECUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROPOSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIMELOCK_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_autofarmAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_want",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_strat",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stratAddress",
          "type": "address"
        }
      ],
      "name": "earn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "executeBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_autofarmAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "executeSet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stratAddress",
          "type": "address"
        }
      ],
      "name": "farm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "hashOperation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "hashOperationBatch",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperationDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperationPending",
      "outputs": [
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperationReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "ready",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDelayReduced",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stratAddress",
          "type": "address"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "schedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "scheduleBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_autofarmAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "scheduleSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stratAddress",
          "type": "address"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDelay",
          "type": "uint256"
        }
      ],
      "name": "updateMinDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDelayReduced",
          "type": "uint256"
        }
      ],
      "name": "updateMinDelayReduced",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stratAddress",
          "type": "address"
        }
      ],
      "name": "wrapBNB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc94e3b8aae1a56fff742c01a55c7af7338d65c95f64f4aee9a144c709821d5c9",
  "receipt": {
    "to": null,
    "from": "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
    "contractAddress": "0x9CD3AE5d7BC4FAFeeB5A82F2AA21748D066b8Ad3",
    "transactionIndex": 4,
    "gasUsed": "2728640",
    "logsBloom": "0x000000040000000008000004000000000a00000000000000000000000020000000000000000000000000000000010000000000008000000002000000102000000000000000000000000000000000000000000000000000000000000000010000000000010a0000400000000000000800000000000000000000020000000000000200000000000000000000000000000000000000000000080000000000000000000000000020000000400000000000000000000000000000001000000000000000000000000000004000000000000400000200010000000100000000000020000000000000001000000200000000000000201000400004000040000000000000",
    "blockHash": "0x09862db45230c7fe5938436ded0c1a29c32243fa3900a9c1c9be67d3af267e3a",
    "transactionHash": "0xc94e3b8aae1a56fff742c01a55c7af7338d65c95f64f4aee9a144c709821d5c9",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 16798307,
        "transactionHash": "0xc94e3b8aae1a56fff742c01a55c7af7338d65c95f64f4aee9a144c709821d5c9",
        "address": "0x9CD3AE5d7BC4FAFeeB5A82F2AA21748D066b8Ad3",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x09862db45230c7fe5938436ded0c1a29c32243fa3900a9c1c9be67d3af267e3a"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 16798307,
        "transactionHash": "0xc94e3b8aae1a56fff742c01a55c7af7338d65c95f64f4aee9a144c709821d5c9",
        "address": "0x9CD3AE5d7BC4FAFeeB5A82F2AA21748D066b8Ad3",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x09862db45230c7fe5938436ded0c1a29c32243fa3900a9c1c9be67d3af267e3a"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 16798307,
        "transactionHash": "0xc94e3b8aae1a56fff742c01a55c7af7338d65c95f64f4aee9a144c709821d5c9",
        "address": "0x9CD3AE5d7BC4FAFeeB5A82F2AA21748D066b8Ad3",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x09862db45230c7fe5938436ded0c1a29c32243fa3900a9c1c9be67d3af267e3a"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 16798307,
        "transactionHash": "0xc94e3b8aae1a56fff742c01a55c7af7338d65c95f64f4aee9a144c709821d5c9",
        "address": "0x9CD3AE5d7BC4FAFeeB5A82F2AA21748D066b8Ad3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5",
          "0x0000000000000000000000001904bfcb93edc9bf961eead2e5c0de81dcc1d37d",
          "0x0000000000000000000000001904bfcb93edc9bf961eead2e5c0de81dcc1d37d"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0x09862db45230c7fe5938436ded0c1a29c32243fa3900a9c1c9be67d3af267e3a"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 16798307,
        "transactionHash": "0xc94e3b8aae1a56fff742c01a55c7af7338d65c95f64f4aee9a144c709821d5c9",
        "address": "0x9CD3AE5d7BC4FAFeeB5A82F2AA21748D066b8Ad3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5",
          "0x0000000000000000000000009cd3ae5d7bc4fafeeb5a82f2aa21748d066b8ad3",
          "0x0000000000000000000000001904bfcb93edc9bf961eead2e5c0de81dcc1d37d"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x09862db45230c7fe5938436ded0c1a29c32243fa3900a9c1c9be67d3af267e3a"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 16798307,
        "transactionHash": "0xc94e3b8aae1a56fff742c01a55c7af7338d65c95f64f4aee9a144c709821d5c9",
        "address": "0x9CD3AE5d7BC4FAFeeB5A82F2AA21748D066b8Ad3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1",
          "0x0000000000000000000000001904bfcb93edc9bf961eead2e5c0de81dcc1d37d",
          "0x0000000000000000000000001904bfcb93edc9bf961eead2e5c0de81dcc1d37d"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x09862db45230c7fe5938436ded0c1a29c32243fa3900a9c1c9be67d3af267e3a"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 16798307,
        "transactionHash": "0xc94e3b8aae1a56fff742c01a55c7af7338d65c95f64f4aee9a144c709821d5c9",
        "address": "0x9CD3AE5d7BC4FAFeeB5A82F2AA21748D066b8Ad3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1",
          "0x0000000000000000000000003360dec490e74605c65cdb8d2f87137c1c5e8345",
          "0x0000000000000000000000001904bfcb93edc9bf961eead2e5c0de81dcc1d37d"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x09862db45230c7fe5938436ded0c1a29c32243fa3900a9c1c9be67d3af267e3a"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 16798307,
        "transactionHash": "0xc94e3b8aae1a56fff742c01a55c7af7338d65c95f64f4aee9a144c709821d5c9",
        "address": "0x9CD3AE5d7BC4FAFeeB5A82F2AA21748D066b8Ad3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
          "0x0000000000000000000000001904bfcb93edc9bf961eead2e5c0de81dcc1d37d",
          "0x0000000000000000000000001904bfcb93edc9bf961eead2e5c0de81dcc1d37d"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0x09862db45230c7fe5938436ded0c1a29c32243fa3900a9c1c9be67d3af267e3a"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 16798307,
        "transactionHash": "0xc94e3b8aae1a56fff742c01a55c7af7338d65c95f64f4aee9a144c709821d5c9",
        "address": "0x9CD3AE5d7BC4FAFeeB5A82F2AA21748D066b8Ad3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
          "0x000000000000000000000000fe08b6d4c02179734723cba7bdc487ef8d8a7c22",
          "0x0000000000000000000000001904bfcb93edc9bf961eead2e5c0de81dcc1d37d"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0x09862db45230c7fe5938436ded0c1a29c32243fa3900a9c1c9be67d3af267e3a"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 16798307,
        "transactionHash": "0xc94e3b8aae1a56fff742c01a55c7af7338d65c95f64f4aee9a144c709821d5c9",
        "address": "0x9CD3AE5d7BC4FAFeeB5A82F2AA21748D066b8Ad3",
        "topics": [
          "0x11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c",
        "logIndex": 26,
        "blockHash": "0x09862db45230c7fe5938436ded0c1a29c32243fa3900a9c1c9be67d3af267e3a"
      }
    ],
    "blockNumber": 16798307,
    "cumulativeGasUsed": "3875022",
    "status": 1,
    "byzantium": true
  },
  "args": [
    60,
    30,
    [
      "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
      "0x3360deC490E74605c65CDb8D2F87137c1C5E8345"
    ],
    [
      "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
      "0xfE08B6D4c02179734723cBa7BDc487eF8d8a7c22"
    ]
  ],
  "solcInputHash": "2f541bcd60d5e1a907d6462ac5275e07",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDelayReduced\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"proposers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"executors\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CallExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"CallScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"MinDelayChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"MinDelayReducedChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"SetScheduled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autofarmAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_strat\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stratAddress\",\"type\":\"address\"}],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autofarmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"executeSet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stratAddress\",\"type\":\"address\"}],\"name\":\"farm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"hashOperation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"hashOperationBatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ready\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDelayReduced\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stratAddress\",\"type\":\"address\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"scheduleBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autofarmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"scheduleSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stratAddress\",\"type\":\"address\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"updateMinDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelayReduced\",\"type\":\"uint256\"}],\"name\":\"updateMinDelayReduced\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stratAddress\",\"type\":\"address\"}],\"name\":\"wrapBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"CallExecuted(bytes32,uint256,address,uint256,bytes)\":{\"details\":\"Emitted when a call is performed as part of operation `id`.\"},\"CallScheduled(bytes32,uint256,address,uint256,bytes,bytes32,uint256)\":{\"details\":\"Emitted when a call is scheduled as part of operation `id`.\"},\"Cancelled(bytes32)\":{\"details\":\"Emitted when operation `id` is cancelled.\"},\"MinDelayChange(uint256,uint256)\":{\"details\":\"Emitted when the minimum delay for future operations is modified.\"},\"SetScheduled(bytes32,uint256,uint256,uint256,bool,bool,bytes32,uint256)\":{\"details\":\"Emitted when a call is scheduled as part of operation `id`.\"}},\"kind\":\"dev\",\"methods\":{\"cancel(bytes32)\":{\"details\":\"Cancel an operation. Requirements: - the caller must have the 'proposer' role.\"},\"constructor\":{\"details\":\"Initializes the contract with a given `minDelay`.\"},\"execute(address,uint256,bytes,bytes32,bytes32)\":{\"details\":\"Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Requirements: - the caller must have the 'executor' role.\"},\"executeBatch(address[],uint256[],bytes[],bytes32,bytes32)\":{\"details\":\"Execute an (ready) operation containing a batch of transactions. Emits one {CallExecuted} event per transaction in the batch. Requirements: - the caller must have the 'executor' role.\"},\"getMinDelay()\":{\"details\":\"Returns the minimum delay for an operation to become valid. This value can be changed by executing an operation that calls `updateDelay`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getTimestamp(bytes32)\":{\"details\":\"Returns the timestamp at with an operation becomes ready (0 for unset operations, 1 for done operations).\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"hashOperation(address,uint256,bytes,bytes32,bytes32)\":{\"details\":\"Returns the identifier of an operation containing a single transaction.\"},\"hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)\":{\"details\":\"Returns the identifier of an operation containing a batch of transactions.\"},\"isOperation(bytes32)\":{\"details\":\"Returns whether an id correspond to a registered operation. This includes both Pending, Ready and Done operations.\"},\"isOperationDone(bytes32)\":{\"details\":\"Returns whether an operation is done or not.\"},\"isOperationPending(bytes32)\":{\"details\":\"Returns whether an operation is pending or not.\"},\"isOperationReady(bytes32)\":{\"details\":\"Returns whether an operation is ready or not.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"schedule(address,uint256,bytes,bytes32,bytes32,uint256)\":{\"details\":\"Schedule an operation containing a single transaction. Emits a {CallScheduled} event. Requirements: - the caller must have the 'proposer' role.\"},\"scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)\":{\"details\":\"Schedule an operation containing a batch of transactions. Emits one {CallScheduled} event per transaction in the batch. Requirements: - the caller must have the 'proposer' role.\"},\"scheduleSet(address,uint256,uint256,bool,bool,bytes32,bytes32)\":{\"details\":\"Reduced timelock functions\"},\"updateMinDelay(uint256)\":{\"details\":\"Changes the minimum timelock duration for future operations. Emits a {MinDelayChange} event. Requirements: - the caller must be the timelock itself. This can only be achieved by scheduling and later executing an operation where the timelock is the target and the data is the ABI-encoded call to this function.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TimelockController.sol\":\"TimelockController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/TimelockController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface IStrategy {\\n\\n    function earn() external;\\n\\n    function farm() external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function wrapBNB() external;\\n    \\n}\\n\\ninterface IUpFarm {\\n\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _want,\\n        bool _withUpdate,\\n        address _strat,\\n        bool _locked\\n    ) external;\\n\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate,\\n        bool _locked\\n    ) external;\\n\\n}\\n\\ncontract TimelockController is AccessControl, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\\\"TIMELOCK_ADMIN_ROLE\\\");\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 public minDelay;\\n    uint256 public minDelayReduced;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event SetScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate,\\n        bool _locked,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    event MinDelayReducedChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /**\\n     * @dev Initializes the contract with a given `minDelay`.\\n     */\\n    constructor(\\n        uint256 _minDelay,\\n        uint256 _minDelayReduced,\\n        address[] memory proposers,\\n        address[] memory executors\\n    ) public {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n\\n        // register proposers\\n        for (uint256 i = 0; i < proposers.length; ++i) {\\n            _setupRole(PROPOSER_ROLE, proposers[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < executors.length; ++i) {\\n            _setupRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n\\n        minDelay = _minDelay;\\n        minDelayReduced = _minDelayReduced;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        require(\\n            hasRole(role, _msgSender()),\\n            \\\"TimelockController: sender requires permission\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\\n        return _timestamps[id] > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not.\\n     */\\n    function isOperationPending(bytes32 id) public view returns (bool pending) {\\n        return _timestamps[id] > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready or not.\\n     */\\n    function isOperationReady(bytes32 id) public view returns (bool ready) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return\\n            _timestamps[id] > _DONE_TIMESTAMP &&\\n            _timestamps[id] <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view returns (bool done) {\\n        return _timestamps[id] == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) external view returns (uint256 timestamp) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() external view returns (uint256 duration) {\\n        return minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure returns (bytes32 hash) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure returns (bytes32 hash) {\\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits a {CallScheduled} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) external virtual onlyRole(PROPOSER_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) external virtual onlyRole(PROPOSER_ROLE) {\\n        require(\\n            targets.length == values.length,\\n            \\\"TimelockController: length mismatch\\\"\\n        );\\n        require(\\n            targets.length == datas.length,\\n            \\\"TimelockController: length mismatch\\\"\\n        );\\n\\n        bytes32 id =\\n            hashOperationBatch(targets, values, datas, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(\\n                id,\\n                i,\\n                targets[i],\\n                values[i],\\n                datas[i],\\n                predecessor,\\n                delay\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to becomes valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(\\n            _timestamps[id] == 0,\\n            \\\"TimelockController: operation already scheduled\\\"\\n        );\\n        require(delay >= minDelay, \\\"TimelockController: insufficient delay\\\");\\n        // solhint-disable-next-line not-rely-on-time\\n        _timestamps[id] = SafeMath.add(block.timestamp, delay);\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function cancel(bytes32 id) external virtual onlyRole(PROPOSER_ROLE) {\\n        require(\\n            isOperationPending(id),\\n            \\\"TimelockController: operation cannot be cancelled\\\"\\n        );\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) external payable virtual nonReentrant onlyRole(EXECUTOR_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _beforeCall(id, predecessor);\\n        _call(id, 0, target, value, data);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) external payable virtual onlyRole(EXECUTOR_ROLE) {\\n        require(\\n            targets.length == values.length,\\n            \\\"TimelockController: length mismatch\\\"\\n        );\\n        require(\\n            targets.length == datas.length,\\n            \\\"TimelockController: length mismatch\\\"\\n        );\\n\\n        bytes32 id =\\n            hashOperationBatch(targets, values, datas, predecessor, salt);\\n        _beforeCall(id, predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            _call(id, i, targets[i], values[i], datas[i]);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\\n        require(\\n            isOperationReady(id),\\n            \\\"TimelockController: operation is not ready\\\"\\n        );\\n        require(\\n            predecessor == bytes32(0) || isOperationDone(predecessor),\\n            \\\"TimelockController: missing dependency\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(\\n            isOperationReady(id),\\n            \\\"TimelockController: operation is not ready\\\"\\n        );\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     *\\n     * Emits a {CallExecuted} event.\\n     */\\n    function _call(\\n        bytes32 id,\\n        uint256 index,\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) private {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n\\n        emit CallExecuted(id, index, target, value, data);\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateMinDelay(uint256 newDelay) external virtual {\\n        require(\\n            msg.sender == address(this),\\n            \\\"TimelockController: caller must be timelock\\\"\\n        );\\n        emit MinDelayChange(minDelay, newDelay);\\n        minDelay = newDelay;\\n    }\\n\\n    function updateMinDelayReduced(uint256 newDelayReduced) external virtual {\\n        require(\\n            msg.sender == address(this),\\n            \\\"TimelockController: caller must be timelock\\\"\\n        );\\n        emit MinDelayReducedChange(minDelayReduced, newDelayReduced);\\n        minDelayReduced = newDelayReduced;\\n    }\\n\\n    /**\\n     * @dev Reduced timelock functions\\n     */\\n    function scheduleSet(\\n        address _autofarmAddress,\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate,\\n        bool _locked,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) external onlyRole(EXECUTOR_ROLE) {\\n        bytes32 id =\\n            keccak256(\\n                abi.encode(\\n                    _autofarmAddress,\\n                    _pid,\\n                    _allocPoint,\\n                    _withUpdate,\\n                    _locked,\\n                    predecessor,\\n                    salt\\n                )\\n            );\\n\\n        require(\\n            _timestamps[id] == 0,\\n            \\\"TimelockController: operation already scheduled\\\"\\n        );\\n\\n        _timestamps[id] = SafeMath.add(block.timestamp, minDelayReduced);\\n        emit SetScheduled(\\n            id,\\n            0,\\n            _pid,\\n            _allocPoint,\\n            _withUpdate,\\n            _locked,\\n            predecessor,\\n            minDelayReduced\\n        );\\n    }\\n\\n    function executeSet(\\n        address _autofarmAddress,\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate,\\n        bool _locked,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) external payable virtual nonReentrant onlyRole(EXECUTOR_ROLE) {\\n        bytes32 id =\\n            keccak256(\\n                abi.encode(\\n                    _autofarmAddress,\\n                    _pid,\\n                    _allocPoint,\\n                    _withUpdate,\\n                    _locked,\\n                    predecessor,\\n                    salt\\n                )\\n            );\\n\\n        _beforeCall(id, predecessor);\\n        IUpFarm(_autofarmAddress).set(_pid, _allocPoint, _withUpdate, _locked);\\n        _afterCall(id);\\n    }\\n\\n    function add(\\n        address _autofarmAddress,\\n        address _want,\\n        bool _withUpdate,\\n        address _strat,\\n        bool _locked\\n    ) external onlyRole(EXECUTOR_ROLE) {\\n        IUpFarm(_autofarmAddress).add(0, IERC20(_want), _withUpdate, _strat, _locked); // allocPoint = 0. Schedule set (timelocked) to increase allocPoint.\\n    }\\n\\n    function earn(address _stratAddress) external onlyRole(EXECUTOR_ROLE) {\\n        IStrategy(_stratAddress).earn();\\n    }\\n\\n    function farm(address _stratAddress) external onlyRole(EXECUTOR_ROLE) {\\n        IStrategy(_stratAddress).farm();\\n    }\\n\\n    function pause(address _stratAddress) external onlyRole(EXECUTOR_ROLE) {\\n        IStrategy(_stratAddress).pause();\\n    }\\n\\n    function unpause(address _stratAddress) external onlyRole(EXECUTOR_ROLE) {\\n        IStrategy(_stratAddress).unpause();\\n    }\\n\\n    function wrapBNB(address _stratAddress) external onlyRole(EXECUTOR_ROLE) {\\n        IStrategy(_stratAddress).wrapBNB();\\n    }\\n}\",\"keccak256\":\"0xa743d0a52eda4092620a9a02b8cc9dc007a7c624f44dfef80ece5fa8a7d641e3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002c8138038062002c818339810160408190526200003491620003db565b600180556200005360008051602062002c2183398151915280620001bb565b6200007d60008051602062002c4183398151915260008051602062002c21833981519152620001bb565b620000a760008051602062002c6183398151915260008051602062002c21833981519152620001bb565b620000cb60008051602062002c21833981519152620000c56200020d565b62000211565b620000e660008051602062002c218339815191523062000211565b60005b825181101562000131576200012860008051602062002c418339815191528483815181106200011457fe5b60200260200101516200021160201b60201c565b600101620000e9565b5060005b815181101562000169576200016060008051602062002c618339815191528383815181106200011457fe5b60010162000135565b50600384905560048390556040517f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d590620001a990600090879062000456565b60405180910390a15050505062000464565b600082815260208190526040808220600201549051839285917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a460009182526020829052604090912060020155565b3390565b6200021d828262000221565b5050565b60008281526020818152604090912062000246918390620015036200029a821b17901c565b156200021d57620002566200020d565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620002b1836001600160a01b038416620002ba565b90505b92915050565b6000620002c8838362000309565b6200030057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620002b4565b506000620002b4565b60009081526001919091016020526040902054151590565b80516001600160a01b0381168114620002b457600080fd5b600082601f8301126200034a578081fd5b81516001600160401b038082111562000361578283fd5b6020808302604051828282010181811085821117156200037f578687fd5b604052848152945081850192508582018187018301881015620003a157600080fd5b600091505b84821015620003d057620003bb888262000321565b845292820192600191909101908201620003a6565b505050505092915050565b60008060008060808587031215620003f1578384fd5b84516020860151604087015191955093506001600160401b038082111562000417578384fd5b620004258883890162000339565b935060608701519150808211156200043b578283fd5b506200044a8782880162000339565b91505092959194509250565b918252602082015260400190565b6127ad80620004746000396000f3fe6080604052600436106102535760003560e01c80638a99d58611610138578063be6c0297116100b0578063d45c44351161007f578063e38335e511610064578063e38335e514610655578063f27a0c9214610668578063fdb5fefc1461067d5761025a565b8063d45c443514610615578063d547741f146106355761025a565b8063be6c0297146105a0578063c4d252f5146105c0578063c63c4e9b146105e0578063ca15c873146105f55761025a565b806391d1485411610107578063a3c88738116100ec578063a3c8873814610540578063a909091714610560578063b1c5f427146105805761025a565b806391d148541461050b578063a217fddf1461052b5761025a565b80638a99d586146104895780638f2a0bb0146104a95780638f61f4f5146104c95780639010d07c146104de5761025a565b806331d50750116101cb578063584b153e1161019a57806376a67a511161017f57806376a67a51146104345780638065657f14610454578063886ce505146104745761025a565b8063584b153e146103f457806361e1195a146104145761025a565b806331d507501461037457806336568abe14610394578063453f6285146103b457806357b001f9146103d45761025a565b806313bc9f2011610222578063248a9ca311610207578063248a9ca3146103145780632ab0f529146103345780632f2ff15d146103545761025a565b806313bc9f20146102d45780632084fca9146103015761025a565b806301d5062a1461025f57806307bd0265146102815780630d3cf6fc146102ac578063134008d3146102c15761025a565b3661025a57005b600080fd5b34801561026b57600080fd5b5061027f61027a366004611bb0565b61069d565b005b34801561028d57600080fd5b5061029661075a565b6040516102a3919061211d565b60405180910390f35b3480156102b857600080fd5b5061029661077e565b61027f6102cf366004611b44565b6107a2565b3480156102e057600080fd5b506102f46102ef366004611de6565b610855565b6040516102a39190612112565b61027f61030f366004611c24565b610887565b34801561032057600080fd5b5061029661032f366004611de6565b6109db565b34801561034057600080fd5b506102f461034f366004611de6565b6109f0565b34801561036057600080fd5b5061027f61036f366004611dfe565b610a05565b34801561038057600080fd5b506102f461038f366004611de6565b610a4d565b3480156103a057600080fd5b5061027f6103af366004611dfe565b610a61565b3480156103c057600080fd5b5061027f6103cf366004611c24565b610abd565b3480156103e057600080fd5b5061027f6103ef366004611ab9565b610be9565b34801561040057600080fd5b506102f461040f366004611de6565b610c96565b34801561042057600080fd5b5061027f61042f366004611ad4565b610cab565b34801561044057600080fd5b5061027f61044f366004611ab9565b610d89565b34801561046057600080fd5b5061029661046f366004611b44565b610e1a565b34801561048057600080fd5b50610296610e59565b34801561049557600080fd5b5061027f6104a4366004611de6565b610e5f565b3480156104b557600080fd5b5061027f6104c4366004611d38565b610ebe565b3480156104d557600080fd5b50610296611015565b3480156104ea57600080fd5b506104fe6104f9366004611e2d565b611039565b6040516102a39190611f4f565b34801561051757600080fd5b506102f4610526366004611dfe565b611058565b34801561053757600080fd5b50610296611070565b34801561054c57600080fd5b5061027f61055b366004611ab9565b611075565b34801561056c57600080fd5b5061027f61057b366004611ab9565b611106565b34801561058c57600080fd5b5061029661059b366004611c93565b611197565b3480156105ac57600080fd5b5061027f6105bb366004611de6565b6111dc565b3480156105cc57600080fd5b5061027f6105db366004611de6565b61123b565b3480156105ec57600080fd5b506102966112e5565b34801561060157600080fd5b50610296610610366004611de6565b6112eb565b34801561062157600080fd5b50610296610630366004611de6565b611302565b34801561064157600080fd5b5061027f610650366004611dfe565b611314565b61027f610663366004611c93565b61134e565b34801561067457600080fd5b5061029661146c565b34801561068957600080fd5b5061027f610698366004611ab9565b611472565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc16106ca81610526611525565b6106ef5760405162461bcd60e51b81526004016106e6906122d7565b60405180910390fd5b60006106ff898989898989610e1a565b905061070b8184611529565b6000817f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8b8b8b8b8b8a60405161074796959493929190611fb0565b60405180910390a3505050505050505050565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b7f5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca581565b600260015414156107c55760405162461bcd60e51b81526004016106e69061253c565b60026001557fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e636107f781610526611525565b6108135760405162461bcd60e51b81526004016106e6906122d7565b6000610823888888888888610e1a565b905061082f8185611597565b61083e8160008a8a8a8a6115e9565b610847816116be565b505060018055505050505050565b600081815260026020526040812054600110801561088157506000828152600260205260409020544210155b92915050565b600260015414156108aa5760405162461bcd60e51b81526004016106e69061253c565b60026001557fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e636108dc81610526611525565b6108f85760405162461bcd60e51b81526004016106e6906122d7565b6000888888888888886040516020016109179796959493929190611ffb565b6040516020818303038152906040528051906020012090506109398185611597565b6040517f8cb8c8f000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1690638cb8c8f090610991908b908b908b908b90600401612698565b600060405180830381600087803b1580156109ab57600080fd5b505af11580156109bf573d6000803e3d6000fd5b505050506109cc816116be565b50506001805550505050505050565b60009081526020819052604090206002015490565b60009081526002602052604090205460011490565b600082815260208190526040902060020154610a2390610526611525565b610a3f5760405162461bcd60e51b81526004016106e69061221d565b610a4982826116f7565b5050565b600090815260026020526040902054151590565b610a69611525565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ab35760405162461bcd60e51b81526004016106e6906125d0565b610a49828261177a565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63610aea81610526611525565b610b065760405162461bcd60e51b81526004016106e6906122d7565b600088888888888888604051602001610b259796959493929190611ffb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600290935291205490915015610b885760405162461bcd60e51b81526004016106e690612425565b610b94426004546117fd565b60026000838152602001908152602001600020819055506000817f7ddbd3d67a8312a2101789ec35e1d8ae9b63bc36cc706f905065f412aa3e2a9f8a8a8a8a8a600454604051610747969594939291906126b7565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63610c1681610526611525565b610c325760405162461bcd60e51b81526004016106e6906122d7565b8173ffffffffffffffffffffffffffffffffffffffff16633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7a57600080fd5b505af1158015610c8e573d6000803e3d6000fd5b505050505050565b60009081526002602052604090205460011090565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63610cd881610526611525565b610cf45760405162461bcd60e51b81526004016106e6906122d7565b6040517ff98d19d800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87169063f98d19d890610d4f906000908990899089908990600401612126565b600060405180830381600087803b158015610d6957600080fd5b505af1158015610d7d573d6000803e3d6000fd5b50505050505050505050565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63610db681610526611525565b610dd25760405162461bcd60e51b81526004016106e6906122d7565b8173ffffffffffffffffffffffffffffffffffffffff16638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7a57600080fd5b6000868686868686604051602001610e3796959493929190611fb0565b6040516020818303038152906040528051906020012090509695505050505050565b60045481565b333014610e7e5760405162461bcd60e51b81526004016106e690612573565b7f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d560035482604051610eb192919061268a565b60405180910390a1600355565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1610eeb81610526611525565b610f075760405162461bcd60e51b81526004016106e6906122d7565b888714610f265760405162461bcd60e51b81526004016106e69061227a565b888514610f455760405162461bcd60e51b81526004016106e69061227a565b6000610f578b8b8b8b8b8b8b8b611197565b9050610f638184611529565b60005b8a8110156110075780827f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8e8e85818110610f9d57fe5b9050602002016020810190610fb29190611ab9565b8d8d86818110610fbe57fe5b905060200201358c8c87818110610fd157fe5b9050602002810190610fe391906126e1565b8c8b604051610ff796959493929190611fb0565b60405180910390a3600101610f66565b505050505050505050505050565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc181565b60008281526020819052604081206110519083611822565b9392505050565b6000828152602081905260408120611051908361182e565b600081565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e636110a281610526611525565b6110be5760405162461bcd60e51b81526004016106e6906122d7565b8173ffffffffffffffffffffffffffffffffffffffff1663d5b091636040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7a57600080fd5b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6361113381610526611525565b61114f5760405162461bcd60e51b81526004016106e6906122d7565b8173ffffffffffffffffffffffffffffffffffffffff166336e9332d6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7a57600080fd5b600088888888888888886040516020016111b8989796959493929190612045565b60405160208183030381529060405280519060200120905098975050505050505050565b3330146111fb5760405162461bcd60e51b81526004016106e690612573565b7f596b3acad3954126f9cd5659152e0abf28f5e4c8ed617821eb7f7f4830b6bdda6004548260405161122e92919061268a565b60405180910390a1600455565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc161126881610526611525565b6112845760405162461bcd60e51b81526004016106e6906122d7565b61128d82610c96565b6112a95760405162461bcd60e51b81526004016106e6906124df565b6000828152600260205260408082208290555183917fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb7091a25050565b60035481565b600081815260208190526040812061088190611850565b60009081526002602052604090205490565b60008281526020819052604090206002015461133290610526611525565b610ab35760405162461bcd60e51b81526004016106e69061236b565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6361137b81610526611525565b6113975760405162461bcd60e51b81526004016106e6906122d7565b8786146113b65760405162461bcd60e51b81526004016106e69061227a565b8784146113d55760405162461bcd60e51b81526004016106e69061227a565b60006113e78a8a8a8a8a8a8a8a611197565b90506113f38185611597565b60005b898110156114625761145a82828d8d8581811061140f57fe5b90506020020160208101906114249190611ab9565b8c8c8681811061143057fe5b905060200201358b8b8781811061144357fe5b905060200281019061145591906126e1565b6115e9565b6001016113f6565b50610d7d816116be565b60035490565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6361149f81610526611525565b6114bb5760405162461bcd60e51b81526004016106e6906122d7565b8173ffffffffffffffffffffffffffffffffffffffff1663d389800f6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7a57600080fd5b60006110518373ffffffffffffffffffffffffffffffffffffffff841661185b565b3390565b600082815260026020526040902054156115555760405162461bcd60e51b81526004016106e690612425565b6003548110156115775760405162461bcd60e51b81526004016106e6906123c8565b61158142826117fd565b6000928352600260205260409092209190915550565b6115a082610855565b6115bc5760405162461bcd60e51b81526004016106e690612482565b8015806115cd57506115cd816109f0565b610a495760405162461bcd60e51b81526004016106e6906121c0565b60008473ffffffffffffffffffffffffffffffffffffffff16848484604051611613929190611f3f565b60006040518083038185875af1925050503d8060008114611650576040519150601f19603f3d011682016040523d82523d6000602084013e611655565b606091505b50509050806116765760405162461bcd60e51b81526004016106e69061262d565b85877fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b58878787876040516116ad9493929190611f70565b60405180910390a350505050505050565b6116c781610855565b6116e35760405162461bcd60e51b81526004016106e690612482565b600090815260026020526040902060019055565b600082815260208190526040902061170f9082611503565b15610a495761171c611525565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260208190526040902061179290826118a5565b15610a495761179f611525565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000828201838110156110515760405162461bcd60e51b81526004016106e690612334565b600061105183836118c7565b60006110518373ffffffffffffffffffffffffffffffffffffffff841661190c565b600061088182611924565b6000611867838361190c565b61189d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610881565b506000610881565b60006110518373ffffffffffffffffffffffffffffffffffffffff8416611928565b815460009082106118ea5760405162461bcd60e51b81526004016106e690612163565b8260000182815481106118f957fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60008181526001830160205260408120548015611a025783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808301919081019060009087908390811061197957fe5b906000526020600020015490508087600001848154811061199657fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806119c657fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610881565b6000915050610881565b803573ffffffffffffffffffffffffffffffffffffffff8116811461088157600080fd5b60008083601f840112611a41578182fd5b50813567ffffffffffffffff811115611a58578182fd5b6020830191508360208083028501011115611a7257600080fd5b9250929050565b60008083601f840112611a8a578182fd5b50813567ffffffffffffffff811115611aa1578182fd5b602083019150836020828501011115611a7257600080fd5b600060208284031215611aca578081fd5b6110518383611a0c565b600080600080600060a08688031215611aeb578081fd5b8535611af681612744565b94506020860135611b0681612744565b93506040860135611b1681612769565b92506060860135611b2681612744565b91506080860135611b3681612769565b809150509295509295909350565b60008060008060008060a08789031215611b5c578081fd5b8635611b6781612744565b955060208701359450604087013567ffffffffffffffff811115611b89578182fd5b611b9589828a01611a79565b979a9699509760608101359660809091013595509350505050565b600080600080600080600060c0888a031215611bca578081fd5b611bd48989611a0c565b965060208801359550604088013567ffffffffffffffff811115611bf6578182fd5b611c028a828b01611a79565b989b979a50986060810135976080820135975060a09091013595509350505050565b600080600080600080600060e0888a031215611c3e578283fd5b611c488989611a0c565b965060208801359550604088013594506060880135611c6681612769565b93506080880135611c7681612769565b9699959850939692959460a0840135945060c09093013592915050565b60008060008060008060008060a0898b031215611cae578081fd5b883567ffffffffffffffff80821115611cc5578283fd5b611cd18c838d01611a30565b909a50985060208b0135915080821115611ce9578283fd5b611cf58c838d01611a30565b909850965060408b0135915080821115611d0d578283fd5b50611d1a8b828c01611a30565b999c989b509699959896976060870135966080013595509350505050565b600080600080600080600080600060c08a8c031215611d55578081fd5b893567ffffffffffffffff80821115611d6c578283fd5b611d788d838e01611a30565b909b50995060208c0135915080821115611d90578283fd5b611d9c8d838e01611a30565b909950975060408c0135915080821115611db4578283fd5b50611dc18c828d01611a30565b9a9d999c50979a969997986060880135976080810135975060a0013595509350505050565b600060208284031215611df7578081fd5b5035919050565b60008060408385031215611e10578182fd5b823591506020830135611e2281612744565b809150509250929050565b60008060408385031215611e3f578182fd5b50508035926020909101359150565b818352602080840193600091908185020181018584845b87811015611eea57828403895281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1883603018112611ea3578687fd5b8701803567ffffffffffffffff811115611ebb578788fd5b803603891315611ec9578788fd5b611ed68682898501611ef7565b9a87019a9550505090840190600101611e65565b5091979650505050505050565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b6000828483379101908152919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8616825284602083015260606040830152611fa6606083018486611ef7565b9695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8816825286602083015260a06040830152611fe660a083018688611ef7565b60608301949094525060800152949350505050565b73ffffffffffffffffffffffffffffffffffffffff9790971687526020870195909552604086019390935290151560608501521515608084015260a083015260c082015260e00190565b60a0808252810188905260008960c08301825b8b81101561209557602080840173ffffffffffffffffffffffffffffffffffffffff6120848287611a0c565b168452935090910190600101612058565b5083810360208501528881527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8911156120cd578283fd5b602089029150818a602083013701602081810183815284830390910160408501526120f981888a611e4e565b6060850196909652505050608001529695505050505050565b901515815260200190565b90815260200190565b94855273ffffffffffffffffffffffffffffffffffffffff9384166020860152911515604085015290911660608301521515608082015260a00190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60408201527f6473000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f54696d656c6f636b436f6e74726f6c6c65723a206d697373696e67206465706560408201527f6e64656e63790000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b60208082526023908201527f54696d656c6f636b436f6e74726f6c6c65723a206c656e677468206d69736d6160408201527f7463680000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f54696d656c6f636b436f6e74726f6c6c65723a2073656e64657220726571756960408201527f726573207065726d697373696f6e000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b60208082526026908201527f54696d656c6f636b436f6e74726f6c6c65723a20696e73756666696369656e7460408201527f2064656c61790000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20616c60408201527f7265616479207363686564756c65640000000000000000000000000000000000606082015260800190565b6020808252602a908201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20697360408201527f206e6f7420726561647900000000000000000000000000000000000000000000606082015260800190565b60208082526031908201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20636160408201527f6e6e6f742062652063616e63656c6c6564000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f54696d656c6f636b436f6e74726f6c6c65723a2063616c6c6572206d7573742060408201527f62652074696d656c6f636b000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b60208082526033908201527f54696d656c6f636b436f6e74726f6c6c65723a20756e6465726c79696e67207460408201527f72616e73616374696f6e20726576657274656400000000000000000000000000606082015260800190565b918252602082015260400190565b9384526020840192909252151560408301521515606082015260800190565b9586526020860194909452911515604085015215156060840152608083015260a082015260c00190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612715578283fd5b83018035915067ffffffffffffffff82111561272f578283fd5b602001915036819003821315611a7257600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461276657600080fd5b50565b801515811461276657600080fdfea26469706673582212204862bfb7cebefc6257514b05095b2125fc93bad60ec50dfb564d5f386076e01064736f6c634300060c00335f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5b09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1d8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
  "deployedBytecode": "0x6080604052600436106102535760003560e01c80638a99d58611610138578063be6c0297116100b0578063d45c44351161007f578063e38335e511610064578063e38335e514610655578063f27a0c9214610668578063fdb5fefc1461067d5761025a565b8063d45c443514610615578063d547741f146106355761025a565b8063be6c0297146105a0578063c4d252f5146105c0578063c63c4e9b146105e0578063ca15c873146105f55761025a565b806391d1485411610107578063a3c88738116100ec578063a3c8873814610540578063a909091714610560578063b1c5f427146105805761025a565b806391d148541461050b578063a217fddf1461052b5761025a565b80638a99d586146104895780638f2a0bb0146104a95780638f61f4f5146104c95780639010d07c146104de5761025a565b806331d50750116101cb578063584b153e1161019a57806376a67a511161017f57806376a67a51146104345780638065657f14610454578063886ce505146104745761025a565b8063584b153e146103f457806361e1195a146104145761025a565b806331d507501461037457806336568abe14610394578063453f6285146103b457806357b001f9146103d45761025a565b806313bc9f2011610222578063248a9ca311610207578063248a9ca3146103145780632ab0f529146103345780632f2ff15d146103545761025a565b806313bc9f20146102d45780632084fca9146103015761025a565b806301d5062a1461025f57806307bd0265146102815780630d3cf6fc146102ac578063134008d3146102c15761025a565b3661025a57005b600080fd5b34801561026b57600080fd5b5061027f61027a366004611bb0565b61069d565b005b34801561028d57600080fd5b5061029661075a565b6040516102a3919061211d565b60405180910390f35b3480156102b857600080fd5b5061029661077e565b61027f6102cf366004611b44565b6107a2565b3480156102e057600080fd5b506102f46102ef366004611de6565b610855565b6040516102a39190612112565b61027f61030f366004611c24565b610887565b34801561032057600080fd5b5061029661032f366004611de6565b6109db565b34801561034057600080fd5b506102f461034f366004611de6565b6109f0565b34801561036057600080fd5b5061027f61036f366004611dfe565b610a05565b34801561038057600080fd5b506102f461038f366004611de6565b610a4d565b3480156103a057600080fd5b5061027f6103af366004611dfe565b610a61565b3480156103c057600080fd5b5061027f6103cf366004611c24565b610abd565b3480156103e057600080fd5b5061027f6103ef366004611ab9565b610be9565b34801561040057600080fd5b506102f461040f366004611de6565b610c96565b34801561042057600080fd5b5061027f61042f366004611ad4565b610cab565b34801561044057600080fd5b5061027f61044f366004611ab9565b610d89565b34801561046057600080fd5b5061029661046f366004611b44565b610e1a565b34801561048057600080fd5b50610296610e59565b34801561049557600080fd5b5061027f6104a4366004611de6565b610e5f565b3480156104b557600080fd5b5061027f6104c4366004611d38565b610ebe565b3480156104d557600080fd5b50610296611015565b3480156104ea57600080fd5b506104fe6104f9366004611e2d565b611039565b6040516102a39190611f4f565b34801561051757600080fd5b506102f4610526366004611dfe565b611058565b34801561053757600080fd5b50610296611070565b34801561054c57600080fd5b5061027f61055b366004611ab9565b611075565b34801561056c57600080fd5b5061027f61057b366004611ab9565b611106565b34801561058c57600080fd5b5061029661059b366004611c93565b611197565b3480156105ac57600080fd5b5061027f6105bb366004611de6565b6111dc565b3480156105cc57600080fd5b5061027f6105db366004611de6565b61123b565b3480156105ec57600080fd5b506102966112e5565b34801561060157600080fd5b50610296610610366004611de6565b6112eb565b34801561062157600080fd5b50610296610630366004611de6565b611302565b34801561064157600080fd5b5061027f610650366004611dfe565b611314565b61027f610663366004611c93565b61134e565b34801561067457600080fd5b5061029661146c565b34801561068957600080fd5b5061027f610698366004611ab9565b611472565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc16106ca81610526611525565b6106ef5760405162461bcd60e51b81526004016106e6906122d7565b60405180910390fd5b60006106ff898989898989610e1a565b905061070b8184611529565b6000817f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8b8b8b8b8b8a60405161074796959493929190611fb0565b60405180910390a3505050505050505050565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b7f5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca581565b600260015414156107c55760405162461bcd60e51b81526004016106e69061253c565b60026001557fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e636107f781610526611525565b6108135760405162461bcd60e51b81526004016106e6906122d7565b6000610823888888888888610e1a565b905061082f8185611597565b61083e8160008a8a8a8a6115e9565b610847816116be565b505060018055505050505050565b600081815260026020526040812054600110801561088157506000828152600260205260409020544210155b92915050565b600260015414156108aa5760405162461bcd60e51b81526004016106e69061253c565b60026001557fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e636108dc81610526611525565b6108f85760405162461bcd60e51b81526004016106e6906122d7565b6000888888888888886040516020016109179796959493929190611ffb565b6040516020818303038152906040528051906020012090506109398185611597565b6040517f8cb8c8f000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1690638cb8c8f090610991908b908b908b908b90600401612698565b600060405180830381600087803b1580156109ab57600080fd5b505af11580156109bf573d6000803e3d6000fd5b505050506109cc816116be565b50506001805550505050505050565b60009081526020819052604090206002015490565b60009081526002602052604090205460011490565b600082815260208190526040902060020154610a2390610526611525565b610a3f5760405162461bcd60e51b81526004016106e69061221d565b610a4982826116f7565b5050565b600090815260026020526040902054151590565b610a69611525565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ab35760405162461bcd60e51b81526004016106e6906125d0565b610a49828261177a565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63610aea81610526611525565b610b065760405162461bcd60e51b81526004016106e6906122d7565b600088888888888888604051602001610b259796959493929190611ffb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600290935291205490915015610b885760405162461bcd60e51b81526004016106e690612425565b610b94426004546117fd565b60026000838152602001908152602001600020819055506000817f7ddbd3d67a8312a2101789ec35e1d8ae9b63bc36cc706f905065f412aa3e2a9f8a8a8a8a8a600454604051610747969594939291906126b7565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63610c1681610526611525565b610c325760405162461bcd60e51b81526004016106e6906122d7565b8173ffffffffffffffffffffffffffffffffffffffff16633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7a57600080fd5b505af1158015610c8e573d6000803e3d6000fd5b505050505050565b60009081526002602052604090205460011090565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63610cd881610526611525565b610cf45760405162461bcd60e51b81526004016106e6906122d7565b6040517ff98d19d800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87169063f98d19d890610d4f906000908990899089908990600401612126565b600060405180830381600087803b158015610d6957600080fd5b505af1158015610d7d573d6000803e3d6000fd5b50505050505050505050565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63610db681610526611525565b610dd25760405162461bcd60e51b81526004016106e6906122d7565b8173ffffffffffffffffffffffffffffffffffffffff16638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7a57600080fd5b6000868686868686604051602001610e3796959493929190611fb0565b6040516020818303038152906040528051906020012090509695505050505050565b60045481565b333014610e7e5760405162461bcd60e51b81526004016106e690612573565b7f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d560035482604051610eb192919061268a565b60405180910390a1600355565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1610eeb81610526611525565b610f075760405162461bcd60e51b81526004016106e6906122d7565b888714610f265760405162461bcd60e51b81526004016106e69061227a565b888514610f455760405162461bcd60e51b81526004016106e69061227a565b6000610f578b8b8b8b8b8b8b8b611197565b9050610f638184611529565b60005b8a8110156110075780827f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8e8e85818110610f9d57fe5b9050602002016020810190610fb29190611ab9565b8d8d86818110610fbe57fe5b905060200201358c8c87818110610fd157fe5b9050602002810190610fe391906126e1565b8c8b604051610ff796959493929190611fb0565b60405180910390a3600101610f66565b505050505050505050505050565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc181565b60008281526020819052604081206110519083611822565b9392505050565b6000828152602081905260408120611051908361182e565b600081565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e636110a281610526611525565b6110be5760405162461bcd60e51b81526004016106e6906122d7565b8173ffffffffffffffffffffffffffffffffffffffff1663d5b091636040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7a57600080fd5b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6361113381610526611525565b61114f5760405162461bcd60e51b81526004016106e6906122d7565b8173ffffffffffffffffffffffffffffffffffffffff166336e9332d6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7a57600080fd5b600088888888888888886040516020016111b8989796959493929190612045565b60405160208183030381529060405280519060200120905098975050505050505050565b3330146111fb5760405162461bcd60e51b81526004016106e690612573565b7f596b3acad3954126f9cd5659152e0abf28f5e4c8ed617821eb7f7f4830b6bdda6004548260405161122e92919061268a565b60405180910390a1600455565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc161126881610526611525565b6112845760405162461bcd60e51b81526004016106e6906122d7565b61128d82610c96565b6112a95760405162461bcd60e51b81526004016106e6906124df565b6000828152600260205260408082208290555183917fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb7091a25050565b60035481565b600081815260208190526040812061088190611850565b60009081526002602052604090205490565b60008281526020819052604090206002015461133290610526611525565b610ab35760405162461bcd60e51b81526004016106e69061236b565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6361137b81610526611525565b6113975760405162461bcd60e51b81526004016106e6906122d7565b8786146113b65760405162461bcd60e51b81526004016106e69061227a565b8784146113d55760405162461bcd60e51b81526004016106e69061227a565b60006113e78a8a8a8a8a8a8a8a611197565b90506113f38185611597565b60005b898110156114625761145a82828d8d8581811061140f57fe5b90506020020160208101906114249190611ab9565b8c8c8681811061143057fe5b905060200201358b8b8781811061144357fe5b905060200281019061145591906126e1565b6115e9565b6001016113f6565b50610d7d816116be565b60035490565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6361149f81610526611525565b6114bb5760405162461bcd60e51b81526004016106e6906122d7565b8173ffffffffffffffffffffffffffffffffffffffff1663d389800f6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7a57600080fd5b60006110518373ffffffffffffffffffffffffffffffffffffffff841661185b565b3390565b600082815260026020526040902054156115555760405162461bcd60e51b81526004016106e690612425565b6003548110156115775760405162461bcd60e51b81526004016106e6906123c8565b61158142826117fd565b6000928352600260205260409092209190915550565b6115a082610855565b6115bc5760405162461bcd60e51b81526004016106e690612482565b8015806115cd57506115cd816109f0565b610a495760405162461bcd60e51b81526004016106e6906121c0565b60008473ffffffffffffffffffffffffffffffffffffffff16848484604051611613929190611f3f565b60006040518083038185875af1925050503d8060008114611650576040519150601f19603f3d011682016040523d82523d6000602084013e611655565b606091505b50509050806116765760405162461bcd60e51b81526004016106e69061262d565b85877fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b58878787876040516116ad9493929190611f70565b60405180910390a350505050505050565b6116c781610855565b6116e35760405162461bcd60e51b81526004016106e690612482565b600090815260026020526040902060019055565b600082815260208190526040902061170f9082611503565b15610a495761171c611525565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260208190526040902061179290826118a5565b15610a495761179f611525565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000828201838110156110515760405162461bcd60e51b81526004016106e690612334565b600061105183836118c7565b60006110518373ffffffffffffffffffffffffffffffffffffffff841661190c565b600061088182611924565b6000611867838361190c565b61189d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610881565b506000610881565b60006110518373ffffffffffffffffffffffffffffffffffffffff8416611928565b815460009082106118ea5760405162461bcd60e51b81526004016106e690612163565b8260000182815481106118f957fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60008181526001830160205260408120548015611a025783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808301919081019060009087908390811061197957fe5b906000526020600020015490508087600001848154811061199657fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806119c657fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610881565b6000915050610881565b803573ffffffffffffffffffffffffffffffffffffffff8116811461088157600080fd5b60008083601f840112611a41578182fd5b50813567ffffffffffffffff811115611a58578182fd5b6020830191508360208083028501011115611a7257600080fd5b9250929050565b60008083601f840112611a8a578182fd5b50813567ffffffffffffffff811115611aa1578182fd5b602083019150836020828501011115611a7257600080fd5b600060208284031215611aca578081fd5b6110518383611a0c565b600080600080600060a08688031215611aeb578081fd5b8535611af681612744565b94506020860135611b0681612744565b93506040860135611b1681612769565b92506060860135611b2681612744565b91506080860135611b3681612769565b809150509295509295909350565b60008060008060008060a08789031215611b5c578081fd5b8635611b6781612744565b955060208701359450604087013567ffffffffffffffff811115611b89578182fd5b611b9589828a01611a79565b979a9699509760608101359660809091013595509350505050565b600080600080600080600060c0888a031215611bca578081fd5b611bd48989611a0c565b965060208801359550604088013567ffffffffffffffff811115611bf6578182fd5b611c028a828b01611a79565b989b979a50986060810135976080820135975060a09091013595509350505050565b600080600080600080600060e0888a031215611c3e578283fd5b611c488989611a0c565b965060208801359550604088013594506060880135611c6681612769565b93506080880135611c7681612769565b9699959850939692959460a0840135945060c09093013592915050565b60008060008060008060008060a0898b031215611cae578081fd5b883567ffffffffffffffff80821115611cc5578283fd5b611cd18c838d01611a30565b909a50985060208b0135915080821115611ce9578283fd5b611cf58c838d01611a30565b909850965060408b0135915080821115611d0d578283fd5b50611d1a8b828c01611a30565b999c989b509699959896976060870135966080013595509350505050565b600080600080600080600080600060c08a8c031215611d55578081fd5b893567ffffffffffffffff80821115611d6c578283fd5b611d788d838e01611a30565b909b50995060208c0135915080821115611d90578283fd5b611d9c8d838e01611a30565b909950975060408c0135915080821115611db4578283fd5b50611dc18c828d01611a30565b9a9d999c50979a969997986060880135976080810135975060a0013595509350505050565b600060208284031215611df7578081fd5b5035919050565b60008060408385031215611e10578182fd5b823591506020830135611e2281612744565b809150509250929050565b60008060408385031215611e3f578182fd5b50508035926020909101359150565b818352602080840193600091908185020181018584845b87811015611eea57828403895281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1883603018112611ea3578687fd5b8701803567ffffffffffffffff811115611ebb578788fd5b803603891315611ec9578788fd5b611ed68682898501611ef7565b9a87019a9550505090840190600101611e65565b5091979650505050505050565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b6000828483379101908152919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8616825284602083015260606040830152611fa6606083018486611ef7565b9695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8816825286602083015260a06040830152611fe660a083018688611ef7565b60608301949094525060800152949350505050565b73ffffffffffffffffffffffffffffffffffffffff9790971687526020870195909552604086019390935290151560608501521515608084015260a083015260c082015260e00190565b60a0808252810188905260008960c08301825b8b81101561209557602080840173ffffffffffffffffffffffffffffffffffffffff6120848287611a0c565b168452935090910190600101612058565b5083810360208501528881527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8911156120cd578283fd5b602089029150818a602083013701602081810183815284830390910160408501526120f981888a611e4e565b6060850196909652505050608001529695505050505050565b901515815260200190565b90815260200190565b94855273ffffffffffffffffffffffffffffffffffffffff9384166020860152911515604085015290911660608301521515608082015260a00190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60408201527f6473000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f54696d656c6f636b436f6e74726f6c6c65723a206d697373696e67206465706560408201527f6e64656e63790000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b60208082526023908201527f54696d656c6f636b436f6e74726f6c6c65723a206c656e677468206d69736d6160408201527f7463680000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f54696d656c6f636b436f6e74726f6c6c65723a2073656e64657220726571756960408201527f726573207065726d697373696f6e000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b60208082526026908201527f54696d656c6f636b436f6e74726f6c6c65723a20696e73756666696369656e7460408201527f2064656c61790000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20616c60408201527f7265616479207363686564756c65640000000000000000000000000000000000606082015260800190565b6020808252602a908201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20697360408201527f206e6f7420726561647900000000000000000000000000000000000000000000606082015260800190565b60208082526031908201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20636160408201527f6e6e6f742062652063616e63656c6c6564000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f54696d656c6f636b436f6e74726f6c6c65723a2063616c6c6572206d7573742060408201527f62652074696d656c6f636b000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b60208082526033908201527f54696d656c6f636b436f6e74726f6c6c65723a20756e6465726c79696e67207460408201527f72616e73616374696f6e20726576657274656400000000000000000000000000606082015260800190565b918252602082015260400190565b9384526020840192909252151560408301521515606082015260800190565b9586526020860194909452911515604085015215156060840152608083015260a082015260c00190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612715578283fd5b83018035915067ffffffffffffffff82111561272f578283fd5b602001915036819003821315611a7257600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461276657600080fd5b50565b801515811461276657600080fdfea26469706673582212204862bfb7cebefc6257514b05095b2125fc93bad60ec50dfb564d5f386076e01064736f6c634300060c0033",
  "devdoc": {
    "events": {
      "CallExecuted(bytes32,uint256,address,uint256,bytes)": {
        "details": "Emitted when a call is performed as part of operation `id`."
      },
      "CallScheduled(bytes32,uint256,address,uint256,bytes,bytes32,uint256)": {
        "details": "Emitted when a call is scheduled as part of operation `id`."
      },
      "Cancelled(bytes32)": {
        "details": "Emitted when operation `id` is cancelled."
      },
      "MinDelayChange(uint256,uint256)": {
        "details": "Emitted when the minimum delay for future operations is modified."
      },
      "SetScheduled(bytes32,uint256,uint256,uint256,bool,bool,bytes32,uint256)": {
        "details": "Emitted when a call is scheduled as part of operation `id`."
      }
    },
    "kind": "dev",
    "methods": {
      "cancel(bytes32)": {
        "details": "Cancel an operation. Requirements: - the caller must have the 'proposer' role."
      },
      "constructor": {
        "details": "Initializes the contract with a given `minDelay`."
      },
      "execute(address,uint256,bytes,bytes32,bytes32)": {
        "details": "Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Requirements: - the caller must have the 'executor' role."
      },
      "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)": {
        "details": "Execute an (ready) operation containing a batch of transactions. Emits one {CallExecuted} event per transaction in the batch. Requirements: - the caller must have the 'executor' role."
      },
      "getMinDelay()": {
        "details": "Returns the minimum delay for an operation to become valid. This value can be changed by executing an operation that calls `updateDelay`."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getTimestamp(bytes32)": {
        "details": "Returns the timestamp at with an operation becomes ready (0 for unset operations, 1 for done operations)."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "hashOperation(address,uint256,bytes,bytes32,bytes32)": {
        "details": "Returns the identifier of an operation containing a single transaction."
      },
      "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)": {
        "details": "Returns the identifier of an operation containing a batch of transactions."
      },
      "isOperation(bytes32)": {
        "details": "Returns whether an id correspond to a registered operation. This includes both Pending, Ready and Done operations."
      },
      "isOperationDone(bytes32)": {
        "details": "Returns whether an operation is done or not."
      },
      "isOperationPending(bytes32)": {
        "details": "Returns whether an operation is pending or not."
      },
      "isOperationReady(bytes32)": {
        "details": "Returns whether an operation is ready or not."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "schedule(address,uint256,bytes,bytes32,bytes32,uint256)": {
        "details": "Schedule an operation containing a single transaction. Emits a {CallScheduled} event. Requirements: - the caller must have the 'proposer' role."
      },
      "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)": {
        "details": "Schedule an operation containing a batch of transactions. Emits one {CallScheduled} event per transaction in the batch. Requirements: - the caller must have the 'proposer' role."
      },
      "scheduleSet(address,uint256,uint256,bool,bool,bytes32,bytes32)": {
        "details": "Reduced timelock functions"
      },
      "updateMinDelay(uint256)": {
        "details": "Changes the minimum timelock duration for future operations. Emits a {MinDelayChange} event. Requirements: - the caller must be the timelock itself. This can only be achieved by scheduling and later executing an operation where the timelock is the target and the data is the ABI-encoded call to this function."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22,
        "contract": "contracts/TimelockController.sol:TimelockController",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)18_storage)"
      },
      {
        "astId": 2455,
        "contract": "contracts/TimelockController.sol:TimelockController",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6702,
        "contract": "contracts/TimelockController.sol:TimelockController",
        "label": "_timestamps",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 6704,
        "contract": "contracts/TimelockController.sol:TimelockController",
        "label": "minDelay",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6706,
        "contract": "contracts/TimelockController.sol:TimelockController",
        "label": "minDelayReduced",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)18_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)18_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2136_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2135,
            "contract": "contracts/TimelockController.sol:TimelockController",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1871_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)18_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 15,
            "contract": "contracts/TimelockController.sol:TimelockController",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2136_storage"
          },
          {
            "astId": 17,
            "contract": "contracts/TimelockController.sol:TimelockController",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1871_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1866,
            "contract": "contracts/TimelockController.sol:TimelockController",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1870,
            "contract": "contracts/TimelockController.sol:TimelockController",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}