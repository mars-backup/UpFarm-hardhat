{
  "address": "0x317Ac0d270773003741AE22331A8cF5244f2f716",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_cakeAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isAutoComp",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_isCollect",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToUpPath0",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToUpPath1",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToToken0Path",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToToken1Path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_controllerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buyBackRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_entranceFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFeeFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_core",
          "type": "address"
        }
      ],
      "name": "CoreUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyBackRouter0Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyBackRouter1Address",
          "type": "address"
        }
      ],
      "name": "SetBuyBackRouterAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isCollect",
          "type": "bool"
        }
      ],
      "name": "SetCollect",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_earnedToToken0Path0",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_earnedToToken0Path1",
          "type": "address[]"
        }
      ],
      "name": "SetEarnedToToken0Path",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_earnedToToken0Router0Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_earnedToToken0Router1Address",
          "type": "address"
        }
      ],
      "name": "SetEarnedToToken0RouterAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_earnedToToken1Path0",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_earnedToToken1Path1",
          "type": "address[]"
        }
      ],
      "name": "SetEarnedToToken1Path",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_earnedToToken1Router0Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_earnedToToken1Router1Address",
          "type": "address"
        }
      ],
      "name": "SetEarnedToToken1RouterAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_earnedToUpPath0",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_earnedToUpPath1",
          "type": "address[]"
        }
      ],
      "name": "SetEarnedToUpPath",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_onlyGov",
          "type": "bool"
        }
      ],
      "name": "SetOnlyGov",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_rewardsAddress",
          "type": "address"
        }
      ],
      "name": "SetRewardsAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_entranceFeeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawFeeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_controllerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_buyBackRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_slippageFactor",
          "type": "uint256"
        }
      ],
      "name": "SetSettings",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_wantRouterAddress",
          "type": "address"
        }
      ],
      "name": "SetWantRouterAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MASTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_SHARES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPFarmAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackRateMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackRateUL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackRouter0Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackRouter1Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerFeeMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerFeeUL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToToken0Path0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToToken0Path1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnedToToken0Router0Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnedToToken0Router1Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToToken1Path0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToToken1Path1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnedToToken1Router0Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnedToToken1Router1Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToUpPath0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToUpPath1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFeeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFeeFactorLL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFeeFactorMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAutoComp",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCAKEStaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCollect",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSameAssetDeposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEarnBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onlyGov",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyBackRouter0Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyBackRouter1Address",
          "type": "address"
        }
      ],
      "name": "setBuyBackRouterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isCollect",
          "type": "bool"
        }
      ],
      "name": "setCollect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "core_",
          "type": "address"
        }
      ],
      "name": "setCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_earnedToToken0Path0",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToToken0Path1",
          "type": "address[]"
        }
      ],
      "name": "setEarnedToToken0Path",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_earnedToToken0Router0Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_earnedToToken0Router1Address",
          "type": "address"
        }
      ],
      "name": "setEarnedToToken0RouterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_earnedToToken1Path0",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToToken1Path1",
          "type": "address[]"
        }
      ],
      "name": "setEarnedToToken1Path",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_earnedToToken1Router0Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_earnedToToken1Router1Address",
          "type": "address"
        }
      ],
      "name": "setEarnedToToken1RouterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_earnedToUpPath0",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToUpPath1",
          "type": "address[]"
        }
      ],
      "name": "setEarnedToUpPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_onlyGov",
          "type": "bool"
        }
      ],
      "name": "setOnlyGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsAddress",
          "type": "address"
        }
      ],
      "name": "setRewardsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entranceFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_controllerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buyBackRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippageFactor",
          "type": "uint256"
        }
      ],
      "name": "setSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wantRouterAddress",
          "type": "address"
        }
      ],
      "name": "setWantRouterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageFactorUL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantLockedTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantRouterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wbnbAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactorLL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactorMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapBNB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x451dbfde892bb7a8056e8062cb90f691b5f19954f810d73048b8e7be57a48763",
  "receipt": {
    "to": null,
    "from": "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
    "contractAddress": "0x317Ac0d270773003741AE22331A8cF5244f2f716",
    "transactionIndex": 8,
    "gasUsed": "5213876",
    "logsBloom": "0x
    "blockHash": "0x7fa704e46e505bb0cf1c95827ee3d01e38eceed10b537055baa652990908d1f9",
    "transactionHash": "0x451dbfde892bb7a8056e8062cb90f691b5f19954f810d73048b8e7be57a48763",
    "logs": [],
    "blockNumber": 16802792,
    "cumulativeGasUsed": "7319568",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x40fc3759Ccc4E466650891a91F34Bdd6129094D6",
      "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd",
      "0x1Bc3AFDAFa404164962d345F26c8d84A1c9B72b2",
      "0x4C2e91C8eD9eed3aFa2cC5ecBb26ae752c83dA59",
      "0x3a5fBC484dbbAC7F5c7fb17f9e6244B5D508AC4f",
      "0x9Ff7010Fe2DbdD638257b8eaA1a65e73129361A3",
      "0xd508f5B8c72b64B73bfD9Da823229F89590a8fA5",
      "0x9Ff7010Fe2DbdD638257b8eaA1a65e73129361A3",
      "0x03188E7f9ba26baa61DA2C496f02fF548dF87AEe",
      "0xa84400261e8563BE19633B7477fDEb0634bAC5DA",
      "0x0000000000000000000000000000000000000000",
      "0x9ac64cc6e4415144c455bd8e4837fea55603e5c3",
      "0x9ac64cc6e4415144c455bd8e4837fea55603e5c3",
      "0x9ac64cc6e4415144c455bd8e4837fea55603e5c3",
      "0xC9261c7Ca765A1e1cf563ecab36C41a7B1a6B460"
    ],
    4,
    "0x9Ff7010Fe2DbdD638257b8eaA1a65e73129361A3",
    true,
    false,
    [
      "0x9Ff7010Fe2DbdD638257b8eaA1a65e73129361A3",
      "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd"
    ],
    [
      "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd",
      "0x4C2e91C8eD9eed3aFa2cC5ecBb26ae752c83dA59"
    ],
    [],
    [
      "0x9Ff7010Fe2DbdD638257b8eaA1a65e73129361A3",
      "0xd508f5B8c72b64B73bfD9Da823229F89590a8fA5"
    ],
    300,
    200,
    9990,
    9990
  ],
  "solcInputHash": "2f541bcd60d5e1a907d6462ac5275e07",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_cakeAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAutoComp\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isCollect\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToUpPath0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToUpPath1\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToToken0Path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToToken1Path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_entranceFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFeeFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyBackRouter0Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyBackRouter1Address\",\"type\":\"address\"}],\"name\":\"SetBuyBackRouterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isCollect\",\"type\":\"bool\"}],\"name\":\"SetCollect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_earnedToToken0Path0\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_earnedToToken0Path1\",\"type\":\"address[]\"}],\"name\":\"SetEarnedToToken0Path\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_earnedToToken0Router0Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_earnedToToken0Router1Address\",\"type\":\"address\"}],\"name\":\"SetEarnedToToken0RouterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_earnedToToken1Path0\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_earnedToToken1Path1\",\"type\":\"address[]\"}],\"name\":\"SetEarnedToToken1Path\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_earnedToToken1Router0Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_earnedToToken1Router1Address\",\"type\":\"address\"}],\"name\":\"SetEarnedToToken1RouterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_earnedToUpPath0\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_earnedToUpPath1\",\"type\":\"address[]\"}],\"name\":\"SetEarnedToUpPath\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_onlyGov\",\"type\":\"bool\"}],\"name\":\"SetOnlyGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardsAddress\",\"type\":\"address\"}],\"name\":\"SetRewardsAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_entranceFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_slippageFactor\",\"type\":\"uint256\"}],\"name\":\"SetSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_wantRouterAddress\",\"type\":\"address\"}],\"name\":\"SetWantRouterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MASTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_SHARES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPFarmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRateMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRateUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRouter0Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRouter1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFeeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFeeUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToToken0Path0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToToken0Path1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedToToken0Router0Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedToToken0Router1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToToken1Path0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToToken1Path1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedToToken1Router0Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedToToken1Router1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToUpPath0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToUpPath1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeFactorLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeFactorMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoComp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCAKEStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCollect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSameAssetDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEarnBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyGov\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyBackRouter0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyBackRouter1Address\",\"type\":\"address\"}],\"name\":\"setBuyBackRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isCollect\",\"type\":\"bool\"}],\"name\":\"setCollect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"core_\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_earnedToToken0Path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToToken0Path1\",\"type\":\"address[]\"}],\"name\":\"setEarnedToToken0Path\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_earnedToToken0Router0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_earnedToToken0Router1Address\",\"type\":\"address\"}],\"name\":\"setEarnedToToken0RouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_earnedToToken1Path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToToken1Path1\",\"type\":\"address[]\"}],\"name\":\"setEarnedToToken1Path\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_earnedToToken1Router0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_earnedToToken1Router1Address\",\"type\":\"address\"}],\"name\":\"setEarnedToToken1RouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_earnedToUpPath0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToUpPath1\",\"type\":\"address[]\"}],\"name\":\"setEarnedToUpPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyGov\",\"type\":\"bool\"}],\"name\":\"setOnlyGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsAddress\",\"type\":\"address\"}],\"name\":\"setRewardsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entranceFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippageFactor\",\"type\":\"uint256\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wantRouterAddress\",\"type\":\"address\"}],\"name\":\"setWantRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactorUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantLockedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactorLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactorMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrategyPCS.sol\":\"StrategyPCS\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IPancakeswapFarm.sol\\\";\\nimport \\\"./interfaces/IPancakeRouter02.sol\\\";\\nimport \\\"./interfaces/IWBNB.sol\\\";\\nimport \\\"./refs/CoreRef.sol\\\";\\n\\ninterface IBurnable {\\n    function burn(uint256 amount) external;\\n}\\n\\nabstract contract Strategy is CoreRef, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant MINIMUM_SHARES = 10 ** 4;\\n\\n    bool public isCAKEStaking;\\n    bool public isSameAssetDeposit;\\n    bool public isAutoComp;\\n    bool public isCollect;\\n\\n    bool public onlyGov = true;\\n\\n    address public farmContractAddress;\\n    uint256 public pid;\\n    address public wantAddress;\\n    address public token0Address;\\n    address public token1Address;\\n    address public earnedAddress;\\n\\n    address public wbnbAddress;\\n    address public UPFarmAddress;\\n    address public UPAddress;\\n\\n    uint256 public lastEarnBlock = 0;\\n    uint256 public wantLockedTotal = 0;\\n    uint256 public sharesTotal = 0;\\n\\n    uint256 public controllerFee = 0; // 70;\\n    uint256 public constant controllerFeeMax = 10000; // 100 = 1%\\n    uint256 public constant controllerFeeUL = 9900;\\n\\n    uint256 public buyBackRate = 0; // 250;\\n    uint256 public constant buyBackRateMax = 10000; // 100 = 1%\\n    uint256 public constant buyBackRateUL = 9900;\\n    address public rewardsAddress;\\n\\n    uint256 public entranceFeeFactor = 9990; // < 0.1% entrance fee - goes to pool + prevents front-running\\n    uint256 public constant entranceFeeFactorMax = 10000;\\n    uint256 public constant entranceFeeFactorLL = 9000; // 10% is the max entrance fee settable. LL = lowerlimit\\n\\n    uint256 public withdrawFeeFactor = 10000; // 0.1% withdraw fee - goes to pool\\n    uint256 public constant withdrawFeeFactorMax = 10000;\\n    uint256 public constant withdrawFeeFactorLL = 9000; // 10% is the max entrance fee settable. LL = lowerlimit\\n\\n    uint256 public slippageFactor = 950; // 5% default slippage tolerance\\n    uint256 public constant slippageFactorUL = 999;\\n\\n    address public earnedToToken0Router0Address;\\n    address public earnedToToken0Router1Address;\\n    address public earnedToToken1Router0Address;\\n    address public earnedToToken1Router1Address;\\n    address public wantRouterAddress;\\n    address public buyBackRouter0Address;\\n    address public buyBackRouter1Address;\\n    address[] public earnedToUpPath0;\\n    address[] public earnedToUpPath1;\\n    address[] public earnedToToken0Path0;\\n    address[] public earnedToToken0Path1;\\n    address[] public earnedToToken1Path0;\\n    address[] public earnedToToken1Path1;\\n\\n    event SetSettings(\\n        uint256 _entranceFeeFactor,\\n        uint256 _withdrawFeeFactor,\\n        uint256 _controllerFee,\\n        uint256 _buyBackRate,\\n        uint256 _slippageFactor\\n    );\\n\\n    event SetRewardsAddress(address _rewardsAddress);\\n    event SetCollect(bool _isCollect);\\n    event SetEarnedToUpPath(address[] _earnedToUpPath0, address[] _earnedToUpPath1);\\n    event SetEarnedToToken0Path(address[] _earnedToToken0Path0, address[] _earnedToToken0Path1);\\n    event SetEarnedToToken1Path(address[] _earnedToToken1Path0, address[] _earnedToToken1Path1);\\n    event SetEarnedToToken0RouterAddress(address _earnedToToken0Router0Address, address _earnedToToken0Router1Address);\\n    event SetEarnedToToken1RouterAddress(address _earnedToToken1Router0Address, address _earnedToToken1Router1Address);\\n    event SetWantRouterAddress(address _wantRouterAddress);\\n    event SetBuyBackRouterAddress(address _buyBackRouter0Address, address _buyBackRouter1Address);\\n    event SetOnlyGov(bool _onlyGov);\\n    event Deposit(address user, uint256 amount);\\n    event Withdraw(address user, uint256 amount);\\n\\n    function deposit(uint256 _wantAmt)\\n        external\\n        virtual\\n        onlyMaster\\n        nonReentrant\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        bool isFirst = sharesTotal == 0;\\n        require(!isFirst || _wantAmt > MINIMUM_SHARES, \\\"first deposit amount <= MINIMUM_SHARES\\\");\\n\\n        uint256 beforeAmount =  IERC20(wantAddress).balanceOf(address(this));\\n        IERC20(wantAddress).safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            _wantAmt\\n        );\\n        uint256 afterAmount =  IERC20(wantAddress).balanceOf(address(this));\\n\\n        uint256 realamount = afterAmount.sub(beforeAmount);\\n\\n        uint256 sharesAdded = realamount;\\n        if (wantLockedTotal > 0 && sharesTotal > 0) {\\n            sharesAdded = realamount\\n                .mul(sharesTotal)\\n                .mul(entranceFeeFactor)\\n                .div(wantLockedTotal)\\n                .div(entranceFeeFactorMax);\\n        }\\n        sharesTotal = sharesTotal.add(sharesAdded);\\n\\n        if (isAutoComp) {\\n            _farm();\\n        } else {\\n            wantLockedTotal = wantLockedTotal.add(realamount);\\n        }\\n\\n        if (isFirst) {\\n            sharesAdded = sharesAdded.sub(MINIMUM_SHARES);\\n        }\\n\\n        if (isAutoComp && isCollect) {\\n            _collect();\\n        }\\n\\n        emit Deposit(msg.sender, realamount);\\n        return sharesAdded;\\n    }\\n\\n    function farm() external virtual nonReentrant {\\n        _farm();\\n    }\\n\\n    function _farm() internal virtual {\\n        require(isAutoComp, \\\"!isAutoComp\\\");\\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\\n        wantLockedTotal = wantLockedTotal.add(wantAmt);\\n        IERC20(wantAddress).safeIncreaseAllowance(farmContractAddress, wantAmt);\\n\\n        if (isCAKEStaking) {\\n            IPancakeswapFarm(farmContractAddress).enterStaking(wantAmt);\\n        } else {\\n            IPancakeswapFarm(farmContractAddress).deposit(pid, wantAmt);\\n        }\\n    }\\n\\n    function _unfarm(uint256 _wantAmt) internal virtual {\\n        if (isCAKEStaking) {\\n            IPancakeswapFarm(farmContractAddress).leaveStaking(_wantAmt);\\n        } else {\\n            IPancakeswapFarm(farmContractAddress).withdraw(pid, _wantAmt);\\n        }\\n    }\\n\\n    function _collect() internal virtual {\\n        if (earnedAddress == wbnbAddress) {\\n            _wrapBNB();\\n        }\\n        uint256 earnedAmt = IERC20(earnedAddress).balanceOf(address(this));\\n\\n        if (earnedAmt > 0 && rewardsAddress != address(0)) {\\n            IERC20(earnedAddress).safeTransfer(rewardsAddress, earnedAmt);\\n        }\\n    }\\n\\n    function withdraw(uint256 _wantAmt)\\n        public\\n        virtual\\n        onlyMaster\\n        nonReentrant\\n        returns (uint256)\\n    {        \\n        require(_wantAmt > 0, \\\"_wantAmt <= 0\\\");\\n        uint256 sharesRemoved = _wantAmt.mul(sharesTotal).div(wantLockedTotal);\\n        require(sharesRemoved > 0, \\\"sharesRemoved <= 0\\\");\\n        if (sharesRemoved > sharesTotal) {\\n            sharesRemoved = sharesTotal;\\n        }\\n        sharesTotal = sharesTotal.sub(sharesRemoved);\\n\\n        if (withdrawFeeFactor < withdrawFeeFactorMax) {\\n            _wantAmt = _wantAmt.mul(withdrawFeeFactor).div(\\n                withdrawFeeFactorMax\\n            );\\n        }\\n\\n        if (isAutoComp) {\\n            _unfarm(_wantAmt);\\n        }\\n\\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\\n        if (_wantAmt > wantAmt) {\\n            _wantAmt = wantAmt;\\n        }\\n\\n        if (wantLockedTotal < _wantAmt) {\\n            _wantAmt = wantLockedTotal;\\n        }\\n\\n        wantLockedTotal = wantLockedTotal.sub(_wantAmt);\\n\\n        IERC20(wantAddress).safeTransfer(UPFarmAddress, _wantAmt);\\n\\n        if (isAutoComp && isCollect) {\\n            _collect();\\n        }\\n\\n        emit Withdraw(msg.sender,_wantAmt);\\n\\n        return sharesRemoved;\\n    }\\n\\n    function harvest() internal virtual {\\n        _unfarm(0);\\n    }\\n\\n    function earn() external virtual nonReentrant whenNotPaused {\\n        require(isAutoComp, \\\"!isAutoComp\\\");\\n        require(\\n            !onlyGov || core().isGovernor(msg.sender) || core().isGuardian(msg.sender),\\n            \\\"!gov\\\"\\n        );\\n\\n        harvest();\\n\\n        if (isCollect) {\\n            _collect();\\n            lastEarnBlock = block.number;\\n            return;\\n        }\\n\\n        if (earnedAddress == wbnbAddress) {\\n            _wrapBNB();\\n        }\\n\\n        uint256 earnedAmt = IERC20(earnedAddress).balanceOf(address(this));\\n\\n        earnedAmt = distributeFees(earnedAmt);\\n        earnedAmt = buyBack(earnedAmt);\\n\\n        if (isCAKEStaking || isSameAssetDeposit) {\\n            lastEarnBlock = block.number;\\n            _farm();\\n            return;\\n        }\\n\\n        if (token0Address == token1Address) {\\n            IERC20(earnedAddress).safeApprove(earnedToToken0Router0Address, 0);\\n            IERC20(earnedAddress).safeIncreaseAllowance(\\n                earnedToToken0Router0Address,\\n                earnedAmt\\n            );\\n            _safeSwapAuto(\\n                earnedToToken0Router0Address,\\n                earnedToToken0Router1Address,\\n                earnedAmt,\\n                slippageFactor,\\n                earnedToToken0Path0,\\n                earnedToToken0Path1,\\n                address(this),\\n                block.timestamp.add(600)\\n            );\\n        } else {\\n            if (earnedAddress != token0Address) {\\n                IERC20(earnedAddress).safeApprove(earnedToToken0Router0Address, 0);\\n                IERC20(earnedAddress).safeIncreaseAllowance(\\n                    earnedToToken0Router0Address,\\n                    earnedAmt.div(2)\\n                );\\n                _safeSwapAuto(\\n                    earnedToToken0Router0Address,\\n                    earnedToToken0Router1Address,\\n                    earnedAmt.div(2),\\n                    slippageFactor,\\n                    earnedToToken0Path0,\\n                    earnedToToken0Path1,\\n                    address(this),\\n                    block.timestamp.add(600)\\n                );\\n            }\\n\\n            if (earnedAddress != token1Address) {\\n                IERC20(earnedAddress).safeApprove(earnedToToken1Router0Address, 0);\\n                IERC20(earnedAddress).safeIncreaseAllowance(\\n                    earnedToToken1Router0Address,\\n                    earnedAmt.div(2)\\n                );\\n                _safeSwapAuto(\\n                    earnedToToken1Router0Address,\\n                    earnedToToken1Router1Address,\\n                    earnedAmt.div(2),\\n                    slippageFactor,\\n                    earnedToToken1Path0,\\n                    earnedToToken1Path1,\\n                    address(this),\\n                    block.timestamp.add(600)\\n                );\\n            }\\n\\n            uint256 token0Amt = IERC20(token0Address).balanceOf(address(this));\\n            uint256 token1Amt = IERC20(token1Address).balanceOf(address(this));\\n            if (token0Amt > 0 && token1Amt > 0) {\\n                IERC20(token0Address).safeIncreaseAllowance(\\n                    wantRouterAddress,\\n                    token0Amt\\n                );\\n                IERC20(token1Address).safeIncreaseAllowance(\\n                    wantRouterAddress,\\n                    token1Amt\\n                );\\n                IPancakeRouter02(wantRouterAddress).addLiquidity(\\n                    token0Address,\\n                    token1Address,\\n                    token0Amt,\\n                    token1Amt,\\n                    0,\\n                    0,\\n                    address(this),\\n                    block.timestamp.add(600)\\n                );\\n            }\\n        }\\n\\n        lastEarnBlock = block.number;\\n\\n        _farm();\\n    }\\n\\n    function buyBack(uint256 _earnedAmt) internal virtual returns (uint256) {\\n        if (buyBackRate <= 0) {\\n            return _earnedAmt;\\n        }\\n\\n        uint256 buyBackAmt = _earnedAmt.mul(buyBackRate).div(buyBackRateMax);\\n        uint256 burnAmt = buyBackAmt;\\n        if (earnedAddress != UPAddress) {\\n            IERC20(earnedAddress).safeApprove(buyBackRouter0Address, 0);\\n            IERC20(earnedAddress).safeIncreaseAllowance(\\n                buyBackRouter0Address,\\n                buyBackAmt\\n            );\\n            uint256 before = IERC20(UPAddress).balanceOf(address(this));\\n            _safeSwapAuto(\\n                buyBackRouter0Address,\\n                buyBackRouter1Address,\\n                buyBackAmt,\\n                slippageFactor,\\n                earnedToUpPath0,\\n                earnedToUpPath1,\\n                address(this),\\n                block.timestamp.add(600)\\n            );\\n            burnAmt = IERC20(UPAddress).balanceOf(address(this)).sub(before);\\n        }\\n\\n        IBurnable(UPAddress).burn(burnAmt);\\n\\n        return _earnedAmt.sub(buyBackAmt);\\n    }\\n\\n    function distributeFees(uint256 _earnedAmt)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        if (_earnedAmt > 0) {\\n            if (controllerFee > 0) {\\n                uint256 fee =\\n                    _earnedAmt.mul(controllerFee).div(controllerFeeMax);\\n                IERC20(earnedAddress).safeTransfer(rewardsAddress, fee);\\n                _earnedAmt = _earnedAmt.sub(fee);\\n            }\\n        }\\n\\n        return _earnedAmt;\\n    }\\n\\n    function setSettings(\\n        uint256 _entranceFeeFactor,\\n        uint256 _withdrawFeeFactor,\\n        uint256 _controllerFee,\\n        uint256 _buyBackRate,\\n        uint256 _slippageFactor\\n    ) external virtual onlyGovernor {\\n        require(\\n            _entranceFeeFactor >= entranceFeeFactorLL,\\n            \\\"_entranceFeeFactor too low\\\"\\n        );\\n        require(\\n            _entranceFeeFactor <= entranceFeeFactorMax,\\n            \\\"_entranceFeeFactor too high\\\"\\n        );\\n        entranceFeeFactor = _entranceFeeFactor;\\n\\n        require(\\n            _withdrawFeeFactor >= withdrawFeeFactorLL,\\n            \\\"_withdrawFeeFactor too low\\\"\\n        );\\n        require(\\n            _withdrawFeeFactor <= withdrawFeeFactorMax,\\n            \\\"_withdrawFeeFactor too high\\\"\\n        );\\n        withdrawFeeFactor = _withdrawFeeFactor;\\n\\n        require(_controllerFee <= controllerFeeUL, \\\"_controllerFee too high\\\");\\n        controllerFee = _controllerFee;\\n\\n        require(_buyBackRate <= buyBackRateUL, \\\"_buyBackRate too high\\\");\\n        buyBackRate = _buyBackRate;\\n\\n        require(\\n            _slippageFactor <= slippageFactorUL,\\n            \\\"_slippageFactor too high\\\"\\n        );\\n        slippageFactor = _slippageFactor;\\n\\n        emit SetSettings(\\n            _entranceFeeFactor,\\n            _withdrawFeeFactor,\\n            _controllerFee,\\n            _buyBackRate,\\n            _slippageFactor\\n        );\\n    }\\n\\n    function setRewardsAddress(address _rewardsAddress)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        rewardsAddress = _rewardsAddress;\\n        emit SetRewardsAddress(_rewardsAddress);\\n    }\\n\\n    function setCollect(bool _isCollect)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        isCollect = _isCollect;\\n        emit SetCollect(_isCollect);\\n    }\\n\\n    function setEarnedToUpPath(address[] memory _earnedToUpPath0, address[] memory _earnedToUpPath1)\\n        external\\n        onlyGovernor\\n    {\\n        require(\\n            _checkPath(_earnedToUpPath0, _earnedToUpPath1, earnedAddress, UPAddress),\\n            \\\"invalid _earnedToUpPath\\\"\\n        );\\n        earnedToUpPath0 = _earnedToUpPath0;\\n        earnedToUpPath1 = _earnedToUpPath1;\\n        emit SetEarnedToUpPath(_earnedToUpPath0, _earnedToUpPath1);\\n    }\\n\\n    function setEarnedToToken0Path(address[] memory _earnedToToken0Path0, address[] memory _earnedToToken0Path1)\\n        external\\n        onlyGovernor\\n    {\\n        require(\\n            _checkPath(_earnedToToken0Path0, _earnedToToken0Path1, earnedAddress, token0Address),\\n            \\\"invalid _earnedToToken0Path\\\"\\n        );\\n        earnedToToken0Path0 = _earnedToToken0Path0;\\n        earnedToToken0Path1 = _earnedToToken0Path1;\\n        emit SetEarnedToToken0Path(_earnedToToken0Path0, _earnedToToken0Path1);\\n    }\\n\\n    function setEarnedToToken1Path(address[] memory _earnedToToken1Path0, address[] memory _earnedToToken1Path1)\\n        external\\n        onlyGovernor\\n    {\\n        require(\\n            _checkPath(_earnedToToken1Path0, _earnedToToken1Path1, earnedAddress, token1Address),\\n            \\\"invalid _earnedToToken1Path\\\"\\n        );\\n        earnedToToken1Path0 = _earnedToToken1Path0;\\n        earnedToToken1Path1 = _earnedToToken1Path1;\\n        emit SetEarnedToToken1Path(_earnedToToken1Path0, _earnedToToken1Path1);\\n    }\\n\\n    function setEarnedToToken0RouterAddress(address _earnedToToken0Router0Address, address _earnedToToken0Router1Address)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        earnedToToken0Router0Address = _earnedToToken0Router0Address;\\n        earnedToToken0Router1Address = _earnedToToken0Router1Address;\\n        emit SetEarnedToToken0RouterAddress(_earnedToToken0Router0Address, _earnedToToken0Router1Address);\\n    }\\n\\n    function setEarnedToToken1RouterAddress(address _earnedToToken1Router0Address, address _earnedToToken1Router1Address)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        earnedToToken1Router0Address = _earnedToToken1Router0Address;\\n        earnedToToken1Router1Address = _earnedToToken1Router1Address;\\n        emit SetEarnedToToken1RouterAddress(_earnedToToken1Router0Address, _earnedToToken1Router1Address);\\n    }\\n\\n    function setWantRouterAddress(address _wantRouterAddress)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        wantRouterAddress = _wantRouterAddress;\\n        emit SetWantRouterAddress(_wantRouterAddress);\\n    }\\n\\n    function setBuyBackRouterAddress(address _buyBackRouter0Address, address _buyBackRouter1Address)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        buyBackRouter0Address = _buyBackRouter0Address;\\n        buyBackRouter1Address = _buyBackRouter1Address;\\n        emit SetBuyBackRouterAddress(_buyBackRouter0Address, _buyBackRouter1Address);\\n    }\\n\\n    function setOnlyGov(bool _onlyGov) external virtual onlyGovernor {\\n        onlyGov = _onlyGov;\\n        emit SetOnlyGov(_onlyGov);\\n    }\\n\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external virtual onlyGovernor {\\n        require(_token != earnedAddress, \\\"!safe\\\");\\n        require(_token != wantAddress, \\\"!safe\\\");\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function _wrapBNB() internal virtual {\\n        // BNB -> WBNB\\n        uint256 bnbBal = address(this).balance;\\n        if (bnbBal > 0) {\\n            IWBNB(wbnbAddress).deposit{value: bnbBal}(); // BNB -> WBNB\\n        }\\n    }\\n\\n    function wrapBNB() external virtual onlyGovernor {\\n        _wrapBNB();\\n    }\\n\\n    function _safeSwap(\\n        address _routerAddress,\\n        uint256 _amountIn,\\n        uint256 _slippageFactor,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline\\n    ) internal virtual {\\n        uint256[] memory amounts =\\n            IPancakeRouter02(_routerAddress).getAmountsOut(_amountIn, _path);\\n        uint256 amountOut = amounts[amounts.length.sub(1)];\\n\\n        IPancakeRouter02(_routerAddress)\\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            _amountIn,\\n            amountOut.mul(_slippageFactor).div(1000),\\n            _path,\\n            _to,\\n            _deadline\\n        );\\n    }\\n\\n    function _safeSwapCrossRouter(\\n        address _router0Address,\\n        address _router1Address,\\n        uint256 _amountIn,\\n        uint256 _slippageFactor,\\n        address[] memory _path0,\\n        address[] memory _path1,\\n        address _to,\\n        uint256 _deadline\\n    ) internal virtual {\\n        IERC20 midToken = IERC20(_path0[_path0.length - 1]);\\n        uint256 before = midToken.balanceOf(address(this));\\n        _safeSwap(\\n            _router0Address,\\n            _amountIn,\\n            _slippageFactor,\\n            _path0,\\n            address(this),\\n            _deadline\\n        );\\n        uint256 _amountMid = midToken.balanceOf(address(this)).sub(before);\\n        if (_amountMid > 0) {\\n            midToken.safeApprove(_router1Address, 0);\\n            midToken.safeIncreaseAllowance(\\n                _router1Address,\\n                _amountMid\\n            );\\n            _safeSwap(\\n                _router1Address,\\n                _amountMid,\\n                _slippageFactor,\\n                _path1,\\n                _to,\\n                _deadline\\n            );\\n        }\\n    }\\n\\n    function _safeSwapAuto(\\n        address _router0Address,\\n        address _router1Address,\\n        uint256 _amountIn,\\n        uint256 _slippageFactor,\\n        address[] memory _path0,\\n        address[] memory _path1,\\n        address _to,\\n        uint256 _deadline\\n    ) internal virtual {\\n        if (_router1Address == address(0)) {\\n            _safeSwap(\\n                _router0Address,\\n                _amountIn,\\n                _slippageFactor,\\n                _path0,\\n                _to,\\n                _deadline\\n            );\\n        } else {\\n            _safeSwapCrossRouter(\\n                _router0Address,\\n                _router1Address,\\n                _amountIn,\\n                _slippageFactor,\\n                _path0,\\n                _path1,\\n                _to,\\n                _deadline\\n            );\\n        }\\n    }\\n\\n    function _checkPath(address[] memory path0, address[] memory path1, address from, address to) internal virtual returns (bool) {\\n        uint len0 = path0.length;\\n        uint len1 = path1.length;\\n        if (isCollect || from == to) {\\n            return len0 == 0 && len1 == 0;\\n        }\\n        return len0 >= 2 &&\\n            path0[0] == from &&\\n            (\\n                (len1 == 0 && path0[len0 - 1] == to) ||\\n                (len1 >= 2 && path0[len0 - 1] == path1[0] && path1[len1 - 1] == to)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x919cd9acc0da223edb8177ea5562dded9eca160944afbdcd66ffad6ac9467c0b\",\"license\":\"MIT\"},\"contracts/StrategyPCS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./Strategy.sol\\\";\\n\\ncontract StrategyPCS is Strategy {\\n    constructor(\\n        address[] memory _addresses,\\n        uint256 _pid,\\n        address _cakeAddress,\\n        bool _isAutoComp,\\n        bool _isCollect,\\n        address[] memory _earnedToUpPath0,\\n        address[] memory _earnedToUpPath1,\\n        address[] memory _earnedToToken0Path,\\n        address[] memory _earnedToToken1Path,\\n        uint256 _controllerFee,\\n        uint256 _buyBackRate,\\n        uint256 _entranceFeeFactor,\\n        uint256 _withdrawFeeFactor\\n    ) public CoreRef(_addresses[0]) {\\n        wbnbAddress = _addresses[1];\\n        UPFarmAddress = _addresses[2];\\n        UPAddress = _addresses[3];\\n        wantAddress = _addresses[4];\\n        token0Address = _addresses[5];\\n        token1Address = _addresses[6];\\n        earnedAddress = _addresses[7];\\n        farmContractAddress = _addresses[8];\\n        rewardsAddress = _addresses[9];\\n        earnedToToken0Router0Address = _addresses[10];\\n        earnedToToken1Router0Address = _addresses[11];\\n        wantRouterAddress = _addresses[12];\\n        buyBackRouter0Address = _addresses[13];\\n        buyBackRouter1Address = _addresses[14];\\n\\n        pid = _pid;\\n        isCAKEStaking = wantAddress == _cakeAddress;\\n        isSameAssetDeposit = wantAddress == earnedAddress;\\n        isAutoComp = _isAutoComp;\\n        isCollect = _isCollect;\\n\\n        require(\\n            _checkPath(_earnedToUpPath0, _earnedToUpPath1, earnedAddress, UPAddress),\\n            \\\"invalid _earnedToUpPath\\\"\\n        );\\n        earnedToUpPath0 = _earnedToUpPath0;\\n        earnedToUpPath1 = _earnedToUpPath1;\\n\\n        address[] memory empty = new address[](0);\\n\\n        require(\\n            _checkPath(_earnedToToken0Path, empty, earnedAddress, token0Address),\\n            \\\"invalid _earnedToToken0Path\\\"\\n        );\\n        earnedToToken0Path0 = _earnedToToken0Path;\\n\\n        require(\\n            _checkPath(_earnedToToken1Path, empty, earnedAddress, token1Address),\\n            \\\"invalid _earnedToToken1Path\\\"\\n        );\\n        earnedToToken1Path0 = _earnedToToken1Path;\\n\\n        require(_buyBackRate <= buyBackRateUL, \\\"invalid buybackRate\\\");\\n        require(_controllerFee <= controllerFeeUL, \\\"invalid controllerFee\\\");\\n        require(_entranceFeeFactor >= entranceFeeFactorLL && _entranceFeeFactor <= entranceFeeFactorMax, \\\"invalid entranceFee\\\");\\n        require(_withdrawFeeFactor >= withdrawFeeFactorLL && _withdrawFeeFactor <= withdrawFeeFactorMax, \\\"invalid withdrawFee\\\");\\n        controllerFee = _controllerFee;\\n        buyBackRate = _buyBackRate;\\n        entranceFeeFactor = _entranceFeeFactor;\\n        withdrawFeeFactor = _withdrawFeeFactor;\\n    }\\n}\\n\",\"keccak256\":\"0x469ab83a8a45a0513bbf52b7ac1cf2682fbb6141c495206a89f538d06b327bc4\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\",\"keccak256\":\"0xb1fe7d8ff816e984f63300b0631623fc83a8aa4d1ee0c90fb0e444eb91a5254c\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"./IPancakeRouter01.sol\\\";\\n\\npragma solidity 0.6.12;\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\",\"keccak256\":\"0x45ef77d49d58722fda84df3d21e2b1277324597787763eee24b2cd269375f8ec\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeswapFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\ninterface IPancakeswapFarm {\\n    function poolLength() external view returns (uint256);\\n\\n    function userInfo() external view returns (uint256);\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // View function to see pending CAKEs on frontend.\\n    function pendingCake(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Deposit LP tokens to MasterChef for CAKE allocation.\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    // Stake CAKE tokens to MasterChef\\n    function enterStaking(uint256 _amount) external;\\n\\n    // Withdraw CAKE tokens from STAKING.\\n    function leaveStaking(uint256 _amount) external;\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\",\"keccak256\":\"0x002c818cec64fca97983f186029b194ef20432494ae82dac1d0b3b3589f6c9c4\",\"license\":\"MIT\"},\"contracts/interfaces/IWBNB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\npragma solidity ^0.6.12;\\ninterface IWBNB is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\",\"keccak256\":\"0xb84fb3a2d9ab809e87a597b70197842a5c0dffb5d4547086f69a3cb2be0335a8\",\"license\":\"MIT\"},\"contracts/refs/CoreRef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ninterface ICore {\\n    function isGovernor(address _address) external view returns (bool);\\n\\n    function isGuardian(address _address) external view returns (bool);\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\\n\\nabstract contract CoreRef is Pausable {\\n\\n    event CoreUpdate(address indexed _core);\\n\\n    ICore private _core;\\n\\n    bytes32 public constant MASTER_ROLE = keccak256(\\\"MASTER_ROLE\\\");\\n\\n    constructor(address core_) public {\\n        _core = ICore(core_);\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender),\\n            \\\"CoreRef::onlyGovernor: Caller is not a governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(\\n            _core.isGuardian(msg.sender),\\n            \\\"CoreRef::onlyGuardian: Caller is not a guardian\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardianOrGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender),\\n            \\\"CoreRef::onlyGuardianOrGovernor: Caller is not a guardian or governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMaster() {\\n        require(\\n            _core.hasRole(MASTER_ROLE, msg.sender),\\n            \\\"CoreRef::onlyMaster: Caller is not a master\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        require(\\n            _core.hasRole(role, msg.sender),\\n            \\\"CoreRef::onlyRole: Not permit\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        require(\\n            _core.hasRole(role, address(0)) || _core.hasRole(role, msg.sender),\\n            \\\"CoreRef::onlyRoleOrOpenRole: Not permit\\\"\\n        );\\n        _;\\n    }\\n\\n    function setCore(address core_) external onlyGovernor {\\n        _core = ICore(core_);\\n        emit CoreUpdate(core_);\\n    }\\n\\n    function pause() public onlyGuardianOrGovernor {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyGovernor {\\n        _unpause();\\n    }\\n\\n    function core() public view returns (ICore) {\\n        return _core;\\n    }\\n\\n}\",\"keccak256\":\"0x347c55d9c381f639b545aca006912b67dde6c675080086b7cd33dc205ebcc3d5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104565760003560e01c8063846d9e1711610250578063bece4d7d11610150578063db22e43a116100c8578063e7a0367911610097578063f10684541161007c578063f106845414610bd9578063f2f4eb2614610be1578063ffbd3b1f14610be957610456565b8063e7a0367914610bd1578063ee50dc341461056057610456565b8063db22e43a14610bb1578063dc22486314610bb9578063e5dd455a14610bc1578063e719847414610bc957610456565b8063cdf209891161011f578063d389800f11610104578063d389800f14610b99578063d5b0916314610ba1578063d7cb416f14610ba957610456565b8063cdf2098914610a6a578063d1a94edc14610a7257610456565b8063bece4d7d14610a2c578063c0973eed14610a34578063c302a4d01461083f578063c6bb8e3614610a3c57610456565b8063a17f3d81116101e3578063b0fb2ce4116101b2578063b6b55f2511610197578063b6b55f25146109ff578063b74cd24214610a1c578063b83b54ca14610a2457610456565b8063b0fb2ce4146109e2578063b3545c01146104af57610456565b8063a17f3d81146108ab578063a1a47d7114610560578063a3d2855e146108b3578063aba68763146109da57610456565b80638906758d1161021f5780638906758d146108475780638a3e97051461086d5780639a2466431461089b5780639fc33a9f146108a357610456565b8063846d9e17146107fa57806384fa32ac1461080257806385f02dd614610837578063866b20181461083f57610456565b806336e9332d1161035b57806363fe3e3a116102ee5780636e965b51116102bd57806380009630116102a257806380009630146107af5780638219425d146107d55780638456cb59146107f257610456565b80636e965b511461078a5780637ff36fbe146107a757610456565b806363fe3e3a1461074457806367057b6c1461056057806367206d401461074c57806368f541621461078257610456565b806344a3955e1161032a57806344a3955e1461070e5780634d9f7bb2146105605780635c975abb146107165780635d5ae2841461071e57610456565b806336e9332d146106ee578063380eec2f146106f65780633f4ba83a146106fe57806342da4eb31461070657610456565b8063178a8d07116103ee5780632e1a7d4d116103bd57806330d15c65116103a257806330d15c65146105a257806330e0045e146106c957806335c7f121146106e657610456565b80632e1a7d4d146105685780632fce1cab1461058557610456565b8063178a8d071461053357806324893bd71461053b57806326a1ccad146105435780632717eff31461056057610456565b80630daef3211161042a5780630daef321146104e85780630dbccf0f146105045780630fa4e01e146105235780631334903f1461052b57610456565b80625e8e6b1461045b578063061bf6431461047f578063061c7d48146104af5780630b6bb30b146104c9575b600080fd5b610463610bf1565b604080516001600160a01b039092168252519081900360200190f35b6104ad6004803603604081101561049557600080fd5b506001600160a01b0381358116916020013516610c00565b005b6104b7610d3d565b60408051918252519081900360200190f35b6104ad600480360360208110156104df57600080fd5b50351515610d43565b6104f0610e68565b604080519115158252519081900360200190f35b6104ad6004803603602081101561051a57600080fd5b50351515610e79565b6104b7610f9d565b6104b7610fa3565b6104b7610fa9565b610463610faf565b6104636004803603602081101561055957600080fd5b5035610fbe565b6104b7610fe5565b6104b76004803603602081101561057e57600080fd5b5035610feb565b6104636004803603602081101561059b57600080fd5b50356113c0565b6104ad600480360360408110156105b857600080fd5b8101906020810181356401000000008111156105d357600080fd5b8201836020820111156105e557600080fd5b8035906020019184602083028401116401000000008311171561060757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561065757600080fd5b82018360208201111561066957600080fd5b8035906020019184602083028401116401000000008311171561068b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506113cd945050505050565b610463600480360360208110156106df57600080fd5b50356115db565b6104636115e8565b6104ad6115f7565b610463611662565b6104ad611671565b6104b7611731565b6104b7611737565b6104f061173d565b6104ad6004803603602081101561073457600080fd5b50356001600160a01b0316611746565b610463611868565b6104ad6004803603606081101561076257600080fd5b506001600160a01b03813581169160208101359160409091013516611877565b6104b7611a0c565b610463600480360360208110156107a057600080fd5b5035611a12565b610463611a1f565b6104ad600480360360208110156107c557600080fd5b50356001600160a01b0316611a2e565b610463600480360360208110156107eb57600080fd5b5035611b4b565b6104ad611b58565b6104f0611cb1565b6104ad600480360360a081101561081857600080fd5b5080359060208101359060408101359060608101359060800135611cba565b6104b761203f565b6104b7612045565b6104ad6004803603602081101561085d57600080fd5b50356001600160a01b031661204b565b6104ad6004803603604081101561088357600080fd5b506001600160a01b038135811691602001351661216d565b6104f06122aa565b6104636122b8565b6104636122d0565b6104ad600480360360408110156108c957600080fd5b8101906020810181356401000000008111156108e457600080fd5b8201836020820111156108f657600080fd5b8035906020019184602083028401116401000000008311171561091857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561096857600080fd5b82018360208201111561097a57600080fd5b8035906020019184602083028401116401000000008311171561099c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506122df945050505050565b610463612493565b610463600480360360208110156109f857600080fd5b50356124a2565b6104b760048036036020811015610a1557600080fd5b50356124af565b6104b7612912565b610463612918565b610463612927565b610463612936565b6104ad60048036036040811015610a5257600080fd5b506001600160a01b0381358116916020013516612945565b610463612a82565b6104ad60048036036040811015610a8857600080fd5b810190602081018135640100000000811115610aa357600080fd5b820183602082011115610ab557600080fd5b80359060200191846020830284011164010000000083111715610ad757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050640100000000811115610b2757600080fd5b820183602082011115610b3957600080fd5b80359060200191846020830284011164010000000083111715610b5b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612a91945050505050565b6104ad612c46565b6104ad613633565b6104636136f1565b6104f0613700565b6104b7613710565b6104f0613734565b610463613743565b610463613752565b6104b7613761565b610463613767565b6104b761377b565b601a546001600160a01b031681565b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b158015610c4f57600080fd5b505afa158015610c63573d6000803e3d6000fd5b505050506040513d6020811015610c7957600080fd5b5051610cb65760405162461bcd60e51b815260040180806020018281038252602f815260200180614f2b602f913960400191505060405180910390fd5b601980546001600160a01b038085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283168117909355601a805491851691909216811790915560408051928352602083019190915280517f071b73faa021635fad0a92808ae9c59c365befd74127681dfdf2123f3e71553e9281900390910190a15050565b6126ac81565b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b158015610d9257600080fd5b505afa158015610da6573d6000803e3d6000fd5b505050506040513d6020811015610dbc57600080fd5b5051610df95760405162461bcd60e51b815260040180806020018281038252602f815260200180614f2b602f913960400191505060405180910390fd5b6002805482151564010000000081027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff9092169190911790915560408051918252517f125177ac7b8930dac1e59c2b30b1b6b9191b30af40cf6bbb5d20fec4d44be60f9181900360200190a150565b600254640100000000900460ff1681565b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b158015610ec857600080fd5b505afa158015610edc573d6000803e3d6000fd5b505050506040513d6020811015610ef257600080fd5b5051610f2f5760405162461bcd60e51b815260040180806020018281038252602f815260200180614f2b602f913960400191505060405180910390fd5b60028054821515630100000081027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff9092169190911790915560408051918252517f11eebf9ecfc205a1581472f52a6942317b4b052652b7d159c5a991b1caf9553f9181900360200190a150565b600b5481565b60115481565b600f5481565b6019546001600160a01b031681565b601b8181548110610fcb57fe5b6000918252602090912001546001600160a01b0316905081565b61271081565b60008054604080517f91d148540000000000000000000000000000000000000000000000000000000081527f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c600482015233602482015290516101009092046001600160a01b0316916391d1485491604480820192602092909190829003018186803b15801561107a57600080fd5b505afa15801561108e573d6000803e3d6000fd5b505050506040513d60208110156110a457600080fd5b50516110e15760405162461bcd60e51b815260040180806020018281038252602b815260200180614f00602b913960400191505060405180910390fd5b60026001541415611139576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260015581611190576040805162461bcd60e51b815260206004820152600d60248201527f5f77616e74416d74203c3d203000000000000000000000000000000000000000604482015290519081900360640190fd5b60006111b3600c546111ad600d548661378190919063ffffffff16565b906137e3565b90506000811161120a576040805162461bcd60e51b815260206004820152601260248201527f73686172657352656d6f766564203c3d20300000000000000000000000000000604482015290519081900360640190fd5b600d548111156112195750600d545b600d54611226908261384a565b600d556012546127101115611253576112506127106111ad6012548661378190919063ffffffff16565b92505b60025462010000900460ff161561126d5761126d836138a7565b60048054604080517f70a082310000000000000000000000000000000000000000000000000000000081523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b1580156112d557600080fd5b505afa1580156112e9573d6000803e3d6000fd5b505050506040513d60208110156112ff57600080fd5b505190508084111561130f578093505b83600c54101561131f57600c5493505b600c5461132c908561384a565b600c5560095460045461134c916001600160a01b039182169116866139ab565b60025462010000900460ff16801561136d57506002546301000000900460ff165b1561137a5761137a613a2b565b604080513381526020810186905281517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364929181900390910190a1506001805592915050565b601f8181548110610fcb57fe5b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b15801561141c57600080fd5b505afa158015611430573d6000803e3d6000fd5b505050506040513d602081101561144657600080fd5b50516114835760405162461bcd60e51b815260040180806020018281038252602f815260200180614f2b602f913960400191505060405180910390fd5b600754600a546114a391849184916001600160a01b039081169116613b19565b6114f4576040805162461bcd60e51b815260206004820152601760248201527f696e76616c6964205f6561726e6564546f557050617468000000000000000000604482015290519081900360640190fd5b815161150790601b906020850190614e4b565b50805161151b90601c906020840190614e4b565b507fe96d7b34c373d3a3ec2babcc077062bf437a26d39643ab5fd97764cc54a4212f8282604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561158357818101518382015260200161156b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156115c25781810151838201526020016115aa565b5050505090500194505050505060405180910390a15050565b601c8181548110610fcb57fe5b6009546001600160a01b031681565b6002600154141561164f576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260015561165c613c69565b60018055565b600a546001600160a01b031681565b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b1580156116c057600080fd5b505afa1580156116d4573d6000803e3d6000fd5b505050506040513d60208110156116ea57600080fd5b50516117275760405162461bcd60e51b815260040180806020018281038252602f815260200180614f2b602f913960400191505060405180910390fd5b61172f613e5f565b565b600c5481565b600d5481565b60005460ff1690565b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b15801561179557600080fd5b505afa1580156117a9573d6000803e3d6000fd5b505050506040513d60208110156117bf57600080fd5b50516117fc5760405162461bcd60e51b815260040180806020018281038252602f815260200180614f2b602f913960400191505060405180910390fd5b601880546001600160a01b0383167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051918252517f42d7ec3cae52221425bb6589ab144941ed3874dda5bcb98099ddc59ff3e50c9d9181900360200190a150565b6008546001600160a01b031681565b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b1580156118c657600080fd5b505afa1580156118da573d6000803e3d6000fd5b505050506040513d60208110156118f057600080fd5b505161192d5760405162461bcd60e51b815260040180806020018281038252602f815260200180614f2b602f913960400191505060405180910390fd5b6007546001600160a01b0384811691161415611990576040805162461bcd60e51b815260206004820152600560248201527f2173616665000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6004546001600160a01b03848116911614156119f3576040805162461bcd60e51b815260206004820152600560248201527f2173616665000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611a076001600160a01b03841682846139ab565b505050565b60125481565b601e8181548110610fcb57fe5b6005546001600160a01b031681565b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b158015611a7d57600080fd5b505afa158015611a91573d6000803e3d6000fd5b505050506040513d6020811015611aa757600080fd5b5051611ae45760405162461bcd60e51b815260040180806020018281038252602f815260200180614f2b602f913960400191505060405180910390fd5b600080547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03841690810291909117825560405190917fad9400e618eb1344fde53db22397a1b82c765527ecbba3a5c86bcac15090828b91a250565b60208181548110610fcb57fe5b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b158015611ba757600080fd5b505afa158015611bbb573d6000803e3d6000fd5b505050506040513d6020811015611bd157600080fd5b505180611c6e5750600054604080517f0c68ba2100000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b031691630c68ba2191602480820192602092909190829003018186803b158015611c4157600080fd5b505afa158015611c55573d6000803e3d6000fd5b505050506040513d6020811015611c6b57600080fd5b50515b611ca95760405162461bcd60e51b8152600401808060200182810382526045815260200180614fc76045913960600191505060405180910390fd5b61172f613f26565b60025460ff1681565b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b158015611d0957600080fd5b505afa158015611d1d573d6000803e3d6000fd5b505050506040513d6020811015611d3357600080fd5b5051611d705760405162461bcd60e51b815260040180806020018281038252602f815260200180614f2b602f913960400191505060405180910390fd5b612328851015611dc7576040805162461bcd60e51b815260206004820152601a60248201527f5f656e7472616e6365466565466163746f7220746f6f206c6f77000000000000604482015290519081900360640190fd5b612710851115611e1e576040805162461bcd60e51b815260206004820152601b60248201527f5f656e7472616e6365466565466163746f7220746f6f20686967680000000000604482015290519081900360640190fd5b6011859055612328841015611e7a576040805162461bcd60e51b815260206004820152601a60248201527f5f7769746864726177466565466163746f7220746f6f206c6f77000000000000604482015290519081900360640190fd5b612710841115611ed1576040805162461bcd60e51b815260206004820152601b60248201527f5f7769746864726177466565466163746f7220746f6f20686967680000000000604482015290519081900360640190fd5b60128490556126ac831115611f2d576040805162461bcd60e51b815260206004820152601760248201527f5f636f6e74726f6c6c657246656520746f6f2068696768000000000000000000604482015290519081900360640190fd5b600e8390556126ac821115611f89576040805162461bcd60e51b815260206004820152601560248201527f5f6275794261636b5261746520746f6f20686967680000000000000000000000604482015290519081900360640190fd5b600f8290556103e7811115611fe5576040805162461bcd60e51b815260206004820152601860248201527f5f736c697070616765466163746f7220746f6f20686967680000000000000000604482015290519081900360640190fd5b60138190556040805186815260208101869052808201859052606081018490526080810183905290517fc67e0b149a57a70fa44a531a46c2c6d8e0b242fa12f459f250012c3a5987d29a9181900360a00190a15050505050565b600e5481565b61232881565b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b15801561209a57600080fd5b505afa1580156120ae573d6000803e3d6000fd5b505050506040513d60208110156120c457600080fd5b50516121015760405162461bcd60e51b815260040180806020018281038252602f815260200180614f2b602f913960400191505060405180910390fd5b601080546001600160a01b0383167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051918252517fa69f1931be99336e049905baa11d21ed44204d7686e46b4344404d80d47c29889181900360200190a150565b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b1580156121bc57600080fd5b505afa1580156121d0573d6000803e3d6000fd5b505050506040513d60208110156121e657600080fd5b50516122235760405162461bcd60e51b815260040180806020018281038252602f815260200180614f2b602f913960400191505060405180910390fd5b601680546001600160a01b038085167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093556017805491851691909216811790915560408051928352602083019190915280517f0b862f0e5cb2c8acd447c3c04b7637f5ac576983fd7ecf72fe3529636483cf309281900390910190a15050565b600254610100900460ff1681565b6002546501000000000090046001600160a01b031681565b6016546001600160a01b031681565b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b15801561232e57600080fd5b505afa158015612342573d6000803e3d6000fd5b505050506040513d602081101561235857600080fd5b50516123955760405162461bcd60e51b815260040180806020018281038252602f815260200180614f2b602f913960400191505060405180910390fd5b6007546006546123b591849184916001600160a01b039081169116613b19565b612406576040805162461bcd60e51b815260206004820152601b60248201527f696e76616c6964205f6561726e6564546f546f6b656e31506174680000000000604482015290519081900360640190fd5b815161241990601f906020850190614e4b565b50805161242c9060209081840190614e4b565b507f903fe96a5723b5e127a99e44f9675f8c21700bc9230aefd5e2936506417029c98282604051808060200180602001838103835285818151815260200191508051906020019060200280838360008381101561158357818101518382015260200161156b565b6017546001600160a01b031681565b601d8181548110610fcb57fe5b60008054604080517f91d148540000000000000000000000000000000000000000000000000000000081527f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c600482015233602482015290516101009092046001600160a01b0316916391d1485491604480820192602092909190829003018186803b15801561253e57600080fd5b505afa158015612552573d6000803e3d6000fd5b505050506040513d602081101561256857600080fd5b50516125a55760405162461bcd60e51b815260040180806020018281038252602b815260200180614f00602b913960400191505060405180910390fd5b600260015414156125fd576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260015561260a61173d565b1561265c576040805162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b600d541580158061266e575061271083115b6126a95760405162461bcd60e51b8152600401808060200182810382526026815260200180614f5a6026913960400191505060405180910390fd5b60048054604080517f70a082310000000000000000000000000000000000000000000000000000000081523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b15801561271157600080fd5b505afa158015612725573d6000803e3d6000fd5b505050506040513d602081101561273b57600080fd5b5051600454909150612758906001600160a01b0316333087613fd4565b60048054604080517f70a082310000000000000000000000000000000000000000000000000000000081523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b1580156127c057600080fd5b505afa1580156127d4573d6000803e3d6000fd5b505050506040513d60208110156127ea57600080fd5b5051905060006127fa828461384a565b600c5490915081901580159061281257506000600d54115b15612847576128446127106111ad600c546111ad60115461283e600d548961378190919063ffffffff16565b90613781565b90505b600d546128549082614062565b600d5560025462010000900460ff161561287557612870613c69565b612886565b600c546128829083614062565b600c555b841561289b576128988161271061384a565b90505b60025462010000900460ff1680156128bc57506002546301000000900460ff165b156128c9576128c9613a2b565b604080513381526020810184905281517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c929181900390910190a1600180559695505050505050565b6103e781565b6015546001600160a01b031681565b6014546001600160a01b031681565b6010546001600160a01b031681565b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b15801561299457600080fd5b505afa1580156129a8573d6000803e3d6000fd5b505050506040513d60208110156129be57600080fd5b50516129fb5760405162461bcd60e51b815260040180806020018281038252602f815260200180614f2b602f913960400191505060405180910390fd5b601480546001600160a01b038085167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093556015805491851691909216811790915560408051928352602083019190915280517f5bc08486dd6c0ecfe4a1bed664ce71864f8a67d5eb593593c5baf1049c7a7aa29281900390910190a15050565b6018546001600160a01b031681565b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b158015612ae057600080fd5b505afa158015612af4573d6000803e3d6000fd5b505050506040513d6020811015612b0a57600080fd5b5051612b475760405162461bcd60e51b815260040180806020018281038252602f815260200180614f2b602f913960400191505060405180910390fd5b600754600554612b6791849184916001600160a01b039081169116613b19565b612bb8576040805162461bcd60e51b815260206004820152601b60248201527f696e76616c6964205f6561726e6564546f546f6b656e30506174680000000000604482015290519081900360640190fd5b8151612bcb90601d906020850190614e4b565b508051612bdf90601e906020840190614e4b565b507f5e791c36fb57fdae3adf1327b54fb3cf83c09aaafa093790a99dbb1be6ac16728282604051808060200180602001838103835285818151815260200191508051906020019060200280838360008381101561158357818101518382015260200161156b565b60026001541415612c9e576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155612cab61173d565b15612cfd576040805162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b60025462010000900460ff16612d5a576040805162461bcd60e51b815260206004820152600b60248201527f2169734175746f436f6d70000000000000000000000000000000000000000000604482015290519081900360640190fd5b600254640100000000900460ff161580612df05750612d77613767565b6001600160a01b031663e43581b8336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612dc357600080fd5b505afa158015612dd7573d6000803e3d6000fd5b505050506040513d6020811015612ded57600080fd5b50515b80612e775750612dfe613767565b6001600160a01b0316630c68ba21336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612e4a57600080fd5b505afa158015612e5e573d6000803e3d6000fd5b505050506040513d6020811015612e7457600080fd5b50515b612eca576040805162461bcd60e51b8152602060048083019190915260248201527f21676f7600000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b612ed26140bc565b6002546301000000900460ff1615612ef557612eec613a2b565b43600b5561165c565b6008546007546001600160a01b0390811691161415612f1657612f166140c6565b600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612f7a57600080fd5b505afa158015612f8e573d6000803e3d6000fd5b505050506040513d6020811015612fa457600080fd5b50519050612fb181614139565b9050612fbc8161419c565b60025490915060ff1680612fd75750600254610100900460ff165b15612fee5743600b55612fe8613c69565b5061165c565b6006546005546001600160a01b039081169116141561313657601454600754613025916001600160a01b03918216911660006144cf565b601454600754613042916001600160a01b03918216911683614629565b601454601554601354601d805460408051602080840282018101909252828152613131966001600160a01b039081169616948894909391929091908301828280156130b657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613098575b5050505050601e80548060200260200160405190810160405280929190818152602001828054801561311157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116130f3575b50505050503061312c6102584261406290919063ffffffff16565b614742565b613620565b6005546007546001600160a01b039081169116146132875760145460075461316c916001600160a01b03918216911660006144cf565b60145461319a906001600160a01b03166131878360026137e3565b6007546001600160a01b03169190614629565b601454601554613287916001600160a01b0390811691166131bc8460026137e3565b601354601d8054806020026020016040519081016040528092919081815260200182805480156130b6576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311613098575050505050601e805480602002602001604051908101604052809291908181526020018280548015613111576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116130f35750505050503061312c6102584261406290919063ffffffff16565b6006546007546001600160a01b039081169116146133c7576016546007546132bd916001600160a01b03918216911660006144cf565b6016546132d8906001600160a01b03166131878360026137e3565b6016546017546133c7916001600160a01b0390811691166132fa8460026137e3565b601354601f80548060200260200160405190810160405280929190818152602001828054801561335357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613335575b50505050506020805480602002602001604051908101604052809291908181526020018280548015613111576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116130f35750505050503061312c6102584261406290919063ffffffff16565b600554604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561342b57600080fd5b505afa15801561343f573d6000803e3d6000fd5b505050506040513d602081101561345557600080fd5b5051600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156134c157600080fd5b505afa1580156134d5573d6000803e3d6000fd5b505050506040513d60208110156134eb57600080fd5b5051905081158015906134fe5750600081115b1561361d57601854600554613520916001600160a01b03918216911684614629565b60185460065461353d916001600160a01b03918216911683614629565b6018546005546006546001600160a01b039283169263e8e33700928116911685856000803061356e42610258614062565b6040518963ffffffff1660e01b815260040180896001600160a01b03168152602001886001600160a01b03168152602001878152602001868152602001858152602001848152602001836001600160a01b0316815260200182815260200198505050505050505050606060405180830381600087803b1580156135f057600080fd5b505af1158015613604573d6000803e3d6000fd5b505050506040513d606081101561361a57600080fd5b50505b50505b43600b5561362c613c69565b5060018055565b60005460408051631c86b03760e31b815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b15801561368257600080fd5b505afa158015613696573d6000803e3d6000fd5b505050506040513d60208110156136ac57600080fd5b50516136e95760405162461bcd60e51b815260040180806020018281038252602f815260200180614f2b602f913960400191505060405180910390fd5b61172f6140c6565b6006546001600160a01b031681565b6002546301000000900460ff1681565b7f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c81565b60025462010000900460ff1681565b6007546001600160a01b031681565b6004546001600160a01b031681565b60035481565b60005461010090046001600160a01b031690565b60135481565b600082613790575060006137dd565b8282028284828161379d57fe5b04146137da5760405162461bcd60e51b8152600401808060200182810382526021815260200180614fa66021913960400191505060405180910390fd5b90505b92915050565b6000808211613839576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161384257fe5b049392505050565b6000828211156138a1576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60025460ff161561392a57600260059054906101000a90046001600160a01b03166001600160a01b0316631058d281826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561390d57600080fd5b505af1158015613921573d6000803e3d6000fd5b505050506139a8565b600260059054906101000a90046001600160a01b03166001600160a01b031663441a3e70600354836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561398f57600080fd5b505af11580156139a3573d6000803e3d6000fd5b505050505b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611a0790849061477d565b6008546007546001600160a01b0390811691161415613a4c57613a4c6140c6565b600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015613ab057600080fd5b505afa158015613ac4573d6000803e3d6000fd5b505050506040513d6020811015613ada57600080fd5b505190508015801590613af757506010546001600160a01b031615155b156139a8576010546007546139a8916001600160a01b039182169116836139ab565b8351835160025460009291906301000000900460ff1680613b4b5750836001600160a01b0316856001600160a01b0316145b15613b655781158015613b5c575080155b92505050613c61565b60028210158015613b9b5750846001600160a01b031687600081518110613b8857fe5b60200260200101516001600160a01b0316145b8015613c5c575080158015613bd75750836001600160a01b0316876001840381518110613bc457fe5b60200260200101516001600160a01b0316145b80613c5c575060028110158015613c29575085600081518110613bf657fe5b60200260200101516001600160a01b0316876001840381518110613c1657fe5b60200260200101516001600160a01b0316145b8015613c5c5750836001600160a01b0316866001830381518110613c4957fe5b60200260200101516001600160a01b0316145b925050505b949350505050565b60025462010000900460ff16613cc6576040805162461bcd60e51b815260206004820152600b60248201527f2169734175746f436f6d70000000000000000000000000000000000000000000604482015290519081900360640190fd5b60048054604080517f70a082310000000000000000000000000000000000000000000000000000000081523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015613d2e57600080fd5b505afa158015613d42573d6000803e3d6000fd5b505050506040513d6020811015613d5857600080fd5b5051600c54909150613d6a9082614062565b600c55600254600454613d94916001600160a01b0391821691650100000000009091041683614629565b60025460ff1615613dfa57600260059054906101000a90046001600160a01b03166001600160a01b03166341441d3b826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561390d57600080fd5b600260059054906101000a90046001600160a01b03166001600160a01b031663e2bbb158600354836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561398f57600080fd5b613e6761173d565b613eb8576040805162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa613f0961482e565b604080516001600160a01b039092168252519081900360200190a1565b613f2e61173d565b15613f80576040805162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613f0961482e565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261405c90859061477d565b50505050565b6000828201838110156137da576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b61172f60006138a7565b4780156139a857600860009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561411d57600080fd5b505af1158015614131573d6000803e3d6000fd5b505050505050565b6000811561419457600e54156141945760006141666127106111ad600e548661378190919063ffffffff16565b601054600754919250614186916001600160a01b039081169116836139ab565b614190838261384a565b9250505b50805b919050565b600080600f54116141ae575080614197565b60006141cb6127106111ad600f548661378190919063ffffffff16565b600a5460075491925082916001600160a01b0390811691161461443e57601954600754614206916001600160a01b03918216911660006144cf565b601954600754614223916001600160a01b03918216911684614629565b600a54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561428757600080fd5b505afa15801561429b573d6000803e3d6000fd5b505050506040513d60208110156142b157600080fd5b5051601954601a54601354601b80546040805160208084028201810190925282815296975061439e966001600160a01b0396871696909516948a94939092909183018282801561432a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161430c575b5050505050601c805480602002602001604051908101604052809291908181526020018280548015613111576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116130f35750505050503061312c6102584261406290919063ffffffff16565b600a54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905161443a9284926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561440857600080fd5b505afa15801561441c573d6000803e3d6000fd5b505050506040513d602081101561443257600080fd5b50519061384a565b9150505b600a54604080517f42966c680000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b1580156144a457600080fd5b505af11580156144b8573d6000803e3d6000fd5b50505050613c61828561384a90919063ffffffff16565b80158061456e5750604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561454057600080fd5b505afa158015614554573d6000803e3d6000fd5b505050506040513d602081101561456a57600080fd5b5051155b6145a95760405162461bcd60e51b81526004018080602001828103825260368152602001806150366036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052611a0790849061477d565b60006146bf82856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561468d57600080fd5b505afa1580156146a1573d6000803e3d6000fd5b505050506040513d60208110156146b757600080fd5b505190614062565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905290915061405c90859061477d565b6001600160a01b0387166147635761475e888787878686614832565b614773565b6147738888888888888888614ad3565b5050505050505050565b60606147d2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614c199092919063ffffffff16565b805190915015611a07578080602001905160208110156147f157600080fd5b5051611a075760405162461bcd60e51b815260040180806020018281038252602a81526020018061500c602a913960400191505060405180910390fd5b3390565b604080517fd06ca61f00000000000000000000000000000000000000000000000000000000815260048101878152602482019283528551604483015285516060936001600160a01b038b169363d06ca61f938b938a939192606401906020808601910280838360005b838110156148b357818101518382015260200161489b565b50505050905001935050505060006040518083038186803b1580156148d757600080fd5b505afa1580156148eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561493257600080fd5b810190808051604051939291908464010000000082111561495257600080fd5b90830190602082018581111561496757600080fd5b825186602082028301116401000000008211171561498457600080fd5b82525081516020918201928201910280838360005b838110156149b1578181015183820152602001614999565b5050505090500160405250505090506000816149d86001845161384a90919063ffffffff16565b815181106149e257fe5b60200260200101519050876001600160a01b0316635c11d79588614a156103e86111ad8b8761378190919063ffffffff16565b8888886040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015614a88578181015183820152602001614a70565b505050509050019650505050505050600060405180830381600087803b158015614ab157600080fd5b505af1158015614ac5573d6000803e3d6000fd5b505050505050505050505050565b600084600186510381518110614ae557fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614b3e57600080fd5b505afa158015614b52573d6000803e3d6000fd5b505050506040513d6020811015614b6857600080fd5b50519050614b7a8a8989893088614832565b6000614bcd82846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561440857600080fd5b90508015614c0c57614bea6001600160a01b0384168b60006144cf565b614bfe6001600160a01b0384168b83614629565b614c0c8a828a898989614832565b5050505050505050505050565b6060614c288484600085614c32565b90505b9392505050565b606082471015614c735760405162461bcd60e51b8152600401808060200182810382526026815260200180614f806026913960400191505060405180910390fd5b614c7c85614da1565b614ccd576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310614d2a57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614ced565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614d8c576040519150601f19603f3d011682016040523d82523d6000602084013e614d91565b606091505b5091509150613c5c828286614da7565b3b151590565b60608315614db6575081614c2b565b825115614dc65782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614e10578181015183820152602001614df8565b50505050905090810190601f168015614e3d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215614eb8579160200282015b82811115614eb857825182547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909116178255602090920191600190910190614e6b565b50614ec4929150614ec8565b5090565b5b80821115614ec45780547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155600101614ec956fe436f72655265663a3a6f6e6c794d61737465723a2043616c6c6572206973206e6f742061206d6173746572436f72655265663a3a6f6e6c79476f7665726e6f723a2043616c6c6572206973206e6f74206120676f7665726e6f726669727374206465706f73697420616d6f756e74203c3d204d494e494d554d5f534841524553416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f72655265663a3a6f6e6c79477561726469616e4f72476f7665726e6f723a2043616c6c6572206973206e6f74206120677561726469616e206f7220676f7665726e6f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220f136b3e4a45098d887a81ce9f21a3d94ba9a70c5d263d2a8afac79c56b7266ca64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2370,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11642,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "_core",
        "offset": 1,
        "slot": "0",
        "type": "t_contract(ICore)11634"
      },
      {
        "astId": 2455,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4249,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "isCAKEStaking",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4251,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "isSameAssetDeposit",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4253,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "isAutoComp",
        "offset": 2,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4255,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "isCollect",
        "offset": 3,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4258,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "onlyGov",
        "offset": 4,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4260,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "farmContractAddress",
        "offset": 5,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4262,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "pid",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4264,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "wantAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4266,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "token0Address",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4268,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "token1Address",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4270,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4272,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "wbnbAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4274,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "UPFarmAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 4276,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "UPAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 4279,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "lastEarnBlock",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4282,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "wantLockedTotal",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4285,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "sharesTotal",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4288,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "controllerFee",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4297,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "buyBackRate",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4305,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "rewardsAddress",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 4308,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "entranceFeeFactor",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 4317,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "withdrawFeeFactor",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 4326,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "slippageFactor",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 4331,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken0Router0Address",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 4333,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken0Router1Address",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 4335,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken1Router0Address",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 4337,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken1Router1Address",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 4339,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "wantRouterAddress",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 4341,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "buyBackRouter0Address",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      },
      {
        "astId": 4343,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "buyBackRouter1Address",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 4346,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToUpPath0",
        "offset": 0,
        "slot": "27",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4349,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToUpPath1",
        "offset": 0,
        "slot": "28",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4352,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken0Path0",
        "offset": 0,
        "slot": "29",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4355,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken0Path1",
        "offset": 0,
        "slot": "30",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4358,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken1Path0",
        "offset": 0,
        "slot": "31",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4361,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken1Path1",
        "offset": 0,
        "slot": "32",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICore)11634": {
        "encoding": "inplace",
        "label": "contract ICore",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}