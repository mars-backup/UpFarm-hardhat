{
  "address": "0x42139b329FCb6287C95398B441Be27eADC576469",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_upToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WBNB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vestingMaster",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        }
      ],
      "name": "AddPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_core",
          "type": "address"
        }
      ],
      "name": "CoreUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        }
      ],
      "name": "SetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenPerBlock",
          "type": "uint256"
        }
      ],
      "name": "UpdateEmissionRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "UpdateEndBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vestingMaster",
          "type": "address"
        }
      ],
      "name": "UpdateVestingMaster",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MASTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNoHarvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pair2Pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "core_",
          "type": "address"
        }
      ],
      "name": "setCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        }
      ],
      "name": "updateEndBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateTokenPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vestingMaster",
          "type": "address"
        }
      ],
      "name": "updateVestingMaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingMaster",
      "outputs": [
        {
          "internalType": "contract IVestingMaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x809128982643912dab8360f7af0e2e8ac3a9b4f0f28c1fd07a8a9c0810e0a252",
  "receipt": {
    "to": null,
    "from": "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
    "contractAddress": "0x18B3bb9C0351bb51d38D522Afb63B4BFdDC4c03b",
    "transactionIndex": 5,
    "gasUsed": "3492595",
    "logsBloom": "0x
    "blockHash": "0xb24f1469a63048fcaafb05fe4b84b99deed4e93b3eaa3976f620d2ab323838ad",
    "transactionHash": "0x809128982643912dab8360f7af0e2e8ac3a9b4f0f28c1fd07a8a9c0810e0a252",
    "logs": [],
    "blockNumber": 16802690,
    "cumulativeGasUsed": "3706143",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x40fc3759Ccc4E466650891a91F34Bdd6129094D6",
    "0x4C2e91C8eD9eed3aFa2cC5ecBb26ae752c83dA59",
    "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd",
    "0x0000000000000000000000000000000000000000",
    "500000000000000",
    0,
    "1000000000000000000"
  ],
  "solcInputHash": "2f541bcd60d5e1a907d6462ac5275e07",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WBNB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingMaster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPerBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEndBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingMaster\",\"type\":\"address\"}],\"name\":\"UpdateVestingMaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MASTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNoHarvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pair2Pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"core_\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"updateEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateTokenPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingMaster\",\"type\":\"address\"}],\"name\":\"updateVestingMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingMaster\",\"outputs\":[{\"internalType\":\"contract IVestingMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingRewardsBNB.sol\":\"StakingRewardsBNB\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\nimport \\\"./interfaces/IVestingMaster.sol\\\";\\nimport \\\"./refs/CoreRef.sol\\\";\\n\\ncontract StakingRewards is\\n    IStakingRewards,\\n    ReentrancyGuard,\\n    ERC20,\\n    CoreRef\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IVestingMaster public override vestingMaster;\\n\\n    // Info of each pool.\\n    PoolInfo[] public override poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public override userInfo;\\n\\n    // Pair corresponding pid\\n    mapping(address => uint256) public override pair2Pid;\\n    mapping(IERC20 => bool) public override poolExistence;\\n\\n    // reward tokens created per block.\\n    uint256 public override tokenPerBlock;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public override totalAllocPoint = 0;\\n\\n    // The block number when reward mining starts.\\n    uint256 public override startBlock;\\n\\n    // The block number when reward mining ends.\\n    uint256 public override endBlock;\\n\\n    IERC20 public override rewardToken;\\n\\n    IERC20 public override upToken;\\n\\n    uint256 private _accShareReward;\\n\\n    uint256 private _accHarvestedReward;\\n\\n    event AddPool( \\n        uint256 _allocPoint,\\n        address _lpToken,\\n        bool _locked\\n    );\\n\\n    event SetPool( \\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _locked\\n    );\\n\\n    constructor(\\n        address _core,\\n        address _upToken,\\n        address _rewardToken,\\n        address _vestingMaster,\\n        uint256 _tokenPerBlock,\\n        uint256 _startBlock,\\n        uint256 _endBlock\\n    ) public ERC20(\\\"UP Farms Seed Token\\\", \\\"UPSEED\\\") CoreRef(_core) {\\n        require(\\n            _startBlock < _endBlock,\\n            \\\"StakingReward::constructor: End less than start\\\"\\n        );\\n        upToken = IERC20(_upToken);\\n        rewardToken = IERC20(_rewardToken);\\n        vestingMaster = IVestingMaster(_vestingMaster);\\n        tokenPerBlock = _tokenPerBlock;\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n    }\\n\\n    modifier nonDuplicated(IERC20 _lpToken) {\\n        require(\\n            !poolExistence[_lpToken],\\n            \\\"StakingReward::nonDuplicated: Duplicated\\\"\\n        );\\n        require(\\n            _lpToken != rewardToken || _lpToken == upToken,\\n            \\\"StakingReward::nonDuplicated: Duplicated reward and lp\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier validatePid(uint256 _pid) {\\n        require(\\n            _pid < poolInfo.length,\\n            \\\"StakingReward::validatePid: Not exist\\\"\\n        );\\n        _;\\n    }\\n\\n    function transfer(address to, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        revert(\\\"StakingRewards::transfer: Not support transfer\\\");\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        revert(\\\"StakingRewards::transferFrom: Not support transferFrom\\\");\\n    }\\n\\n    function poolLength() public view override returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function addPool(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _locked\\n    ) external onlyGuardianOrGovernor nonDuplicated(_lpToken) {\\n        require(\\n            block.number < endBlock,\\n            \\\"StakingReward::addPool: Exceed endblock\\\"\\n        );\\n        massUpdatePools();\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolExistence[_lpToken] = true;\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accTokenPerShare: 0,\\n                locked: _locked\\n            })\\n        );\\n        pair2Pid[address(_lpToken)] = poolLength() - 1;\\n\\n        emit AddPool(_allocPoint, address(_lpToken), _locked);\\n    }\\n\\n    function setPool(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _locked\\n    ) external validatePid(_pid) onlyGuardianOrGovernor {\\n        massUpdatePools();\\n\\n        totalAllocPoint = totalAllocPoint\\n            .sub(poolInfo[_pid].allocPoint)\\n            .add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].locked = _locked;\\n\\n        emit SetPool(_pid, _allocPoint, _locked);\\n    }\\n\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return _to.sub(_from);\\n    }\\n\\n    function getTokenReward(uint256 _pid)\\n        internal\\n        view\\n        returns (uint256 tokenReward)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n            pool.lastRewardBlock < block.number,\\n            \\\"StakingReward::getTokenReward:LastRewardBlock Must little than the current block number\\\"\\n        );\\n        uint256 multiplier = getMultiplier(\\n            pool.lastRewardBlock,\\n            block.number >= endBlock ? endBlock : block.number\\n        );\\n        if (totalAllocPoint > 0) {\\n            tokenReward = multiplier\\n                .mul(tokenPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n        }\\n    }\\n\\n    function pendingToken(uint256 _pid, address _user)\\n        external\\n        view\\n        override\\n        validatePid(_pid)\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 lpSupply = address(upToken) == address(pool.lpToken)\\n            ? totalSupply()\\n            : pool.lpToken.balanceOf(address(this));\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 shareReward = getTokenReward(_pid);\\n            accTokenPerShare = accTokenPerShare.add(\\n                shareReward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n        return user.amount.mul(accTokenPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    function massUpdatePools() public override {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    function updatePool(uint256 _pid) public override validatePid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        if (pool.lastRewardBlock >= endBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = address(upToken) == address(pool.lpToken)\\n            ? totalSupply()\\n            : pool.lpToken.balanceOf(address(this));\\n        uint256 lastRewardBlock = block.number >= endBlock\\n            ? endBlock\\n            : block.number;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = lastRewardBlock;\\n            return;\\n        }\\n        uint256 shareReward = getTokenReward(_pid);\\n        pool.accTokenPerShare = pool.accTokenPerShare.add(\\n            shareReward.mul(1e12).div(lpSupply)\\n        );\\n        pool.lastRewardBlock = lastRewardBlock;\\n        _accShareReward = _accShareReward.add(shareReward);\\n        emit UpdatePool(\\n            address(pool.lpToken),\\n            pool.accTokenPerShare,\\n            shareReward,\\n            lpSupply\\n        );\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount)\\n        external\\n        override\\n        validatePid(_pid)\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user\\n                .amount\\n                .mul(pool.accTokenPerShare)\\n                .div(1e12)\\n                .sub(user.rewardDebt);\\n            if (pending > 0) {\\n                uint256 locked;\\n                if (pool.locked && address(vestingMaster) != address(0)) {\\n                    locked = pending\\n                        .div(vestingMaster.lockedPeriodAmount() + 1)\\n                        .mul(vestingMaster.lockedPeriodAmount());\\n                }\\n                safeTokenTransfer(msg.sender, pending.sub(locked));\\n                if (locked > 0) {\\n                    uint256 actualAmount = safeTokenTransfer(\\n                        address(vestingMaster),\\n                        locked\\n                    );\\n                    vestingMaster.lock(msg.sender, actualAmount);\\n                }\\n                _accHarvestedReward = _accHarvestedReward.add(pending);\\n            }\\n        }\\n        uint256 realAmount = _amount;\\n        if (_amount > 0) {\\n            uint256 beforeAmount =  pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(\\n                address(msg.sender),\\n                address(this),\\n                _amount\\n            );\\n            uint256 afterAmount =  pool.lpToken.balanceOf(address(this));\\n            realAmount = afterAmount.sub(beforeAmount);\\n            if (address(upToken) == address(pool.lpToken)) {\\n                _mint(msg.sender, realAmount);\\n            }\\n            user.amount = user.amount.add(realAmount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, realAmount, user.amount, user.rewardDebt);\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        external\\n        override\\n        validatePid(_pid)\\n        nonReentrant\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(\\n            user.amount >= _amount,\\n            \\\"StakingReward::withdraw: Not good\\\"\\n        );\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user\\n                .amount\\n                .mul(pool.accTokenPerShare)\\n                .div(1e12)\\n                .sub(user.rewardDebt);\\n            if (pending > 0) {\\n                uint256 locked;\\n                if (pool.locked && address(vestingMaster) != address(0)) {\\n                    locked = pending\\n                        .div(vestingMaster.lockedPeriodAmount() + 1)\\n                        .mul(vestingMaster.lockedPeriodAmount());\\n                }\\n                safeTokenTransfer(msg.sender, pending.sub(locked));\\n                if (locked > 0) {\\n                    uint256 actualAmount = safeTokenTransfer(\\n                        address(vestingMaster),\\n                        locked\\n                    );\\n                    vestingMaster.lock(msg.sender, actualAmount);\\n                }\\n                _accHarvestedReward = _accHarvestedReward.add(pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            if (address(upToken) == address(pool.lpToken)) {\\n                _burn(msg.sender, _amount);\\n            }\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);\\n        emit Withdraw(msg.sender, _pid, _amount, user.amount, user.rewardDebt);\\n    }\\n\\n    function emergencyWithdraw(uint256 _pid)\\n        external\\n        override\\n        validatePid(_pid)\\n        nonReentrant\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        if (address(upToken) == address(pool.lpToken)) {\\n            _burn(msg.sender, amount);\\n        }\\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    function safeTokenTransfer(address _to, uint256 _amount)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n        uint256 amount;\\n        uint256 floorAmount = rewardToken == upToken ? totalSupply() : 0;\\n        if (balance > floorAmount) {\\n            balance = balance.sub(floorAmount);\\n            if (_amount > balance) {\\n                amount = balance;\\n            } else {\\n                amount = _amount;\\n            }\\n        }\\n\\n        rewardToken.safeTransfer(_to, amount);\\n        return amount;\\n    }\\n\\n    function updateTokenPerBlock(uint256 _tokenPerBlock)\\n        external\\n        override\\n        onlyGuardianOrGovernor\\n    {\\n        massUpdatePools();\\n        tokenPerBlock = _tokenPerBlock;\\n        emit UpdateEmissionRate(msg.sender, _tokenPerBlock);\\n    }\\n\\n    function updateEndBlock(uint256 _endBlock)\\n        external\\n        override\\n        onlyGuardianOrGovernor\\n    {\\n        require(\\n            _endBlock > startBlock,\\n            \\\"StakingReward::updateEndBlock: Less\\\"\\n        );\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            require(\\n                _endBlock > poolInfo[pid].lastRewardBlock,\\n                \\\"StakingReward::updateEndBlock: Less\\\"\\n            );\\n        }\\n        massUpdatePools();\\n        endBlock = _endBlock;\\n        emit UpdateEndBlock(msg.sender, _endBlock);\\n    }\\n\\n    function updateVestingMaster(address _vestingMaster)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        vestingMaster = IVestingMaster(_vestingMaster);\\n        emit UpdateVestingMaster(msg.sender, _vestingMaster);\\n    }\\n\\n    function getNoHarvestReward() public view returns (uint256) {\\n        return _accShareReward.sub(_accHarvestedReward);\\n    }\\n}\",\"keccak256\":\"0xd4c05f752c1fde8966719f1847fb14b319e98f89b6363c7c7d99c5c218fec3c3\",\"license\":\"MIT\"},\"contracts/StakingRewardsBNB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./StakingRewards.sol\\\";\\nimport \\\"./libs/TransferHelper.sol\\\";\\n\\ncontract StakingRewardsBNB is StakingRewards {\\n    using SafeMath for uint256;\\n\\n    constructor(\\n        address _core,\\n        address _upToken,\\n        address _WBNB,\\n        address _vestingMaster,\\n        uint256 _tokenPerBlock,\\n        uint256 _startBlock,\\n        uint256 _endBlock\\n    ) public\\n        StakingRewards(\\n            _core,\\n            _upToken,\\n            _WBNB,\\n            _vestingMaster,\\n            _tokenPerBlock,\\n            _startBlock,\\n            _endBlock\\n        )\\n    {}\\n\\n    receive() external payable {}\\n\\n    function safeTokenTransfer(address _to, uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        uint256 balance = address(this).balance;\\n        uint256 amount = _amount > balance ? balance : _amount;\\n        if (amount > 0) {\\n            TransferHelper.safeTransferETH(_to, amount);\\n        }\\n        return amount;\\n    }\\n}\",\"keccak256\":\"0x345bcb5d518c9dc4c79f072a6e509ce868551a4e339c80a47e8b6b12846055cb\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IVestingMaster.sol\\\";\\n\\ninterface IStakingRewards {\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of reward\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accTokenPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accTokenPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. reward to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that reward distribution occurs.\\n        uint256 accTokenPerShare; // Accumulated reward per share, times 1e12. See below.\\n        bool locked;\\n    }\\n\\n    // ----------- Events -----------\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 totalAmount, uint256 rewardDebt);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, uint256 totalAmount, uint256 rewardDebt);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event UpdatePool(\\n        address lpToken,\\n        uint256 accTokenPerShare,\\n        uint256 reward,\\n        uint256 lpSupply\\n    );\\n    event UpdateEmissionRate(address indexed user, uint256 tokenPerBlock);\\n    event UpdateEndBlock(address indexed user, uint256 endBlock);\\n    event UpdateVestingMaster(address indexed user, address vestingMaster);\\n\\n    // ----------- State changing api -----------\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 pid) external;\\n\\n    function deposit(uint256 pid, uint256 amount) external;\\n\\n    function withdraw(uint256 pid, uint256 amount) external;\\n\\n    function emergencyWithdraw(uint256 pid) external;\\n\\n    function updateTokenPerBlock(uint256 _tokenPerBlock) external;\\n\\n    function updateEndBlock(uint256 _endBlock) external;\\n\\n    function updateVestingMaster(address _vestingMaster) external;\\n\\n    // ----------- Getters -----------\\n\\n    function pair2Pid(address pair) external view returns (uint256);\\n\\n    function pendingToken(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            IERC20 lpToken,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accTokenPerShare,\\n            bool locked\\n        );\\n\\n    function userInfo(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 amount, uint256 rewardDebt);\\n\\n    function poolExistence(IERC20 lp) external view returns (bool);\\n\\n    function tokenPerBlock() external view returns (uint256);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function startBlock() external view returns (uint256);\\n\\n    function endBlock() external view returns (uint256);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function vestingMaster() external view returns (IVestingMaster);\\n\\n    function rewardToken() external view returns (IERC20);\\n\\n    function upToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0xf8a02f946b38533a2a73b4b2451dc859cd87737d2f2c67be3c95140ce445db63\",\"license\":\"MIT\"},\"contracts/interfaces/IVestingMaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\npragma solidity 0.6.12;\\n\\ninterface IVestingMaster{\\n    function lock(address account, uint256 amount) external;\\n\\n    function claim() external;\\n\\n    function getVestingAmount() external view returns (uint256 lockedAmount, uint256 claimableAmount);\\n\\n    function lockedPeriodAmount() external view returns (uint256 periodAmount);\\n\\n    function vestingToken() external view returns (IERC20);\\n\\n    function period() external view returns (uint256);\\n\\n    function totalLockedRewards() external view returns (uint256);\\n}\",\"keccak256\":\"0x7755df88c51c0860b91a8dea5dbcb4f7ec676491ecbe23a2d9777b11d50fc9be\",\"license\":\"MIT\"},\"contracts/libs/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n// Helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: Approve failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: Transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransferFrom: Transfer from failed\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: Eth transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x08a193ea2646222d9800fcfa044eddbc4171933b1daf95ffc93557cabd79a071\",\"license\":\"MIT\"},\"contracts/refs/CoreRef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ninterface ICore {\\n    function isGovernor(address _address) external view returns (bool);\\n\\n    function isGuardian(address _address) external view returns (bool);\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\\n\\nabstract contract CoreRef is Pausable {\\n\\n    event CoreUpdate(address indexed _core);\\n\\n    ICore private _core;\\n\\n    bytes32 public constant MASTER_ROLE = keccak256(\\\"MASTER_ROLE\\\");\\n\\n    constructor(address core_) public {\\n        _core = ICore(core_);\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender),\\n            \\\"CoreRef::onlyGovernor: Caller is not a governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(\\n            _core.isGuardian(msg.sender),\\n            \\\"CoreRef::onlyGuardian: Caller is not a guardian\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardianOrGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender),\\n            \\\"CoreRef::onlyGuardianOrGovernor: Caller is not a guardian or governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMaster() {\\n        require(\\n            _core.hasRole(MASTER_ROLE, msg.sender),\\n            \\\"CoreRef::onlyMaster: Caller is not a master\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        require(\\n            _core.hasRole(role, msg.sender),\\n            \\\"CoreRef::onlyRole: Not permit\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        require(\\n            _core.hasRole(role, address(0)) || _core.hasRole(role, msg.sender),\\n            \\\"CoreRef::onlyRoleOrOpenRole: Not permit\\\"\\n        );\\n        _;\\n    }\\n\\n    function setCore(address core_) external onlyGovernor {\\n        _core = ICore(core_);\\n        emit CoreUpdate(core_);\\n    }\\n\\n    function pause() public onlyGuardianOrGovernor {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyGovernor {\\n        _unpause();\\n    }\\n\\n    function core() public view returns (ICore) {\\n        return _core;\\n    }\\n\\n}\",\"keccak256\":\"0x347c55d9c381f639b545aca006912b67dde6c675080086b7cd33dc205ebcc3d5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600d553480156200001657600080fd5b5060405162003e4438038062003e44833981016040819052620000399162000242565b86868686868686866040518060400160405280601381526020017f5550204661726d73205365656420546f6b656e0000000000000000000000000081525060405180604001604052806006815260200165155414d1515160d21b81525060016000819055508160049080519060200190620000b692919062000188565b508051620000cc90600590602084019062000188565b5050600680546001600160a01b039093166201000002610100600160b01b031960ff199094166012179390931692909217909155508082106200012c5760405162461bcd60e51b81526004016200012390620002bf565b60405180910390fd5b601180546001600160a01b03199081166001600160a01b039889161790915560108054821696881696909617909555600780549095169390951692909217909255600c91909155600e55600f55506200030e9650505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001cb57805160ff1916838001178555620001fb565b82800160010185558215620001fb579182015b82811115620001fb578251825591602001919060010190620001de565b50620002099291506200020d565b5090565b5b808211156200020957600081556001016200020e565b80516001600160a01b03811681146200023c57600080fd5b92915050565b600080600080600080600060e0888a0312156200025d578283fd5b62000269898962000224565b96506200027a8960208a0162000224565b95506200028b8960408a0162000224565b94506200029c8960608a0162000224565b93506080880151925060a0880151915060c0880151905092959891949750929550565b6020808252602f908201527f5374616b696e675265776172643a3a636f6e7374727563746f723a20456e642060408201526e1b195cdcc81d1a185b881cdd185c9d608a1b606082015260800190565b613b26806200031e6000396000f3fe6080604052600436106102c95760003560e01c80635312ea8e1161017957806395d89b41116100d6578063cbd258b51161008a578063e2bbb15811610064578063e2bbb15814610745578063f2f4eb2614610765578063f7c618c11461077a576102d0565b8063cbd258b5146106f0578063dc22486314610710578063dd62ed3e14610725576102d0565b8063a9059cbb116100bb578063a9059cbb14610690578063ae0e597a146106b0578063c8116585146106d0576102d0565b806395d89b411461065b578063a457c2d714610670576102d0565b806370a082311161012d578063800096301161011257806380009630146105f85780638456cb591461061857806393f1a40b1461062d576102d0565b806370a08231146105b85780637abceffd146105d8576102d0565b80635c975abb1161015e5780635c975abb1461057957806361a548e31461058e578063630b5ba1146105a3576102d0565b80635312ea8e146105445780635aca5e9314610564576102d0565b806323b872dd11610227578063441a3e70116101db57806348cd4cb1116101c057806348cd4cb1146104ef57806348e43af41461050457806351eb05a614610524576102d0565b8063441a3e70146104af57806346ca6bea146104cf576102d0565b8063395093511161020c57806339509351146104655780633f4ba83a146104855780634198709a1461049a576102d0565b806323b872dd14610423578063313ce56714610443576102d0565b80631526fe271161027e57806318160ddd1161026357806318160ddd146103cc5780631eccdf07146103e15780632124ca4414610403576102d0565b80631526fe271461038657806317caf6f1146103b7576102d0565b8063081e3eda116102af578063081e3eda14610322578063083c632314610344578063095ea7b314610359576102d0565b80626f0231146102d557806306fdde03146102f7576102d0565b366102d057005b600080fd5b3480156102e157600080fd5b506102f56102f0366004612fb0565b61078f565b005b34801561030357600080fd5b5061030c6109b4565b604051610319919061316a565b60405180910390f35b34801561032e57600080fd5b50610337610a68565b6040516103199190613131565b34801561035057600080fd5b50610337610a6e565b34801561036557600080fd5b50610379610374366004612f69565b610a74565b6040516103199190613126565b34801561039257600080fd5b506103a66103a1366004612fb0565b610a92565b60405161031995949392919061313a565b3480156103c357600080fd5b50610337610add565b3480156103d857600080fd5b50610337610ae3565b3480156103ed57600080fd5b506103f6610ae9565b60405161031991906130af565b34801561040f57600080fd5b506102f561041e366004612ed5565b610af8565b34801561042f57600080fd5b5061037961043e366004612f29565b610c17565b34801561044f57600080fd5b50610458610c31565b6040516103199190613a49565b34801561047157600080fd5b50610379610480366004612f69565b610c3a565b34801561049157600080fd5b506102f5610c8d565b3480156104a657600080fd5b50610337610d51565b3480156104bb57600080fd5b506102f56104ca366004613045565b610d57565b3480156104db57600080fd5b506102f56104ea366004613066565b611134565b3480156104fb57600080fd5b5061033761139a565b34801561051057600080fd5b5061033761051f366004612fe0565b6113a0565b34801561053057600080fd5b506102f561053f366004612fb0565b611540565b34801561055057600080fd5b506102f561055f366004612fb0565b611742565b34801561057057600080fd5b50610337611847565b34801561058557600080fd5b50610379611865565b34801561059a57600080fd5b506103f6611873565b3480156105af57600080fd5b506102f5611882565b3480156105c457600080fd5b506103376105d3366004612ed5565b6118a1565b3480156105e457600080fd5b506102f56105f3366004613004565b6118bc565b34801561060457600080fd5b506102f5610613366004612ed5565b611ccc565b34801561062457600080fd5b506102f5611df0565b34801561063957600080fd5b5061064d610648366004612fe0565b611f56565b604051610319929190613a0d565b34801561066757600080fd5b5061030c611f7a565b34801561067c57600080fd5b5061037961068b366004612f69565b611ff9565b34801561069c57600080fd5b506103796106ab366004612f69565b612061565b3480156106bc57600080fd5b506102f56106cb366004612fb0565b61207b565b3480156106dc57600080fd5b506103376106eb366004612ed5565b612218565b3480156106fc57600080fd5b5061037961070b366004612ed5565b61222a565b34801561071c57600080fd5b5061033761223f565b34801561073157600080fd5b50610337610740366004612ef1565b612263565b34801561075157600080fd5b506102f5610760366004613045565b61228e565b34801561077157600080fd5b506103f66126c8565b34801561078657600080fd5b506103f66126dd565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b8906107dd9033906004016130af565b60206040518083038186803b1580156107f557600080fd5b505afa158015610809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082d9190612f94565b806108d157506006546040517f0c68ba21000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b031690630c68ba21906108819033906004016130af565b60206040518083038186803b15801561089957600080fd5b505afa1580156108ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d19190612f94565b6108f65760405162461bcd60e51b81526004016108ed90613559565b60405180910390fd5b600e5481116109175760405162461bcd60e51b81526004016108ed90613750565b60005b600854811015610969576008818154811061093157fe5b90600052602060002090600502016002015482116109615760405162461bcd60e51b81526004016108ed90613750565b60010161091a565b50610972611882565b600f81905560405133907f316ee89ca026e5355cff2b64939ee0e5af49bde19b755b42bbde0f5bea039825906109a9908490613131565b60405180910390a250565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a5e5780601f10610a3357610100808354040283529160200191610a5e565b820191906000526020600020905b815481529060010190602001808311610a4157829003601f168201915b5050505050905090565b60085490565b600f5481565b6000610a88610a816126ec565b84846126f0565b5060015b92915050565b60088181548110610a9f57fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff1685565b600d5481565b60035490565b6007546001600160a01b031681565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b890610b469033906004016130af565b60206040518083038186803b158015610b5e57600080fd5b505afa158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b969190612f94565b610bb25760405162461bcd60e51b81526004016108ed9061339d565b600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831617905560405133907fedd017b4981fb4d0d4df1c48baed994ce8b4dc47ba89a2010ce592b7df5c6dc4906109a99084906130af565b600060405162461bcd60e51b81526004016108ed90613431565b60065460ff1690565b6000610a88610c476126ec565b84610c888560026000610c586126ec565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906127a4565b6126f0565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b890610cdb9033906004016130af565b60206040518083038186803b158015610cf357600080fd5b505afa158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2b9190612f94565b610d475760405162461bcd60e51b81526004016108ed9061339d565b610d4f6127d0565b565b600c5481565b60085482908110610d7a5760405162461bcd60e51b81526004016108ed906132e3565b60026000541415610d9d5760405162461bcd60e51b81526004016108ed9061397e565b600260009081556008805485908110610db257fe5b600091825260208083208784526009825260408085203386529092529220805460059092029092019250841115610dfb5760405162461bcd60e51b81526004016108ed906135dc565b610e0485611540565b80541561107b576000610e458260010154610e3f64e8d4a51000610e398760030154876000015461285c90919063ffffffff16565b90612896565b906128c8565b9050801561107957600483015460009060ff168015610e6e57506007546001600160a01b031615155b15610fb457600754604080517f05e97bc60000000000000000000000000000000000000000000000000000000081529051610fb1926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b158015610ed257600080fd5b505afa158015610ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0a9190612fc8565b600754604080517f05e97bc60000000000000000000000000000000000000000000000000000000081529051610fab926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b158015610f6957600080fd5b505afa158015610f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa19190612fc8565b8590600101612896565b9061285c565b90505b610fc733610fc284846128c8565b6128f0565b50801561106757600754600090610fe7906001600160a01b0316836128f0565b6007546040517f282d3fdf0000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063282d3fdf9061103390339085906004016130c3565b600060405180830381600087803b15801561104d57600080fd5b505af1158015611061573d6000803e3d6000fd5b50505050505b60135461107490836127a4565b601355505b505b83156110c757805461108d90856128c8565b815581546011546001600160a01b03908116911614156110b1576110b1338561291d565b81546110c7906001600160a01b031633866129ff565b600382015481546110e29164e8d4a5100091610e399161285c565b600182018190558154604051879233927fe08737ac48a1dab4b1a46c7dc9398bd5bfc6d7ad6fabb7cd8caa254de14def3592611120928a9291613a33565b60405180910390a350506001600055505050565b600854839081106111575760405162461bcd60e51b81526004016108ed906132e3565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b8906111a59033906004016130af565b60206040518083038186803b1580156111bd57600080fd5b505afa1580156111d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f59190612f94565b8061129957506006546040517f0c68ba21000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b031690630c68ba21906112499033906004016130af565b60206040518083038186803b15801561126157600080fd5b505afa158015611275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112999190612f94565b6112b55760405162461bcd60e51b81526004016108ed90613559565b6112bd611882565b6112fa836112f4600887815481106112d157fe5b906000526020600020906005020160010154600d546128c890919063ffffffff16565b906127a4565b600d81905550826008858154811061130e57fe5b906000526020600020906005020160010181905550816008858154811061133157fe5b906000526020600020906005020160040160006101000a81548160ff0219169083151502179055507f8f987a9b62724ae68030752859382563c5fd80a0c4f9ba7c067d4a9e50da652284848460405161138c93929190613a1b565b60405180910390a150505050565b600e5481565b600854600090839081106113c65760405162461bcd60e51b81526004016108ed906132e3565b6000600885815481106113d557fe5b600091825260208083208884526009825260408085206001600160a01b038a811687529352842060059390930201600381015481546011549296509394909390929081169116146114bd5783546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906370a08231906114689030906004016130af565b60206040518083038186803b15801561148057600080fd5b505afa158015611494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b89190612fc8565b6114c5565b6114c5610ae3565b90508360020154431180156114d957508015155b1561150c5760006114e989612aa5565b905061150861150183610e398464e8d4a5100061285c565b84906127a4565b9250505b6115348360010154610e3f64e8d4a51000610e3986886000015461285c90919063ffffffff16565b98975050505050505050565b600854819081106115635760405162461bcd60e51b81526004016108ed906132e3565b60006008838154811061157257fe5b9060005260206000209060050201905080600201544311611593575061173e565b600f548160020154106115a6575061173e565b80546011546000916001600160a01b0391821691161461165d5781546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906370a08231906116089030906004016130af565b60206040518083038186803b15801561162057600080fd5b505afa158015611634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116589190612fc8565b611665565b611665610ae3565b90506000600f54431015611679574361167d565b600f545b905081158061168e57506001830154155b156116a2576002909201919091555061173e565b60006116ad86612aa5565b90506116d06116c584610e398464e8d4a5100061285c565b6003860154906127a4565b6003850155600284018290556012546116e990826127a4565b601255835460038501546040517f50a1a2d4fcb1c08863a0b14fcc7d9d728e2b21d8d7588b9cfa3991efe8112ee792611731926001600160a01b039091169185908890613100565b60405180910390a1505050505b5050565b600854819081106117655760405162461bcd60e51b81526004016108ed906132e3565b600260005414156117885760405162461bcd60e51b81526004016108ed9061397e565b60026000908155600880548490811061179d57fe5b600091825260208083208684526009825260408085203386529092529083208054848255600182019490945560059092020180546011549194509192916001600160a01b03918216911614156117f7576117f7338261291d565b825461180d906001600160a01b031633836129ff565b84336001600160a01b03167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae0595836040516111209190613131565b60006118606013546012546128c890919063ffffffff16565b905090565b600654610100900460ff1690565b6011546001600160a01b031681565b60085460005b8181101561173e5761189981611540565b600101611888565b6001600160a01b031660009081526001602052604090205490565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b89061190a9033906004016130af565b60206040518083038186803b15801561192257600080fd5b505afa158015611936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195a9190612f94565b806119fe57506006546040517f0c68ba21000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b031690630c68ba21906119ae9033906004016130af565b60206040518083038186803b1580156119c657600080fd5b505afa1580156119da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fe9190612f94565b611a1a5760405162461bcd60e51b81526004016108ed90613559565b6001600160a01b0382166000908152600b6020526040902054829060ff1615611a555760405162461bcd60e51b81526004016108ed906131bb565b6010546001600160a01b038281169116141580611a7f57506011546001600160a01b038281169116145b611a9b5760405162461bcd60e51b81526004016108ed90613340565b600f544310611abc5760405162461bcd60e51b81526004016108ed906136f3565b611ac4611882565b6000600e544311611ad757600e54611ad9565b435b600d54909150611ae990866127a4565b600d556001600160a01b038481166000818152600b60209081526040808320805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009182168117909255825160a0810184529586529285018b8152918501878152606086018581528a151560808801908152600880548086018255975296517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3600590970296870180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919099161790975591517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee485015590517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee584015593517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee683015591517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee79091018054909216901515179055611c6a610a68565b6001600160a01b0386166000908152600a60205260409081902092909103909155517fdb1bd39f8335c9b10acbc6afb000d15247c2ad3d0aa1e481a6b44594e7cc1d6590611cbd908790879087906139ec565b60405180910390a15050505050565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b890611d1a9033906004016130af565b60206040518083038186803b158015611d3257600080fd5b505afa158015611d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6a9190612f94565b611d865760405162461bcd60e51b81526004016108ed9061339d565b600680547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038416908102919091179091556040517fad9400e618eb1344fde53db22397a1b82c765527ecbba3a5c86bcac15090828b90600090a250565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b890611e3e9033906004016130af565b60206040518083038186803b158015611e5657600080fd5b505afa158015611e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8e9190612f94565b80611f3257506006546040517f0c68ba21000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b031690630c68ba2190611ee29033906004016130af565b60206040518083038186803b158015611efa57600080fd5b505afa158015611f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f329190612f94565b611f4e5760405162461bcd60e51b81526004016108ed90613559565b610d4f612b43565b60096020908152600092835260408084209091529082529020805460019091015482565b60058054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a5e5780601f10610a3357610100808354040283529160200191610a5e565b6000610a886120066126ec565b84610c8885604051806060016040528060258152602001613acc60259139600260006120306126ec565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190612bbd565b600060405162461bcd60e51b81526004016108ed90613841565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b8906120c99033906004016130af565b60206040518083038186803b1580156120e157600080fd5b505afa1580156120f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121199190612f94565b806121bd57506006546040517f0c68ba21000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b031690630c68ba219061216d9033906004016130af565b60206040518083038186803b15801561218557600080fd5b505afa158015612199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bd9190612f94565b6121d95760405162461bcd60e51b81526004016108ed90613559565b6121e1611882565b600c81905560405133907fe2492e003bbe8afa53088b406f0c1cb5d9e280370fc72a74cf116ffd343c4053906109a9908490613131565b600a6020526000908152604090205481565b600b6020526000908152604090205460ff1681565b7f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c81565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b600854829081106122b15760405162461bcd60e51b81526004016108ed906132e3565b600260005414156122d45760405162461bcd60e51b81526004016108ed9061397e565b60026000556122e1611865565b156122fe5760405162461bcd60e51b81526004016108ed906134c5565b60006008848154811061230d57fe5b6000918252602080832087845260098252604080852033865290925292206005909102909101915061233e85611540565b8054156124c55760006123738260010154610e3f64e8d4a51000610e398760030154876000015461285c90919063ffffffff16565b905080156124c357600483015460009060ff16801561239c57506007546001600160a01b031615155b1561240357600754604080517f05e97bc60000000000000000000000000000000000000000000000000000000081529051612400926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b158015610ed257600080fd5b90505b61241133610fc284846128c8565b5080156124b157600754600090612431906001600160a01b0316836128f0565b6007546040517f282d3fdf0000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063282d3fdf9061247d90339085906004016130c3565b600060405180830381600087803b15801561249757600080fd5b505af11580156124ab573d6000803e3d6000fd5b50505050505b6013546124be90836127a4565b601355505b505b83801561265a5782546040517f70a082310000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906370a08231906125159030906004016130af565b60206040518083038186803b15801561252d57600080fd5b505afa158015612541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125659190612fc8565b845490915061257f906001600160a01b0316333089612be9565b83546040517f70a082310000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906370a08231906125c89030906004016130af565b60206040518083038186803b1580156125e057600080fd5b505afa1580156125f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126189190612fc8565b905061262481836128c8565b85546011549194506001600160a01b0391821691161415612649576126493384612c10565b835461265590846127a4565b845550505b600383015482546126759164e8d4a5100091610e399161285c565b600183018190558254604051889233927f7162984403f6c73c8639375d45a9187dfd04602231bd8e587c415718b5f7e5f9926126b392879291613a33565b60405180910390a35050600160005550505050565b6006546201000090046001600160a01b031690565b6010546001600160a01b031681565b3390565b6001600160a01b0383166127165760405162461bcd60e51b81526004016108ed906137ad565b6001600160a01b03821661273c5760405162461bcd60e51b81526004016108ed9061324f565b6001600160a01b0380841660008181526002602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590612797908590613131565b60405180910390a3505050565b6000828201838110156127c95760405162461bcd60e51b81526004016108ed906132ac565b9392505050565b6127d8611865565b6127f45760405162461bcd60e51b81526004016108ed90613218565b600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6128456126ec565b60405161285291906130af565b60405180910390a1565b60008261286b57506000610a8c565b8282028284828161287857fe5b04146127c95760405162461bcd60e51b81526004016108ed906134fc565b60008082116128b75760405162461bcd60e51b81526004016108ed9061348e565b8183816128c057fe5b049392505050565b6000828211156128ea5760405162461bcd60e51b81526004016108ed906133fa565b50900390565b600047818184116129015783612903565b815b90508015612915576129158582612cc4565b949350505050565b6001600160a01b0382166129435760405162461bcd60e51b81526004016108ed90613639565b61294f82600083612aa0565b61298c81604051806060016040528060228152602001613aaa602291396001600160a01b0385166000908152600160205260409020549190612bbd565b6001600160a01b0383166000908152600160205260409020556003546129b290826128c8565b6003556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906129f3908590613131565b60405180910390a35050565b612aa08363a9059cbb60e01b8484604051602401612a1e9291906130c3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612d51565b505050565b60008060088381548110612ab557fe5b9060005260206000209060050201905043816002015410612ae85760405162461bcd60e51b81526004016108ed906138fb565b6000612b0b8260020154600f54431015612b025743612b06565b600f545b612de0565b600d5490915015612b3c57612b39600d54610e398460010154610fab600c548661285c90919063ffffffff16565b92505b5050919050565b612b4b611865565b15612b685760405162461bcd60e51b81526004016108ed906134c5565b600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586128456126ec565b60008184841115612be15760405162461bcd60e51b81526004016108ed919061316a565b505050900390565b612c0a846323b872dd60e01b858585604051602401612a1e939291906130dc565b50505050565b6001600160a01b038216612c365760405162461bcd60e51b81526004016108ed906139b5565b612c4260008383612aa0565b600354612c4f90826127a4565b6003556001600160a01b038216600090815260016020526040902054612c7590826127a4565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906129f3908590613131565b604080516000808252602082019092526001600160a01b038416908390604051612cee9190613093565b60006040518083038185875af1925050503d8060008114612d2b576040519150601f19603f3d011682016040523d82523d6000602084013e612d30565b606091505b5050905080612aa05760405162461bcd60e51b81526004016108ed90613696565b6060612da6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612dec9092919063ffffffff16565b805190915015612aa05780806020019051810190612dc49190612f94565b612aa05760405162461bcd60e51b81526004016108ed9061389e565b60006127c982846128c8565b6060612915848460008585612e0085612e96565b612e1c5760405162461bcd60e51b81526004016108ed9061380a565b60006060866001600160a01b03168587604051612e399190613093565b60006040518083038185875af1925050503d8060008114612e76576040519150601f19603f3d011682016040523d82523d6000602084013e612e7b565b606091505b5091509150612e8b828286612e9c565b979650505050505050565b3b151590565b60608315612eab5750816127c9565b825115612ebb5782518084602001fd5b8160405162461bcd60e51b81526004016108ed919061316a565b600060208284031215612ee6578081fd5b81356127c981613a83565b60008060408385031215612f03578081fd5b8235612f0e81613a83565b91506020830135612f1e81613a83565b809150509250929050565b600080600060608486031215612f3d578081fd5b8335612f4881613a83565b92506020840135612f5881613a83565b929592945050506040919091013590565b60008060408385031215612f7b578182fd5b8235612f8681613a83565b946020939093013593505050565b600060208284031215612fa5578081fd5b81516127c981613a9b565b600060208284031215612fc1578081fd5b5035919050565b600060208284031215612fd9578081fd5b5051919050565b60008060408385031215612ff2578182fd5b823591506020830135612f1e81613a83565b600080600060608486031215613018578283fd5b83359250602084013561302a81613a83565b9150604084013561303a81613a9b565b809150509250925092565b60008060408385031215613057578182fd5b50508035926020909101359150565b60008060006060848603121561307a578283fd5b8335925060208401359150604084013561303a81613a9b565b600082516130a5818460208701613a57565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b901515815260200190565b90815260200190565b6001600160a01b039590951685526020850193909352604084019190915260608301521515608082015260a00190565b6000602082528251806020840152613189816040850160208701613a57565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526028908201527f5374616b696e675265776172643a3a6e6f6e4475706c6963617465643a20447560408201527f706c696361746564000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526025908201527f5374616b696e675265776172643a3a76616c69646174655069643a204e6f742060408201527f6578697374000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5374616b696e675265776172643a3a6e6f6e4475706c6963617465643a20447560408201527f706c6963617465642072657761726420616e64206c7000000000000000000000606082015260800190565b6020808252602f908201527f436f72655265663a3a6f6e6c79476f7665726e6f723a2043616c6c657220697360408201527f206e6f74206120676f7665726e6f720000000000000000000000000000000000606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526036908201527f5374616b696e67526577617264733a3a7472616e7366657246726f6d3a204e6f60408201527f7420737570706f7274207472616e7366657246726f6d00000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526045908201527f436f72655265663a3a6f6e6c79477561726469616e4f72476f7665726e6f723a60408201527f2043616c6c6572206973206e6f74206120677561726469616e206f7220676f7660608201527f65726e6f72000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526021908201527f5374616b696e675265776172643a3a77697468647261773a204e6f7420676f6f60408201527f6400000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20457468207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526027908201527f5374616b696e675265776172643a3a616464506f6f6c3a20457863656564206560408201527f6e64626c6f636b00000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f5374616b696e675265776172643a3a757064617465456e64426c6f636b3a204c60408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602e908201527f5374616b696e67526577617264733a3a7472616e736665723a204e6f7420737560408201527f70706f7274207472616e73666572000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526057908201527f5374616b696e675265776172643a3a676574546f6b656e5265776172643a4c6160408201527f7374526577617264426c6f636b204d757374206c6974746c65207468616e207460608201527f68652063757272656e7420626c6f636b206e756d626572000000000000000000608082015260a00190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b9283526001600160a01b039190911660208301521515604082015260600190565b918252602082015260400190565b92835260208301919091521515604082015260600190565b9283526020830191909152604082015260600190565b60ff91909116815260200190565b60005b83811015613a72578181015183820152602001613a5a565b83811115612c0a5750506000910152565b6001600160a01b0381168114613a9857600080fd5b50565b8015158114613a9857600080fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122029fb52ca7e079991de5a736dc3dcf8d1737f7b1d3c9447c61b2b2f17fdf5d53164736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106102c95760003560e01c80635312ea8e1161017957806395d89b41116100d6578063cbd258b51161008a578063e2bbb15811610064578063e2bbb15814610745578063f2f4eb2614610765578063f7c618c11461077a576102d0565b8063cbd258b5146106f0578063dc22486314610710578063dd62ed3e14610725576102d0565b8063a9059cbb116100bb578063a9059cbb14610690578063ae0e597a146106b0578063c8116585146106d0576102d0565b806395d89b411461065b578063a457c2d714610670576102d0565b806370a082311161012d578063800096301161011257806380009630146105f85780638456cb591461061857806393f1a40b1461062d576102d0565b806370a08231146105b85780637abceffd146105d8576102d0565b80635c975abb1161015e5780635c975abb1461057957806361a548e31461058e578063630b5ba1146105a3576102d0565b80635312ea8e146105445780635aca5e9314610564576102d0565b806323b872dd11610227578063441a3e70116101db57806348cd4cb1116101c057806348cd4cb1146104ef57806348e43af41461050457806351eb05a614610524576102d0565b8063441a3e70146104af57806346ca6bea146104cf576102d0565b8063395093511161020c57806339509351146104655780633f4ba83a146104855780634198709a1461049a576102d0565b806323b872dd14610423578063313ce56714610443576102d0565b80631526fe271161027e57806318160ddd1161026357806318160ddd146103cc5780631eccdf07146103e15780632124ca4414610403576102d0565b80631526fe271461038657806317caf6f1146103b7576102d0565b8063081e3eda116102af578063081e3eda14610322578063083c632314610344578063095ea7b314610359576102d0565b80626f0231146102d557806306fdde03146102f7576102d0565b366102d057005b600080fd5b3480156102e157600080fd5b506102f56102f0366004612fb0565b61078f565b005b34801561030357600080fd5b5061030c6109b4565b604051610319919061316a565b60405180910390f35b34801561032e57600080fd5b50610337610a68565b6040516103199190613131565b34801561035057600080fd5b50610337610a6e565b34801561036557600080fd5b50610379610374366004612f69565b610a74565b6040516103199190613126565b34801561039257600080fd5b506103a66103a1366004612fb0565b610a92565b60405161031995949392919061313a565b3480156103c357600080fd5b50610337610add565b3480156103d857600080fd5b50610337610ae3565b3480156103ed57600080fd5b506103f6610ae9565b60405161031991906130af565b34801561040f57600080fd5b506102f561041e366004612ed5565b610af8565b34801561042f57600080fd5b5061037961043e366004612f29565b610c17565b34801561044f57600080fd5b50610458610c31565b6040516103199190613a49565b34801561047157600080fd5b50610379610480366004612f69565b610c3a565b34801561049157600080fd5b506102f5610c8d565b3480156104a657600080fd5b50610337610d51565b3480156104bb57600080fd5b506102f56104ca366004613045565b610d57565b3480156104db57600080fd5b506102f56104ea366004613066565b611134565b3480156104fb57600080fd5b5061033761139a565b34801561051057600080fd5b5061033761051f366004612fe0565b6113a0565b34801561053057600080fd5b506102f561053f366004612fb0565b611540565b34801561055057600080fd5b506102f561055f366004612fb0565b611742565b34801561057057600080fd5b50610337611847565b34801561058557600080fd5b50610379611865565b34801561059a57600080fd5b506103f6611873565b3480156105af57600080fd5b506102f5611882565b3480156105c457600080fd5b506103376105d3366004612ed5565b6118a1565b3480156105e457600080fd5b506102f56105f3366004613004565b6118bc565b34801561060457600080fd5b506102f5610613366004612ed5565b611ccc565b34801561062457600080fd5b506102f5611df0565b34801561063957600080fd5b5061064d610648366004612fe0565b611f56565b604051610319929190613a0d565b34801561066757600080fd5b5061030c611f7a565b34801561067c57600080fd5b5061037961068b366004612f69565b611ff9565b34801561069c57600080fd5b506103796106ab366004612f69565b612061565b3480156106bc57600080fd5b506102f56106cb366004612fb0565b61207b565b3480156106dc57600080fd5b506103376106eb366004612ed5565b612218565b3480156106fc57600080fd5b5061037961070b366004612ed5565b61222a565b34801561071c57600080fd5b5061033761223f565b34801561073157600080fd5b50610337610740366004612ef1565b612263565b34801561075157600080fd5b506102f5610760366004613045565b61228e565b34801561077157600080fd5b506103f66126c8565b34801561078657600080fd5b506103f66126dd565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b8906107dd9033906004016130af565b60206040518083038186803b1580156107f557600080fd5b505afa158015610809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082d9190612f94565b806108d157506006546040517f0c68ba21000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b031690630c68ba21906108819033906004016130af565b60206040518083038186803b15801561089957600080fd5b505afa1580156108ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d19190612f94565b6108f65760405162461bcd60e51b81526004016108ed90613559565b60405180910390fd5b600e5481116109175760405162461bcd60e51b81526004016108ed90613750565b60005b600854811015610969576008818154811061093157fe5b90600052602060002090600502016002015482116109615760405162461bcd60e51b81526004016108ed90613750565b60010161091a565b50610972611882565b600f81905560405133907f316ee89ca026e5355cff2b64939ee0e5af49bde19b755b42bbde0f5bea039825906109a9908490613131565b60405180910390a250565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a5e5780601f10610a3357610100808354040283529160200191610a5e565b820191906000526020600020905b815481529060010190602001808311610a4157829003601f168201915b5050505050905090565b60085490565b600f5481565b6000610a88610a816126ec565b84846126f0565b5060015b92915050565b60088181548110610a9f57fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff1685565b600d5481565b60035490565b6007546001600160a01b031681565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b890610b469033906004016130af565b60206040518083038186803b158015610b5e57600080fd5b505afa158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b969190612f94565b610bb25760405162461bcd60e51b81526004016108ed9061339d565b600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831617905560405133907fedd017b4981fb4d0d4df1c48baed994ce8b4dc47ba89a2010ce592b7df5c6dc4906109a99084906130af565b600060405162461bcd60e51b81526004016108ed90613431565b60065460ff1690565b6000610a88610c476126ec565b84610c888560026000610c586126ec565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906127a4565b6126f0565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b890610cdb9033906004016130af565b60206040518083038186803b158015610cf357600080fd5b505afa158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2b9190612f94565b610d475760405162461bcd60e51b81526004016108ed9061339d565b610d4f6127d0565b565b600c5481565b60085482908110610d7a5760405162461bcd60e51b81526004016108ed906132e3565b60026000541415610d9d5760405162461bcd60e51b81526004016108ed9061397e565b600260009081556008805485908110610db257fe5b600091825260208083208784526009825260408085203386529092529220805460059092029092019250841115610dfb5760405162461bcd60e51b81526004016108ed906135dc565b610e0485611540565b80541561107b576000610e458260010154610e3f64e8d4a51000610e398760030154876000015461285c90919063ffffffff16565b90612896565b906128c8565b9050801561107957600483015460009060ff168015610e6e57506007546001600160a01b031615155b15610fb457600754604080517f05e97bc60000000000000000000000000000000000000000000000000000000081529051610fb1926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b158015610ed257600080fd5b505afa158015610ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0a9190612fc8565b600754604080517f05e97bc60000000000000000000000000000000000000000000000000000000081529051610fab926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b158015610f6957600080fd5b505afa158015610f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa19190612fc8565b8590600101612896565b9061285c565b90505b610fc733610fc284846128c8565b6128f0565b50801561106757600754600090610fe7906001600160a01b0316836128f0565b6007546040517f282d3fdf0000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063282d3fdf9061103390339085906004016130c3565b600060405180830381600087803b15801561104d57600080fd5b505af1158015611061573d6000803e3d6000fd5b50505050505b60135461107490836127a4565b601355505b505b83156110c757805461108d90856128c8565b815581546011546001600160a01b03908116911614156110b1576110b1338561291d565b81546110c7906001600160a01b031633866129ff565b600382015481546110e29164e8d4a5100091610e399161285c565b600182018190558154604051879233927fe08737ac48a1dab4b1a46c7dc9398bd5bfc6d7ad6fabb7cd8caa254de14def3592611120928a9291613a33565b60405180910390a350506001600055505050565b600854839081106111575760405162461bcd60e51b81526004016108ed906132e3565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b8906111a59033906004016130af565b60206040518083038186803b1580156111bd57600080fd5b505afa1580156111d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f59190612f94565b8061129957506006546040517f0c68ba21000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b031690630c68ba21906112499033906004016130af565b60206040518083038186803b15801561126157600080fd5b505afa158015611275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112999190612f94565b6112b55760405162461bcd60e51b81526004016108ed90613559565b6112bd611882565b6112fa836112f4600887815481106112d157fe5b906000526020600020906005020160010154600d546128c890919063ffffffff16565b906127a4565b600d81905550826008858154811061130e57fe5b906000526020600020906005020160010181905550816008858154811061133157fe5b906000526020600020906005020160040160006101000a81548160ff0219169083151502179055507f8f987a9b62724ae68030752859382563c5fd80a0c4f9ba7c067d4a9e50da652284848460405161138c93929190613a1b565b60405180910390a150505050565b600e5481565b600854600090839081106113c65760405162461bcd60e51b81526004016108ed906132e3565b6000600885815481106113d557fe5b600091825260208083208884526009825260408085206001600160a01b038a811687529352842060059390930201600381015481546011549296509394909390929081169116146114bd5783546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906370a08231906114689030906004016130af565b60206040518083038186803b15801561148057600080fd5b505afa158015611494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b89190612fc8565b6114c5565b6114c5610ae3565b90508360020154431180156114d957508015155b1561150c5760006114e989612aa5565b905061150861150183610e398464e8d4a5100061285c565b84906127a4565b9250505b6115348360010154610e3f64e8d4a51000610e3986886000015461285c90919063ffffffff16565b98975050505050505050565b600854819081106115635760405162461bcd60e51b81526004016108ed906132e3565b60006008838154811061157257fe5b9060005260206000209060050201905080600201544311611593575061173e565b600f548160020154106115a6575061173e565b80546011546000916001600160a01b0391821691161461165d5781546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906370a08231906116089030906004016130af565b60206040518083038186803b15801561162057600080fd5b505afa158015611634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116589190612fc8565b611665565b611665610ae3565b90506000600f54431015611679574361167d565b600f545b905081158061168e57506001830154155b156116a2576002909201919091555061173e565b60006116ad86612aa5565b90506116d06116c584610e398464e8d4a5100061285c565b6003860154906127a4565b6003850155600284018290556012546116e990826127a4565b601255835460038501546040517f50a1a2d4fcb1c08863a0b14fcc7d9d728e2b21d8d7588b9cfa3991efe8112ee792611731926001600160a01b039091169185908890613100565b60405180910390a1505050505b5050565b600854819081106117655760405162461bcd60e51b81526004016108ed906132e3565b600260005414156117885760405162461bcd60e51b81526004016108ed9061397e565b60026000908155600880548490811061179d57fe5b600091825260208083208684526009825260408085203386529092529083208054848255600182019490945560059092020180546011549194509192916001600160a01b03918216911614156117f7576117f7338261291d565b825461180d906001600160a01b031633836129ff565b84336001600160a01b03167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae0595836040516111209190613131565b60006118606013546012546128c890919063ffffffff16565b905090565b600654610100900460ff1690565b6011546001600160a01b031681565b60085460005b8181101561173e5761189981611540565b600101611888565b6001600160a01b031660009081526001602052604090205490565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b89061190a9033906004016130af565b60206040518083038186803b15801561192257600080fd5b505afa158015611936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195a9190612f94565b806119fe57506006546040517f0c68ba21000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b031690630c68ba21906119ae9033906004016130af565b60206040518083038186803b1580156119c657600080fd5b505afa1580156119da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fe9190612f94565b611a1a5760405162461bcd60e51b81526004016108ed90613559565b6001600160a01b0382166000908152600b6020526040902054829060ff1615611a555760405162461bcd60e51b81526004016108ed906131bb565b6010546001600160a01b038281169116141580611a7f57506011546001600160a01b038281169116145b611a9b5760405162461bcd60e51b81526004016108ed90613340565b600f544310611abc5760405162461bcd60e51b81526004016108ed906136f3565b611ac4611882565b6000600e544311611ad757600e54611ad9565b435b600d54909150611ae990866127a4565b600d556001600160a01b038481166000818152600b60209081526040808320805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009182168117909255825160a0810184529586529285018b8152918501878152606086018581528a151560808801908152600880548086018255975296517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3600590970296870180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919099161790975591517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee485015590517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee584015593517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee683015591517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee79091018054909216901515179055611c6a610a68565b6001600160a01b0386166000908152600a60205260409081902092909103909155517fdb1bd39f8335c9b10acbc6afb000d15247c2ad3d0aa1e481a6b44594e7cc1d6590611cbd908790879087906139ec565b60405180910390a15050505050565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b890611d1a9033906004016130af565b60206040518083038186803b158015611d3257600080fd5b505afa158015611d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6a9190612f94565b611d865760405162461bcd60e51b81526004016108ed9061339d565b600680547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038416908102919091179091556040517fad9400e618eb1344fde53db22397a1b82c765527ecbba3a5c86bcac15090828b90600090a250565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b890611e3e9033906004016130af565b60206040518083038186803b158015611e5657600080fd5b505afa158015611e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8e9190612f94565b80611f3257506006546040517f0c68ba21000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b031690630c68ba2190611ee29033906004016130af565b60206040518083038186803b158015611efa57600080fd5b505afa158015611f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f329190612f94565b611f4e5760405162461bcd60e51b81526004016108ed90613559565b610d4f612b43565b60096020908152600092835260408084209091529082529020805460019091015482565b60058054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a5e5780601f10610a3357610100808354040283529160200191610a5e565b6000610a886120066126ec565b84610c8885604051806060016040528060258152602001613acc60259139600260006120306126ec565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190612bbd565b600060405162461bcd60e51b81526004016108ed90613841565b6006546040517fe43581b8000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063e43581b8906120c99033906004016130af565b60206040518083038186803b1580156120e157600080fd5b505afa1580156120f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121199190612f94565b806121bd57506006546040517f0c68ba21000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b031690630c68ba219061216d9033906004016130af565b60206040518083038186803b15801561218557600080fd5b505afa158015612199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bd9190612f94565b6121d95760405162461bcd60e51b81526004016108ed90613559565b6121e1611882565b600c81905560405133907fe2492e003bbe8afa53088b406f0c1cb5d9e280370fc72a74cf116ffd343c4053906109a9908490613131565b600a6020526000908152604090205481565b600b6020526000908152604090205460ff1681565b7f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c81565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b600854829081106122b15760405162461bcd60e51b81526004016108ed906132e3565b600260005414156122d45760405162461bcd60e51b81526004016108ed9061397e565b60026000556122e1611865565b156122fe5760405162461bcd60e51b81526004016108ed906134c5565b60006008848154811061230d57fe5b6000918252602080832087845260098252604080852033865290925292206005909102909101915061233e85611540565b8054156124c55760006123738260010154610e3f64e8d4a51000610e398760030154876000015461285c90919063ffffffff16565b905080156124c357600483015460009060ff16801561239c57506007546001600160a01b031615155b1561240357600754604080517f05e97bc60000000000000000000000000000000000000000000000000000000081529051612400926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b158015610ed257600080fd5b90505b61241133610fc284846128c8565b5080156124b157600754600090612431906001600160a01b0316836128f0565b6007546040517f282d3fdf0000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063282d3fdf9061247d90339085906004016130c3565b600060405180830381600087803b15801561249757600080fd5b505af11580156124ab573d6000803e3d6000fd5b50505050505b6013546124be90836127a4565b601355505b505b83801561265a5782546040517f70a082310000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906370a08231906125159030906004016130af565b60206040518083038186803b15801561252d57600080fd5b505afa158015612541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125659190612fc8565b845490915061257f906001600160a01b0316333089612be9565b83546040517f70a082310000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906370a08231906125c89030906004016130af565b60206040518083038186803b1580156125e057600080fd5b505afa1580156125f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126189190612fc8565b905061262481836128c8565b85546011549194506001600160a01b0391821691161415612649576126493384612c10565b835461265590846127a4565b845550505b600383015482546126759164e8d4a5100091610e399161285c565b600183018190558254604051889233927f7162984403f6c73c8639375d45a9187dfd04602231bd8e587c415718b5f7e5f9926126b392879291613a33565b60405180910390a35050600160005550505050565b6006546201000090046001600160a01b031690565b6010546001600160a01b031681565b3390565b6001600160a01b0383166127165760405162461bcd60e51b81526004016108ed906137ad565b6001600160a01b03821661273c5760405162461bcd60e51b81526004016108ed9061324f565b6001600160a01b0380841660008181526002602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590612797908590613131565b60405180910390a3505050565b6000828201838110156127c95760405162461bcd60e51b81526004016108ed906132ac565b9392505050565b6127d8611865565b6127f45760405162461bcd60e51b81526004016108ed90613218565b600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6128456126ec565b60405161285291906130af565b60405180910390a1565b60008261286b57506000610a8c565b8282028284828161287857fe5b04146127c95760405162461bcd60e51b81526004016108ed906134fc565b60008082116128b75760405162461bcd60e51b81526004016108ed9061348e565b8183816128c057fe5b049392505050565b6000828211156128ea5760405162461bcd60e51b81526004016108ed906133fa565b50900390565b600047818184116129015783612903565b815b90508015612915576129158582612cc4565b949350505050565b6001600160a01b0382166129435760405162461bcd60e51b81526004016108ed90613639565b61294f82600083612aa0565b61298c81604051806060016040528060228152602001613aaa602291396001600160a01b0385166000908152600160205260409020549190612bbd565b6001600160a01b0383166000908152600160205260409020556003546129b290826128c8565b6003556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906129f3908590613131565b60405180910390a35050565b612aa08363a9059cbb60e01b8484604051602401612a1e9291906130c3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612d51565b505050565b60008060088381548110612ab557fe5b9060005260206000209060050201905043816002015410612ae85760405162461bcd60e51b81526004016108ed906138fb565b6000612b0b8260020154600f54431015612b025743612b06565b600f545b612de0565b600d5490915015612b3c57612b39600d54610e398460010154610fab600c548661285c90919063ffffffff16565b92505b5050919050565b612b4b611865565b15612b685760405162461bcd60e51b81526004016108ed906134c5565b600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586128456126ec565b60008184841115612be15760405162461bcd60e51b81526004016108ed919061316a565b505050900390565b612c0a846323b872dd60e01b858585604051602401612a1e939291906130dc565b50505050565b6001600160a01b038216612c365760405162461bcd60e51b81526004016108ed906139b5565b612c4260008383612aa0565b600354612c4f90826127a4565b6003556001600160a01b038216600090815260016020526040902054612c7590826127a4565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906129f3908590613131565b604080516000808252602082019092526001600160a01b038416908390604051612cee9190613093565b60006040518083038185875af1925050503d8060008114612d2b576040519150601f19603f3d011682016040523d82523d6000602084013e612d30565b606091505b5050905080612aa05760405162461bcd60e51b81526004016108ed90613696565b6060612da6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612dec9092919063ffffffff16565b805190915015612aa05780806020019051810190612dc49190612f94565b612aa05760405162461bcd60e51b81526004016108ed9061389e565b60006127c982846128c8565b6060612915848460008585612e0085612e96565b612e1c5760405162461bcd60e51b81526004016108ed9061380a565b60006060866001600160a01b03168587604051612e399190613093565b60006040518083038185875af1925050503d8060008114612e76576040519150601f19603f3d011682016040523d82523d6000602084013e612e7b565b606091505b5091509150612e8b828286612e9c565b979650505050505050565b3b151590565b60608315612eab5750816127c9565b825115612ebb5782518084602001fd5b8160405162461bcd60e51b81526004016108ed919061316a565b600060208284031215612ee6578081fd5b81356127c981613a83565b60008060408385031215612f03578081fd5b8235612f0e81613a83565b91506020830135612f1e81613a83565b809150509250929050565b600080600060608486031215612f3d578081fd5b8335612f4881613a83565b92506020840135612f5881613a83565b929592945050506040919091013590565b60008060408385031215612f7b578182fd5b8235612f8681613a83565b946020939093013593505050565b600060208284031215612fa5578081fd5b81516127c981613a9b565b600060208284031215612fc1578081fd5b5035919050565b600060208284031215612fd9578081fd5b5051919050565b60008060408385031215612ff2578182fd5b823591506020830135612f1e81613a83565b600080600060608486031215613018578283fd5b83359250602084013561302a81613a83565b9150604084013561303a81613a9b565b809150509250925092565b60008060408385031215613057578182fd5b50508035926020909101359150565b60008060006060848603121561307a578283fd5b8335925060208401359150604084013561303a81613a9b565b600082516130a5818460208701613a57565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b901515815260200190565b90815260200190565b6001600160a01b039590951685526020850193909352604084019190915260608301521515608082015260a00190565b6000602082528251806020840152613189816040850160208701613a57565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526028908201527f5374616b696e675265776172643a3a6e6f6e4475706c6963617465643a20447560408201527f706c696361746564000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526025908201527f5374616b696e675265776172643a3a76616c69646174655069643a204e6f742060408201527f6578697374000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5374616b696e675265776172643a3a6e6f6e4475706c6963617465643a20447560408201527f706c6963617465642072657761726420616e64206c7000000000000000000000606082015260800190565b6020808252602f908201527f436f72655265663a3a6f6e6c79476f7665726e6f723a2043616c6c657220697360408201527f206e6f74206120676f7665726e6f720000000000000000000000000000000000606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526036908201527f5374616b696e67526577617264733a3a7472616e7366657246726f6d3a204e6f60408201527f7420737570706f7274207472616e7366657246726f6d00000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526045908201527f436f72655265663a3a6f6e6c79477561726469616e4f72476f7665726e6f723a60408201527f2043616c6c6572206973206e6f74206120677561726469616e206f7220676f7660608201527f65726e6f72000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526021908201527f5374616b696e675265776172643a3a77697468647261773a204e6f7420676f6f60408201527f6400000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20457468207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526027908201527f5374616b696e675265776172643a3a616464506f6f6c3a20457863656564206560408201527f6e64626c6f636b00000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f5374616b696e675265776172643a3a757064617465456e64426c6f636b3a204c60408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602e908201527f5374616b696e67526577617264733a3a7472616e736665723a204e6f7420737560408201527f70706f7274207472616e73666572000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526057908201527f5374616b696e675265776172643a3a676574546f6b656e5265776172643a4c6160408201527f7374526577617264426c6f636b204d757374206c6974746c65207468616e207460608201527f68652063757272656e7420626c6f636b206e756d626572000000000000000000608082015260a00190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b9283526001600160a01b039190911660208301521515604082015260600190565b918252602082015260400190565b92835260208301919091521515604082015260600190565b9283526020830191909152604082015260600190565b60ff91909116815260200190565b60005b83811015613a72578181015183820152602001613a5a565b83811115612c0a5750506000910152565b6001600160a01b0381168114613a9857600080fd5b50565b8015158114613a9857600080fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122029fb52ca7e079991de5a736dc3dcf8d1737f7b1d3c9447c61b2b2f17fdf5d53164736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2455,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 764,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 770,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 772,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 774,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 776,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 778,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "_decimals",
        "offset": 0,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 2370,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "_paused",
        "offset": 1,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 11642,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "_core",
        "offset": 2,
        "slot": "6",
        "type": "t_contract(ICore)11634"
      },
      {
        "astId": 2758,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "vestingMaster",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IVestingMaster)11432"
      },
      {
        "astId": 2762,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "poolInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(PoolInfo)11199_storage)dyn_storage"
      },
      {
        "astId": 2769,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "userInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)11188_storage))"
      },
      {
        "astId": 2774,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "pair2Pid",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2779,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "poolExistence",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_contract(IERC20)1328,t_bool)"
      },
      {
        "astId": 2782,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "tokenPerBlock",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2786,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2789,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "startBlock",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2792,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "endBlock",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2795,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "rewardToken",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IERC20)1328"
      },
      {
        "astId": 2798,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "upToken",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IERC20)1328"
      },
      {
        "astId": 2800,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "_accShareReward",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2802,
        "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
        "label": "_accHarvestedReward",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)11199_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)11199_storage",
        "encoding": "dynamic_array",
        "label": "struct IStakingRewards.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICore)11634": {
        "encoding": "inplace",
        "label": "contract ICore",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1328": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IVestingMaster)11432": {
        "encoding": "inplace",
        "label": "contract IVestingMaster",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserInfo)11188_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStakingRewards.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)11188_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)1328,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1328",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)11188_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IStakingRewards.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)11188_storage)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PoolInfo)11199_storage": {
        "encoding": "inplace",
        "label": "struct IStakingRewards.PoolInfo",
        "members": [
          {
            "astId": 11190,
            "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1328"
          },
          {
            "astId": 11192,
            "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11194,
            "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11196,
            "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
            "label": "accTokenPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11198,
            "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
            "label": "locked",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)11188_storage": {
        "encoding": "inplace",
        "label": "struct IStakingRewards.UserInfo",
        "members": [
          {
            "astId": 11185,
            "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11187,
            "contract": "contracts/StakingRewardsBNB.sol:StakingRewardsBNB",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}