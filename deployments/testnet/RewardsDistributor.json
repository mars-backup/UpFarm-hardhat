{
  "address": "0xa84400261e8563BE19633B7477fDEb0634bAC5DA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "core_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wbnb",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_core",
          "type": "address"
        }
      ],
      "name": "CoreUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsAmt",
          "type": "uint256"
        }
      ],
      "name": "DistributeRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "name": "SetBeneficiaries",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MASTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "beneficiaryAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "beneficiaryRewardFactors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "distributeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_beneficiaryAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_beneficiaryRewardFactors",
          "type": "uint256[]"
        }
      ],
      "name": "setBeneficiaries",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "core_",
          "type": "address"
        }
      ],
      "name": "setCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wbnbAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5e462c5fb89e51ab0ad0c12f67e3dcd84a7fbba4a7470e416b6aebd4c7ecd646",
  "receipt": {
    "to": null,
    "from": "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
    "contractAddress": "0xa84400261e8563BE19633B7477fDEb0634bAC5DA",
    "transactionIndex": 0,
    "gasUsed": "1550801",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x98db84127a795070780d8397f516fb9116298bc6f7b7572b9a7ef6c99f95901c",
    "transactionHash": "0x5e462c5fb89e51ab0ad0c12f67e3dcd84a7fbba4a7470e416b6aebd4c7ecd646",
    "logs": [],
    "blockNumber": 16505584,
    "cumulativeGasUsed": "1550801",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x40fc3759Ccc4E466650891a91F34Bdd6129094D6",
    "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd"
  ],
  "solcInputHash": "db359f053acb6049cd6f2437339b20c0",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"core_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbnb\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmt\",\"type\":\"uint256\"}],\"name\":\"DistributeRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"SetBeneficiaries\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MASTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaryAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaryRewardFactors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiaryAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_beneficiaryRewardFactors\",\"type\":\"uint256[]\"}],\"name\":\"setBeneficiaries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"core_\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RewardsDistributor.sol\":\"RewardsDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"contracts/RewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IRewardsDistributor.sol\\\";\\nimport \\\"./refs/CoreRef.sol\\\";\\nimport \\\"./interfaces/IWBNB.sol\\\";\\nimport \\\"./libs/TransferHelper.sol\\\";\\n\\ncontract RewardsDistributor is CoreRef, IRewardsDistributor {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable wbnbAddress;\\n    address [] public override beneficiaryAddresses;\\n    uint256 [] public override beneficiaryRewardFactors;\\n\\n    event SetBeneficiaries(\\n        address[],\\n        uint256[]\\n    );\\n\\n    event DistributeRewards(address token, uint256 rewardsAmt);\\n\\n    constructor(\\n        address core_,\\n        address _wbnb\\n    ) public CoreRef(core_) {\\n        wbnbAddress = _wbnb;\\n    }\\n\\n    function setBeneficiaries(\\n        address[] memory _beneficiaryAddresses,\\n        uint256[] memory _beneficiaryRewardFactors\\n    ) external override onlyGovernor {\\n        require(\\n            _beneficiaryAddresses.length == _beneficiaryRewardFactors.length,\\n            \\\"TimelockController: arrays diff length\\\"\\n        );\\n\\n        uint256 rewardFactorsTotal = 0;\\n        for (uint8 i = 0; i < _beneficiaryRewardFactors.length; i++) {\\n            rewardFactorsTotal = rewardFactorsTotal.add(_beneficiaryRewardFactors[i]);\\n        }\\n\\n        require(\\n            rewardFactorsTotal <= 10000,\\n            \\\"TimelockController: rewardFactorsTotal must be max 1000\\\"\\n        );\\n\\n        beneficiaryAddresses = _beneficiaryAddresses;\\n        beneficiaryRewardFactors = _beneficiaryRewardFactors;\\n\\n        emit SetBeneficiaries(beneficiaryAddresses, beneficiaryRewardFactors);\\n    }\\n\\n    function distributeRewards(address token)\\n        external\\n        override\\n        onlyGuardianOrGovernor\\n    {\\n        uint256 rewardsAmt = IERC20(token).balanceOf(address(this));\\n        require(rewardsAmt > 0, \\\"token balance zero\\\");\\n\\n        if (token == wbnbAddress) {\\n            IWBNB(token).withdraw(rewardsAmt);\\n            for (uint8 j = 0; j < beneficiaryAddresses.length; j++) {\\n                uint256 amt = rewardsAmt.mul(beneficiaryRewardFactors[j]).div(10000);\\n                if (amt > 0) {\\n                    TransferHelper.safeTransferETH(beneficiaryAddresses[j], amt);\\n                }\\n            }\\n        } else {\\n            for (uint8 j = 0; j < beneficiaryAddresses.length; j++) {\\n                IERC20(token).safeTransfer(\\n                    beneficiaryAddresses[j],\\n                    rewardsAmt.mul(beneficiaryRewardFactors[j]).div(10000)\\n                );\\n            }\\n        }\\n        emit DistributeRewards(token, rewardsAmt);\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x9d7c6f0fcdde8d33a905d16ca52ad2958d406ec27e6b2cf60dfcab77ed905e17\",\"license\":\"MIT\"},\"contracts/interfaces/ICore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface ICore {\\n    function isGovernor(address _address) external view returns (bool);\\n\\n    function isGuardian(address _address) external view returns (bool);\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\",\"keccak256\":\"0xb93284619fd96863e47f9f6e2b0d007ebb86619cd7eb28dee8313019c25fa412\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRewardsDistributor {\\n    function setBeneficiaries(\\n        address[] memory _beneficiaryAddresses,\\n        uint256[] memory _beneficiaryRewardFactors\\n    ) external;\\n\\n    function distributeRewards(address token) external;\\n\\n    function beneficiaryAddresses(uint256 id) external view returns (address);\\n\\n    function beneficiaryRewardFactors(uint256 id) external view returns (uint256);\\n}\",\"keccak256\":\"0x0fe2047abf90a840cf2d0ab500779cc70bc7ca3a82541e7fc5bb223b68c65a35\",\"license\":\"MIT\"},\"contracts/interfaces/IWBNB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\npragma solidity ^0.6.12;\\ninterface IWBNB is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\",\"keccak256\":\"0xb84fb3a2d9ab809e87a597b70197842a5c0dffb5d4547086f69a3cb2be0335a8\",\"license\":\"MIT\"},\"contracts/libs/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n// Helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: Approve failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: Transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransferFrom: Transfer from failed\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: Eth transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x08a193ea2646222d9800fcfa044eddbc4171933b1daf95ffc93557cabd79a071\",\"license\":\"MIT\"},\"contracts/refs/CoreRef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/ICore.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\nabstract contract CoreRef is Pausable {\\n\\n    event CoreUpdate(address indexed _core);\\n\\n    ICore private _core;\\n\\n    bytes32 public constant MASTER_ROLE = keccak256(\\\"MASTER_ROLE\\\");\\n\\n    constructor(address core_) public {\\n        _core = ICore(core_);\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender),\\n            \\\"CoreRef::onlyGovernor: Caller is not a governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(\\n            _core.isGuardian(msg.sender),\\n            \\\"CoreRef::onlyGuardian: Caller is not a guardian\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardianOrGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender),\\n            \\\"CoreRef::onlyGuardianOrGovernor: Caller is not a guardian or governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMaster() {\\n        require(\\n            _core.hasRole(MASTER_ROLE, msg.sender),\\n            \\\"CoreRef::onlyMaster: Caller is not a master\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        require(\\n            _core.hasRole(role, msg.sender),\\n            \\\"CoreRef::onlyRole: Not permit\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        require(\\n            _core.hasRole(role, address(0)) || _core.hasRole(role, msg.sender),\\n            \\\"CoreRef::onlyRoleOrOpenRole: Not permit\\\"\\n        );\\n        _;\\n    }\\n\\n    function setCore(address core_) external onlyGovernor {\\n        _core = ICore(core_);\\n        emit CoreUpdate(core_);\\n    }\\n\\n    function pause() public onlyGuardianOrGovernor {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyGovernor {\\n        _unpause();\\n    }\\n\\n    function core() public view returns (ICore) {\\n        return _core;\\n    }\\n\\n}\",\"keccak256\":\"0xc22b6ec742313b6b55417326cb37b00a73907bcc1d62c7c717c837a058469ee4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001bb138038062001bb1833981016040819052620000349162000072565b600080546001600160a81b0319166101006001600160a01b0394909416939093029290921790915560601b6001600160601b031916608052620000c9565b6000806040838503121562000085578182fd5b82516200009281620000b0565b6020840151909250620000a581620000b0565b809150509250929050565b6001600160a01b0381168114620000c657600080fd5b50565b60805160601c611ac5620000ec6000398061064d528061099f5250611ac56000f3fe6080604052600436106100c05760003560e01c80635c975abb116100745780638456cb591161004e5780638456cb59146101dd578063dc224863146101f2578063f2f4eb2614610207576100c7565b80635c975abb1461018657806363fe3e3a146101a857806380009630146101bd576100c7565b80631de9d9b6116100a55780631de9d9b6146101245780633f4ba83a1461014457806351ac191914610159576100c7565b8063065dc4c1146100cc578063097bb9e0146100ee576100c7565b366100c757005b600080fd5b3480156100d857600080fd5b506100ec6100e736600461132d565b61021c565b005b3480156100fa57600080fd5b5061010e61010936600461140f565b6103da565b60405161011b9190611475565b60405180910390f35b34801561013057600080fd5b506100ec61013f366004611312565b61040e565b34801561015057600080fd5b506100ec6108a6565b34801561016557600080fd5b5061017961017436600461140f565b610976565b60405161011b9190611566565b34801561019257600080fd5b5061019b610994565b60405161011b919061155b565b3480156101b457600080fd5b5061010e61099d565b3480156101c957600080fd5b506100ec6101d8366004611312565b6109c1565b3480156101e957600080fd5b506100ec610afb565b3480156101fe57600080fd5b50610179610c79565b34801561021357600080fd5b5061010e610c9d565b6000546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610276903390600401611475565b60206040518083038186803b15801561028e57600080fd5b505afa1580156102a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c691906113ef565b6102eb5760405162461bcd60e51b81526004016102e29061168b565b60405180910390fd5b805182511461030c5760405162461bcd60e51b81526004016102e2906117ea565b6000805b82518160ff16101561034f57610345838260ff168151811061032e57fe5b602002602001015183610cbe90919063ffffffff16565b9150600101610310565b506127108111156103725760405162461bcd60e51b81526004016102e2906115f7565b8251610385906001906020860190611163565b5081516103999060029060208501906111ed565b507f1f89e8dd8522e3e61e7aad9a3587de2c4009c4bf3d1b8286752821e5792c6dbf600160026040516103cd9291906114bc565b60405180910390a1505050565b600181815481106103e757fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6000546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610468903390600401611475565b60206040518083038186803b15801561048057600080fd5b505afa158015610494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b891906113ef565b8061056857506000546040517f0c68ba2100000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff1690630c68ba2190610518903390600401611475565b60206040518083038186803b15801561053057600080fd5b505afa158015610544573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056891906113ef565b6105845760405162461bcd60e51b81526004016102e2906118a4565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8316906370a08231906105d9903090600401611475565b60206040518083038186803b1580156105f157600080fd5b505afa158015610605573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106299190611427565b90506000811161064b5760405162461bcd60e51b81526004016102e2906117b3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107c0576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831690632e1a7d4d906106f1908490600401611566565b600060405180830381600087803b15801561070b57600080fd5b505af115801561071f573d6000803e3d6000fd5b5050505060005b60015460ff821610156107ba57600061076e61271061076860028560ff168154811061074e57fe5b906000526020600020015486610cec90919063ffffffff16565b90610d26565b905080156107b1576107b160018360ff168154811061078957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1682610d58565b50600101610726565b50610869565b60005b60015460ff821610156108675761085f60018260ff16815481106107e357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661084161271061076860028660ff168154811061082757fe5b906000526020600020015487610cec90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff86169190610df7565b6001016107c3565b505b7f962bc326c7b063c70721a63687e0e19450155f93c58eca94769746c0cfb02c5d828260405161089a929190611496565b60405180910390a15050565b6000546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610900903390600401611475565b60206040518083038186803b15801561091857600080fd5b505afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095091906113ef565b61096c5760405162461bcd60e51b81526004016102e29061168b565b610974610e98565b565b6002818154811061098357fe5b600091825260209091200154905081565b60005460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610a1b903390600401611475565b60206040518083038186803b158015610a3357600080fd5b505afa158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b91906113ef565b610a875760405162461bcd60e51b81526004016102e29061168b565b600080547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff841690810291909117825560405190917fad9400e618eb1344fde53db22397a1b82c765527ecbba3a5c86bcac15090828b91a250565b6000546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610b55903390600401611475565b60206040518083038186803b158015610b6d57600080fd5b505afa158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba591906113ef565b80610c5557506000546040517f0c68ba2100000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff1690630c68ba2190610c05903390600401611475565b60206040518083038186803b158015610c1d57600080fd5b505afa158015610c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5591906113ef565b610c715760405162461bcd60e51b81526004016102e2906118a4565b610974610f24565b7f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c81565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1690565b600082820183811015610ce35760405162461bcd60e51b81526004016102e290611654565b90505b92915050565b600082610cfb57506000610ce6565b82820282848281610d0857fe5b0414610ce35760405162461bcd60e51b81526004016102e290611847565b6000808211610d475760405162461bcd60e51b81526004016102e290611745565b818381610d5057fe5b049392505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051610d8f9190611459565b60006040518083038185875af1925050503d8060008114610dcc576040519150601f19603f3d011682016040523d82523d6000602084013e610dd1565b606091505b5050905080610df25760405162461bcd60e51b81526004016102e290611927565b505050565b610df28363a9059cbb60e01b8484604051602401610e16929190611496565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610f9d565b610ea0610994565b610ebc5760405162461bcd60e51b81526004016102e2906115c0565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610f0d611039565b604051610f1a9190611475565b60405180910390a1565b610f2c610994565b15610f495760405162461bcd60e51b81526004016102e29061177c565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f0d611039565b6060610fff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661103d9092919063ffffffff16565b805190915015610df2578080602001905181019061101d91906113ef565b610df25760405162461bcd60e51b81526004016102e2906119bb565b3390565b606061104c8484600085611056565b90505b9392505050565b6060824710156110785760405162461bcd60e51b81526004016102e2906116e8565b61108185611124565b61109d5760405162461bcd60e51b81526004016102e290611984565b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516110c79190611459565b60006040518083038185875af1925050503d8060008114611104576040519150601f19603f3d011682016040523d82523d6000602084013e611109565b606091505b509150915061111982828661112a565b979650505050505050565b3b151590565b6060831561113957508161104f565b8251156111495782518084602001fd5b8160405162461bcd60e51b81526004016102e2919061156f565b8280548282559060005260206000209081019282156111dd579160200282015b828111156111dd57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190611183565b506111e9929150611234565b5090565b828054828255906000526020600020908101928215611228579160200282015b8281111561122857825182559160200191906001019061120d565b506111e992915061126b565b5b808211156111e95780547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155600101611235565b5b808211156111e9576000815560010161126c565b803573ffffffffffffffffffffffffffffffffffffffff81168114610ce657600080fd5b600082601f8301126112b4578081fd5b81356112c76112c282611a3f565b611a18565b8181529150602080830190848101818402860182018710156112e857600080fd5b60005b84811015611307578135845292820192908201906001016112eb565b505050505092915050565b600060208284031215611323578081fd5b61104f8383611280565b6000806040838503121561133f578081fd5b823567ffffffffffffffff80821115611356578283fd5b818501915085601f830112611369578283fd5b81356113776112c282611a3f565b80828252602080830192508086018a828387028901011115611397578788fd5b8796505b848710156113c1576113ad8b82611280565b84526001969096019592810192810161139b565b5090965087013593505050808211156113d8578283fd5b506113e5858286016112a4565b9150509250929050565b600060208284031215611400578081fd5b81518015158114610ce3578182fd5b600060208284031215611420578081fd5b5035919050565b600060208284031215611438578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000825161146b818460208701611a5f565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000604082016040835280855480835260608501915086845260209250828420845b82811015611517576115078473ffffffffffffffffffffffffffffffffffffffff84541661143f565b92840192600191820191016114de565b50505083810382850152845480825285845282842091830190845b8181101561154e57835483526001938401939285019201611532565b5090979650505050505050565b901515815260200190565b90815260200190565b600060208252825180602084015261158e816040850160208701611a5f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526037908201527f54696d656c6f636b436f6e74726f6c6c65723a20726577617264466163746f7260408201527f73546f74616c206d757374206265206d61782031303030000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602f908201527f436f72655265663a3a6f6e6c79476f7665726e6f723a2043616c6c657220697360408201527f206e6f74206120676f7665726e6f720000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526012908201527f746f6b656e2062616c616e6365207a65726f0000000000000000000000000000604082015260600190565b60208082526026908201527f54696d656c6f636b436f6e74726f6c6c65723a2061727261797320646966662060408201527f6c656e6774680000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526045908201527f436f72655265663a3a6f6e6c79477561726469616e4f72476f7665726e6f723a60408201527f2043616c6c6572206973206e6f74206120677561726469616e206f7220676f7660608201527f65726e6f72000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20457468207472616e73666572206661696c6564000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60405181810167ffffffffffffffff81118282101715611a3757600080fd5b604052919050565b600067ffffffffffffffff821115611a55578081fd5b5060209081020190565b60005b83811015611a7a578181015183820152602001611a62565b83811115611a89576000848401525b5050505056fea264697066735822122014551dcbf58daf07c015a6479b7c2c98a4231f6eefdc2749f91a85d8f9b4749664736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106100c05760003560e01c80635c975abb116100745780638456cb591161004e5780638456cb59146101dd578063dc224863146101f2578063f2f4eb2614610207576100c7565b80635c975abb1461018657806363fe3e3a146101a857806380009630146101bd576100c7565b80631de9d9b6116100a55780631de9d9b6146101245780633f4ba83a1461014457806351ac191914610159576100c7565b8063065dc4c1146100cc578063097bb9e0146100ee576100c7565b366100c757005b600080fd5b3480156100d857600080fd5b506100ec6100e736600461132d565b61021c565b005b3480156100fa57600080fd5b5061010e61010936600461140f565b6103da565b60405161011b9190611475565b60405180910390f35b34801561013057600080fd5b506100ec61013f366004611312565b61040e565b34801561015057600080fd5b506100ec6108a6565b34801561016557600080fd5b5061017961017436600461140f565b610976565b60405161011b9190611566565b34801561019257600080fd5b5061019b610994565b60405161011b919061155b565b3480156101b457600080fd5b5061010e61099d565b3480156101c957600080fd5b506100ec6101d8366004611312565b6109c1565b3480156101e957600080fd5b506100ec610afb565b3480156101fe57600080fd5b50610179610c79565b34801561021357600080fd5b5061010e610c9d565b6000546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610276903390600401611475565b60206040518083038186803b15801561028e57600080fd5b505afa1580156102a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c691906113ef565b6102eb5760405162461bcd60e51b81526004016102e29061168b565b60405180910390fd5b805182511461030c5760405162461bcd60e51b81526004016102e2906117ea565b6000805b82518160ff16101561034f57610345838260ff168151811061032e57fe5b602002602001015183610cbe90919063ffffffff16565b9150600101610310565b506127108111156103725760405162461bcd60e51b81526004016102e2906115f7565b8251610385906001906020860190611163565b5081516103999060029060208501906111ed565b507f1f89e8dd8522e3e61e7aad9a3587de2c4009c4bf3d1b8286752821e5792c6dbf600160026040516103cd9291906114bc565b60405180910390a1505050565b600181815481106103e757fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6000546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610468903390600401611475565b60206040518083038186803b15801561048057600080fd5b505afa158015610494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b891906113ef565b8061056857506000546040517f0c68ba2100000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff1690630c68ba2190610518903390600401611475565b60206040518083038186803b15801561053057600080fd5b505afa158015610544573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056891906113ef565b6105845760405162461bcd60e51b81526004016102e2906118a4565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8316906370a08231906105d9903090600401611475565b60206040518083038186803b1580156105f157600080fd5b505afa158015610605573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106299190611427565b90506000811161064b5760405162461bcd60e51b81526004016102e2906117b3565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107c0576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831690632e1a7d4d906106f1908490600401611566565b600060405180830381600087803b15801561070b57600080fd5b505af115801561071f573d6000803e3d6000fd5b5050505060005b60015460ff821610156107ba57600061076e61271061076860028560ff168154811061074e57fe5b906000526020600020015486610cec90919063ffffffff16565b90610d26565b905080156107b1576107b160018360ff168154811061078957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1682610d58565b50600101610726565b50610869565b60005b60015460ff821610156108675761085f60018260ff16815481106107e357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661084161271061076860028660ff168154811061082757fe5b906000526020600020015487610cec90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff86169190610df7565b6001016107c3565b505b7f962bc326c7b063c70721a63687e0e19450155f93c58eca94769746c0cfb02c5d828260405161089a929190611496565b60405180910390a15050565b6000546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610900903390600401611475565b60206040518083038186803b15801561091857600080fd5b505afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095091906113ef565b61096c5760405162461bcd60e51b81526004016102e29061168b565b610974610e98565b565b6002818154811061098357fe5b600091825260209091200154905081565b60005460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610a1b903390600401611475565b60206040518083038186803b158015610a3357600080fd5b505afa158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b91906113ef565b610a875760405162461bcd60e51b81526004016102e29061168b565b600080547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff841690810291909117825560405190917fad9400e618eb1344fde53db22397a1b82c765527ecbba3a5c86bcac15090828b91a250565b6000546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610b55903390600401611475565b60206040518083038186803b158015610b6d57600080fd5b505afa158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba591906113ef565b80610c5557506000546040517f0c68ba2100000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff1690630c68ba2190610c05903390600401611475565b60206040518083038186803b158015610c1d57600080fd5b505afa158015610c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5591906113ef565b610c715760405162461bcd60e51b81526004016102e2906118a4565b610974610f24565b7f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c81565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1690565b600082820183811015610ce35760405162461bcd60e51b81526004016102e290611654565b90505b92915050565b600082610cfb57506000610ce6565b82820282848281610d0857fe5b0414610ce35760405162461bcd60e51b81526004016102e290611847565b6000808211610d475760405162461bcd60e51b81526004016102e290611745565b818381610d5057fe5b049392505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051610d8f9190611459565b60006040518083038185875af1925050503d8060008114610dcc576040519150601f19603f3d011682016040523d82523d6000602084013e610dd1565b606091505b5050905080610df25760405162461bcd60e51b81526004016102e290611927565b505050565b610df28363a9059cbb60e01b8484604051602401610e16929190611496565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610f9d565b610ea0610994565b610ebc5760405162461bcd60e51b81526004016102e2906115c0565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610f0d611039565b604051610f1a9190611475565b60405180910390a1565b610f2c610994565b15610f495760405162461bcd60e51b81526004016102e29061177c565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f0d611039565b6060610fff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661103d9092919063ffffffff16565b805190915015610df2578080602001905181019061101d91906113ef565b610df25760405162461bcd60e51b81526004016102e2906119bb565b3390565b606061104c8484600085611056565b90505b9392505050565b6060824710156110785760405162461bcd60e51b81526004016102e2906116e8565b61108185611124565b61109d5760405162461bcd60e51b81526004016102e290611984565b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516110c79190611459565b60006040518083038185875af1925050503d8060008114611104576040519150601f19603f3d011682016040523d82523d6000602084013e611109565b606091505b509150915061111982828661112a565b979650505050505050565b3b151590565b6060831561113957508161104f565b8251156111495782518084602001fd5b8160405162461bcd60e51b81526004016102e2919061156f565b8280548282559060005260206000209081019282156111dd579160200282015b828111156111dd57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190611183565b506111e9929150611234565b5090565b828054828255906000526020600020908101928215611228579160200282015b8281111561122857825182559160200191906001019061120d565b506111e992915061126b565b5b808211156111e95780547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155600101611235565b5b808211156111e9576000815560010161126c565b803573ffffffffffffffffffffffffffffffffffffffff81168114610ce657600080fd5b600082601f8301126112b4578081fd5b81356112c76112c282611a3f565b611a18565b8181529150602080830190848101818402860182018710156112e857600080fd5b60005b84811015611307578135845292820192908201906001016112eb565b505050505092915050565b600060208284031215611323578081fd5b61104f8383611280565b6000806040838503121561133f578081fd5b823567ffffffffffffffff80821115611356578283fd5b818501915085601f830112611369578283fd5b81356113776112c282611a3f565b80828252602080830192508086018a828387028901011115611397578788fd5b8796505b848710156113c1576113ad8b82611280565b84526001969096019592810192810161139b565b5090965087013593505050808211156113d8578283fd5b506113e5858286016112a4565b9150509250929050565b600060208284031215611400578081fd5b81518015158114610ce3578182fd5b600060208284031215611420578081fd5b5035919050565b600060208284031215611438578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000825161146b818460208701611a5f565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000604082016040835280855480835260608501915086845260209250828420845b82811015611517576115078473ffffffffffffffffffffffffffffffffffffffff84541661143f565b92840192600191820191016114de565b50505083810382850152845480825285845282842091830190845b8181101561154e57835483526001938401939285019201611532565b5090979650505050505050565b901515815260200190565b90815260200190565b600060208252825180602084015261158e816040850160208701611a5f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526037908201527f54696d656c6f636b436f6e74726f6c6c65723a20726577617264466163746f7260408201527f73546f74616c206d757374206265206d61782031303030000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602f908201527f436f72655265663a3a6f6e6c79476f7665726e6f723a2043616c6c657220697360408201527f206e6f74206120676f7665726e6f720000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526012908201527f746f6b656e2062616c616e6365207a65726f0000000000000000000000000000604082015260600190565b60208082526026908201527f54696d656c6f636b436f6e74726f6c6c65723a2061727261797320646966662060408201527f6c656e6774680000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526045908201527f436f72655265663a3a6f6e6c79477561726469616e4f72476f7665726e6f723a60408201527f2043616c6c6572206973206e6f74206120677561726469616e206f7220676f7660608201527f65726e6f72000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20457468207472616e73666572206661696c6564000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60405181810167ffffffffffffffff81118282101715611a3757600080fd5b604052919050565b600067ffffffffffffffff821115611a55578081fd5b5060209081020190565b60005b83811015611a7a578181015183820152602001611a62565b83811115611a89576000848401525b5050505056fea264697066735822122014551dcbf58daf07c015a6479b7c2c98a4231f6eefdc2749f91a85d8f9b4749664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2370,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15125,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "_core",
        "offset": 1,
        "slot": "0",
        "type": "t_contract(ICore)10325"
      },
      {
        "astId": 2509,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "beneficiaryAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2513,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "beneficiaryRewardFactors",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICore)10325": {
        "encoding": "inplace",
        "label": "contract ICore",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}