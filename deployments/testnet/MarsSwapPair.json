{
  "address": "0x33d0f2419224586096F065C6b19838d19b5C00f7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0In",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1In",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0Out",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1Out",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "reserve0",
          "type": "uint112"
        },
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "reserve1",
          "type": "uint112"
        }
      ],
      "name": "Sync",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_LIQUIDITY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "_reserve0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "_reserve1",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "_blockTimestampLast",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price0CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "skim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount0Out",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Out",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x843c80c90f1abbdb5da0a51fe0f41f96ab342b86f0f9c7a7bce74022a925773b",
  "receipt": {
    "to": null,
    "from": "0x2999005f782b780A200ed5435BED3093F8aC3C3f",
    "contractAddress": "0x33d0f2419224586096F065C6b19838d19b5C00f7",
    "transactionIndex": 0,
    "gasUsed": "2278225",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x4983f7fca50aa92baef0482e6080ef1a79abb8f43d5b207aa6f0d70d98ec9bed",
    "transactionHash": "0x843c80c90f1abbdb5da0a51fe0f41f96ab342b86f0f9c7a7bce74022a925773b",
    "logs": [],
    "blockNumber": 63,
    "cumulativeGasUsed": "2278225",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1f09b7e33c313fb0c9ad64378c3a9188",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"_reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"_blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swap/MarsSwapPair.sol\":\"MarsSwapPair\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/interfaces/IMarsSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IMarsSwapFactory {\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    // ----------- Governor only state changing API -----------\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeScale(uint256) external;\\r\\n\\r\\n    function setFeeStakeScale(uint256) external;\\r\\n\\r\\n    function setFeeSpec(address pair, uint256 _feeScale) external;\\r\\n\\r\\n    function setFeeNoSpec() external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function fee(address pair)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            bool,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeScale() external view returns (uint256);\\r\\n\\r\\n    function feeStakeScale() external view returns (uint256);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x5cbd48facb8ea64aaa02663a59d2c3053327f836f95524b040f19dd9b432569c\",\"license\":\"MIT\"},\"contracts/interfaces/IMarsSwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMarsSwapPair is IERC20 {\\n    // ----------- Events -----------\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    // ----------- State changing api -----------\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // ----------- Getters -----------\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x49ca5c42e1a5b07a1d22b9e8113917abfa684a368a0c67c1c90a7ba9aac1fabd\",\"license\":\"MIT\"},\"contracts/libs/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n// A library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // Encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // Divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x7c0bfdbe8ba85a0523edb2b4f896bf7708f5cc54ecfe053ab6b992e4f113ac67\",\"license\":\"MIT\"},\"contracts/swap/MarsSwapERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract MarsSwapERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    string public constant name = \\\"Mars LP Token\\\";\\n    string public constant symbol = \\\"MLP\\\";\\n    uint8 public constant decimals = 18;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    function approve(address spender, uint256 value)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function transfer(address to, uint256 value)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external override returns (bool) {\\n        if (_allowances[from][msg.sender] != uint256(-1)) {\\n            _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(\\n                value\\n            );\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        _totalSupply = _totalSupply.add(value);\\n        _balances[to] = _balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        _balances[from] = _balances[from].sub(value);\\n        _totalSupply = _totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        _balances[from] = _balances[from].sub(value);\\n        _balances[to] = _balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"MarsSwapERC20::permit: Expired\\\");\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(\\n                        abi.encode(\\n                            PERMIT_TYPEHASH,\\n                            owner,\\n                            spender,\\n                            value,\\n                            nonces[owner]++,\\n                            deadline\\n                        )\\n                    )\\n                )\\n            );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"MarsSwapERC20::permit: Invalid signature\\\"\\n        );\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xb5f06e75feed2527a43937b96fbffdcb031b7da0610ac46961e810c3c29e4a1a\",\"license\":\"MIT\"},\"contracts/swap/MarsSwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/IMarsSwapPair.sol\\\";\\nimport \\\"../interfaces/IMarsSwapFactory.sol\\\";\\nimport \\\"../libs/UQ112x112.sol\\\";\\nimport \\\"./MarsSwapERC20.sol\\\";\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\\ncontract MarsSwapPair is MarsSwapERC20, IMarsSwapPair {\\n    using SafeMath for uint256;\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant override MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR =\\n        bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    address public override factory;\\n    address public override token0;\\n    address public override token1;\\n\\n    uint112 private reserve0; // Uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // Uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // Uses single storage slot, accessible via getReserves\\n\\n    uint256 public override price0CumulativeLast;\\n    uint256 public override price1CumulativeLast;\\n    uint256 public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n    uint256 private unlocked = 1;\\n\\n    modifier lock() {\\n        require(unlocked == 1, \\\"MarsSwapPair::lock: Locked\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        override\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"MarsSwapPair::_safeTransfer: Transfer failed\\\"\\n        );\\n    }\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // Called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external override {\\n        require(msg.sender == factory, \\\"MarsSwapPair::initialize: Forbidden\\\"); // Sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // Update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        require(\\n            balance0 <= uint112(-1) && balance1 <= uint112(-1),\\n            \\\"MarsSwapPair::_update: Overflow\\\"\\n        );\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast +=\\n                uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\\n                timeElapsed;\\n            price1CumulativeLast +=\\n                uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\\n                timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // If fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1)\\n        private\\n        returns (bool)\\n    {\\n        (address feeTo, bool feeOn, ) =\\n            IMarsSwapFactory(factory).fee(address(this));\\n        uint256 _kLast = kLast; // Gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\\n                uint256 rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = totalSupply().mul(rootK.sub(rootKLast));\\n                    uint256 denominator =\\n                        rootK\\n                            .mul(IMarsSwapFactory(factory).feeStakeScale())\\n                            .add(rootKLast);\\n                    uint256 liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n        return feeOn;\\n    }\\n\\n    // This low-level function should be called from a contract which performs important safety checks\\n    function mint(address to)\\n        external\\n        override\\n        lock\\n        returns (uint256 liquidity)\\n    {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // Gas savings\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0.sub(_reserve0);\\n        uint256 amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply(); // Gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY); // Permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(\\n                amount0.mul(_totalSupply) / _reserve0,\\n                amount1.mul(_totalSupply) / _reserve1\\n            );\\n        }\\n        require(\\n            liquidity > 0,\\n            \\\"MarsSwapPair::mint: Insufficient liquidity minted\\\"\\n        );\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // This low-level function should be called from a contract which performs important safety checks\\n    function burn(address to)\\n        external\\n        override\\n        lock\\n        returns (uint256 amount0, uint256 amount1)\\n    {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // Gas savings\\n        address _token0 = token0; // Gas savings\\n        address _token1 = token1; // Gas savings\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf(address(this));\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply(); // Gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // Using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // Using balances ensures pro-rata distribution\\n        require(\\n            amount0 > 0 && amount1 > 0,\\n            \\\"MarsSwapPair::burn: Insufficient liquidity burned\\\"\\n        );\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // This low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to\\n    ) external override lock {\\n        require(\\n            amount0Out > 0 || amount1Out > 0,\\n            \\\"MarsSwapPair::swap: Insufficient output amount\\\"\\n        );\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // Gas savings\\n        require(\\n            amount0Out < _reserve0 && amount1Out < _reserve1,\\n            \\\"MarsSwapPair::swap: Insufficient liquidity\\\"\\n        );\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // Scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(\\n                to != _token0 && to != _token1,\\n                \\\"MarsSwapPair::swap: Invalid to\\\"\\n            );\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // Optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // Optimistically transfer tokens\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In =\\n            balance0 > _reserve0 - amount0Out\\n                ? balance0 - (_reserve0 - amount0Out)\\n                : 0;\\n        uint256 amount1In =\\n            balance1 > _reserve1 - amount1Out\\n                ? balance1 - (_reserve1 - amount1Out)\\n                : 0;\\n        (, , uint256 feeScale) = IMarsSwapFactory(factory).fee(address(this));\\n        uint256 fee = uint256(1000).sub(feeScale);\\n        require(\\n            amount0In > 0 || amount1In > 0,\\n            \\\"MarsSwapPair::swap: Insufficient input amount\\\"\\n        );\\n        {\\n            // Scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted =\\n                balance0.mul(1000).sub(amount0In.mul(fee));\\n            uint256 balance1Adjusted =\\n                balance1.mul(1000).sub(amount1In.mul(fee));\\n            require(\\n                balance0Adjusted.mul(balance1Adjusted) >=\\n                    uint256(_reserve0).mul(_reserve1).mul(1000**2),\\n                \\\"MarsSwapPair::swap: K\\\"\\n            );\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // Force balances to match reserves\\n    function skim(address to) external override lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(\\n            _token0,\\n            to,\\n            IERC20(_token0).balanceOf(address(this)).sub(reserve0)\\n        );\\n        _safeTransfer(\\n            _token1,\\n            to,\\n            IERC20(_token1).balanceOf(address(this)).sub(reserve1)\\n        );\\n    }\\n\\n    // Force reserves to match balances\\n    function sync() external override lock {\\n        _update(\\n            IERC20(token0).balanceOf(address(this)),\\n            IERC20(token1).balanceOf(address(this)),\\n            reserve0,\\n            reserve1\\n        );\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public override(MarsSwapERC20, IMarsSwapPair) {\\n        MarsSwapERC20.permit(owner, spender, value, deadline, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xf7853bb024b0109022383de8fb22938135ecaef587b95c62dcca7f3028d7ff8a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600c5534801561001557600080fd5b50604080518082018252600d81526c26b0b939902628102a37b5b2b760991b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fdead479d1cc78720387fb7524f642cc7dba28f5ccdf2ed2e584fa2637f3658b7818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556127388061010b6000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636d9a640a116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a7146104f1578063d505accf146104f9578063dd62ed3e1461054a578063fff6cae914610578576101b9565b8063ba9a7a56146104bb578063bc25cf77146104c3578063c45a0155146104e9576101b9565b80637ecebe00116100d35780637ecebe001461042257806389afcb441461044857806395d89b4114610487578063a9059cbb1461048f576101b9565b80636d9a640a146103c257806370a08231146103f45780637464fc3d1461041a576101b9565b806330adf81f11610166578063485cc95511610140578063485cc9551461035c5780635909c0d51461038c5780635a3d5493146103945780636a6278421461039c576101b9565b806330adf81f1461032e578063313ce567146103365780633644e51514610354576101b9565b80630dfe1681116101975780630dfe1681146102ba57806318160ddd146102de57806323b872dd146102f8576101b9565b806306fdde03146101be5780630902f1ac1461023b578063095ea7b31461027a575b600080fd5b6101c6610580565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102005781810151838201526020016101e8565b50505050905090810190601f16801561022d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102436105b9565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b6102a66004803603604081101561029057600080fd5b506001600160a01b03813516906020013561060e565b604080519115158252519081900360200190f35b6102c2610625565b604080516001600160a01b039092168252519081900360200190f35b6102e6610634565b60408051918252519081900360200190f35b6102a66004803603606081101561030e57600080fd5b506001600160a01b0381358116916020810135909116906040013561063a565b6102e66106ec565b61033e610710565b6040805160ff9092168252519081900360200190f35b6102e6610715565b61038a6004803603604081101561037257600080fd5b506001600160a01b038135811691602001351661071b565b005b6102e66107aa565b6102e66107b0565b6102e6600480360360208110156103b257600080fd5b50356001600160a01b03166107b6565b61038a600480360360608110156103d857600080fd5b50803590602081013590604001356001600160a01b0316610b0c565b6102e66004803603602081101561040a57600080fd5b50356001600160a01b031661108b565b6102e66110aa565b6102e66004803603602081101561043857600080fd5b50356001600160a01b03166110b0565b61046e6004803603602081101561045e57600080fd5b50356001600160a01b03166110c2565b6040805192835260208301919091528051918290030190f35b6101c66114de565b6102a6600480360360408110156104a557600080fd5b506001600160a01b038135169060200135611517565b6102e6611524565b61038a600480360360208110156104d957600080fd5b50356001600160a01b031661152a565b6102c26116d6565b6102c26116e5565b61038a600480360360e081101561050f57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356116f4565b6102e66004803603604081101561056057600080fd5b506001600160a01b038135811691602001351661170c565b61038a611737565b6040518060400160405280600d81526020017f4d617273204c5020546f6b656e0000000000000000000000000000000000000081525081565b6008546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b600061061b3384846118e9565b5060015b92915050565b6006546001600160a01b031681565b60025490565b6001600160a01b03831660009081526001602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff146106d7576001600160a01b03841660009081526001602090815260408083203384529091529020546106b2908361194b565b6001600160a01b03851660009081526001602090815260408083203384529091529020555b6106e28484846119a8565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b031633146107645760405162461bcd60e51b81526004018080602001828103825260238152602001806126346023913960400191505060405180910390fd5b600680546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c5460011461080f576040805162461bcd60e51b815260206004820152601a60248201527f4d61727353776170506169723a3a6c6f636b3a204c6f636b6564000000000000604482015290519081900360640190fd5b6000600c8190558061081f6105b9565b50600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561088c57600080fd5b505afa1580156108a0573d6000803e3d6000fd5b505050506040513d60208110156108b657600080fd5b5051600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561092257600080fd5b505afa158015610936573d6000803e3d6000fd5b505050506040513d602081101561094c57600080fd5b50519050600061096c836dffffffffffffffffffffffffffff871661194b565b9050600061098a836dffffffffffffffffffffffffffff871661194b565b905060006109988787611a54565b905060006109a4610634565b9050806109dd576109c96103e86109c36109be8787611c29565b611c89565b9061194b565b98506109d860006103e8611cda565b610a2e565b610a2b6dffffffffffffffffffffffffffff89166109fb8684611c29565b81610a0257fe5b046dffffffffffffffffffffffffffff8916610a1e8685611c29565b81610a2557fe5b04611d63565b98505b60008911610a6d5760405162461bcd60e51b81526004018080602001828103825260318152602001806126a46031913960400191505060405180910390fd5b610a778a8a611cda565b610a8386868a8a611d79565b8115610abf57600854610abb906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416611c29565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b600c54600114610b63576040805162461bcd60e51b815260206004820152601a60248201527f4d61727353776170506169723a3a6c6f636b3a204c6f636b6564000000000000604482015290519081900360640190fd5b6000600c5582151580610b765750600082115b610bb15760405162461bcd60e51b815260040180806020018281038252602e8152602001806126d5602e913960400191505060405180910390fd5b600080610bbc6105b9565b5091509150816dffffffffffffffffffffffffffff1685108015610bef5750806dffffffffffffffffffffffffffff1684105b610c2a5760405162461bcd60e51b815260040180806020018281038252602a81526020018061260a602a913960400191505060405180910390fd5b60065460075460009182916001600160a01b03918216919081169087168214801590610c685750806001600160a01b0316876001600160a01b031614155b610cb9576040805162461bcd60e51b815260206004820152601e60248201527f4d61727353776170506169723a3a737761703a20496e76616c696420746f0000604482015290519081900360640190fd5b8815610cca57610cca82888b612015565b8715610cdb57610cdb81888a612015565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610d3a57600080fd5b505afa158015610d4e573d6000803e3d6000fd5b505050506040513d6020811015610d6457600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b158015610dc957600080fd5b505afa158015610ddd573d6000803e3d6000fd5b505050506040513d6020811015610df357600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168890038311610e1d576000610e33565b87856dffffffffffffffffffffffffffff160383035b9050600087856dffffffffffffffffffffffffffff16038311610e57576000610e6d565b87856dffffffffffffffffffffffffffff160383035b600554604080517f6fcca69b00000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b0390921691636fcca69b91602480820192606092909190829003018186803b158015610ed757600080fd5b505afa158015610eeb573d6000803e3d6000fd5b505050506040513d6060811015610f0157600080fd5b506040015190506000610f166103e88361194b565b90506000841180610f275750600083115b610f625760405162461bcd60e51b815260040180806020018281038252602d815260200180612584602d913960400191505060405180910390fd5b6000610f7d610f718684611c29565b6109c3896103e8611c29565b90506000610f8e610f718685611c29565b9050610fba620f4240610fb46dffffffffffffffffffffffffffff8d8116908d16611c29565b90611c29565b610fc48383611c29565b1015611017576040805162461bcd60e51b815260206004820152601560248201527f4d61727353776170506169723a3a737761703a204b0000000000000000000000604482015290519081900360640190fd5b505061102586868a8a611d79565b60408051858152602081018590528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6001600160a01b0381166000908152602081905260409020545b919050565b600b5481565b60046020526000908152604090205481565b600080600c5460011461111c576040805162461bcd60e51b815260206004820152601a60248201527f4d61727353776170506169723a3a6c6f636b3a204c6f636b6564000000000000604482015290519081900360640190fd5b6000600c8190558061112c6105b9565b50600654600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b1580156111a157600080fd5b505afa1580156111b5573d6000803e3d6000fd5b505050506040513d60208110156111cb57600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561123257600080fd5b505afa158015611246573d6000803e3d6000fd5b505050506040513d602081101561125c57600080fd5b50519050600061126b3061108b565b905060006112798888611a54565b90506000611285610634565b9050806112928487611c29565b8161129957fe5b049a50806112a78486611c29565b816112ae57fe5b04995060008b1180156112c1575060008a115b6112fc5760405162461bcd60e51b81526004018080602001828103825260318152602001806125d96031913960400191505060405180910390fd5b61130630846121e5565b611311878d8d612015565b61131c868d8c612015565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561137b57600080fd5b505afa15801561138f573d6000803e3d6000fd5b505050506040513d60208110156113a557600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d602081101561143457600080fd5b5051935061144485858b8b611d79565b81156114805760085461147c906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416611c29565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b6040518060400160405280600381526020017f4d4c50000000000000000000000000000000000000000000000000000000000081525081565b600061061b3384846119a8565b6103e881565b600c54600114611581576040805162461bcd60e51b815260206004820152601a60248201527f4d61727353776170506169723a3a6c6f636b3a204c6f636b6564000000000000604482015290519081900360640190fd5b6000600c55600654600754600854604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03948516949093169261164a9285928792611645926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b15801561161357600080fd5b505afa158015611627573d6000803e3d6000fd5b505050506040513d602081101561163d57600080fd5b50519061194b565b612015565b6116cc81846116456008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561161357600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b61170387878787878787612276565b50505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600c5460011461178e576040805162461bcd60e51b815260206004820152601a60248201527f4d61727353776170506169723a3a6c6f636b3a204c6f636b6564000000000000604482015290519081900360640190fd5b6000600c55600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516118e2926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156117f857600080fd5b505afa15801561180c573d6000803e3d6000fd5b505050506040513d602081101561182257600080fd5b5051600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561188857600080fd5b505afa15801561189c573d6000803e3d6000fd5b505050506040513d60208110156118b257600080fd5b50516008546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416611d79565b6001600c55565b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000828211156119a2576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b0383166000908152602081905260409020546119cb908261194b565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546119fa90826124c4565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600554604080517f6fcca69b0000000000000000000000000000000000000000000000000000000081523060048201529051600092839283926001600160a01b0390921691636fcca69b91602480820192606092909190829003018186803b158015611abf57600080fd5b505afa158015611ad3573d6000803e3d6000fd5b505050506040513d6060811015611ae957600080fd5b508051602090910151600b5491935091508115611c14578015611c0f576000611b286109be6dffffffffffffffffffffffffffff898116908916611c29565b90506000611b3583611c89565b905080821115611c0c576000611b56611b4e848461194b565b610fb4610634565b90506000611be883611be2600560009054906101000a90046001600160a01b03166001600160a01b031663b68738666040518163ffffffff1660e01b815260040160206040518083038186803b158015611baf57600080fd5b505afa158015611bc3573d6000803e3d6000fd5b505050506040513d6020811015611bd957600080fd5b50518790611c29565b906124c4565b90506000818381611bf557fe5b0490508015611c0857611c088882611cda565b5050505b50505b611c20565b8015611c20576000600b555b50949350505050565b600082611c385750600061061f565b82820282848281611c4557fe5b0414611c825760405162461bcd60e51b81526004018080602001828103825260218152602001806126576021913960400191505060405180910390fd5b9392505050565b60006003821115611ccc575080600160028204015b81811015611cc657809150600281828581611cb557fe5b040181611cbe57fe5b049050611c9e565b506110a5565b81156110a557506001919050565b600254611ce790826124c4565b6002556001600160a01b038216600090815260208190526040902054611d0d90826124c4565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818310611d725781611c82565b5090919050565b6dffffffffffffffffffffffffffff8411801590611da557506dffffffffffffffffffffffffffff8311155b611df6576040805162461bcd60e51b815260206004820152601f60248201527f4d61727353776170506169723a3a5f7570646174653a204f766572666c6f7700604482015290519081900360640190fd5b60085463ffffffff428116917c010000000000000000000000000000000000000000000000000000000090048116820390811615801590611e4657506dffffffffffffffffffffffffffff841615155b8015611e6157506dffffffffffffffffffffffffffff831615155b15611f0b578063ffffffff16611e9e85611e7a8661251e565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690612542565b600980547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff8116611ede84611e7a8761251e565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600880547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b6020831061210e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016120d1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612170576040519150601f19603f3d011682016040523d82523d6000602084013e612175565b606091505b50915091508180156121a35750805115806121a357508080602001905160208110156121a057600080fd5b50515b6121de5760405162461bcd60e51b815260040180806020018281038252602c815260200180612678602c913960400191505060405180910390fd5b5050505050565b6001600160a01b038216600090815260208190526040902054612208908261194b565b6001600160a01b03831660009081526020819052604090205560025461222e908261194b565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b428410156122cb576040805162461bcd60e51b815260206004820152601e60248201527f4d6172735377617045524332303a3a7065726d69743a20457870697265640000604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa15801561241f573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116158015906124735750886001600160a01b0316816001600160a01b0316145b6124ae5760405162461bcd60e51b81526004018080602001828103825260288152602001806125b16028913960400191505060405180910390fd5b6124b98989896118e9565b505050505050505050565b600082820183811015611c82576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff84168161257b57fe5b04939250505056fe4d61727353776170506169723a3a737761703a20496e73756666696369656e7420696e70757420616d6f756e744d6172735377617045524332303a3a7065726d69743a20496e76616c6964207369676e61747572654d61727353776170506169723a3a6275726e3a20496e73756666696369656e74206c6971756964697479206275726e65644d61727353776170506169723a3a737761703a20496e73756666696369656e74206c69717569646974794d61727353776170506169723a3a696e697469616c697a653a20466f7262696464656e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d61727353776170506169723a3a5f736166655472616e736665723a205472616e73666572206661696c65644d61727353776170506169723a3a6d696e743a20496e73756666696369656e74206c6971756964697479206d696e7465644d61727353776170506169723a3a737761703a20496e73756666696369656e74206f757470757420616d6f756e74a264697066735822122084348d031a87bc784131014291ff415096818acf2adb63a1993f339e57d6612964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b95760003560e01c80636d9a640a116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a7146104f1578063d505accf146104f9578063dd62ed3e1461054a578063fff6cae914610578576101b9565b8063ba9a7a56146104bb578063bc25cf77146104c3578063c45a0155146104e9576101b9565b80637ecebe00116100d35780637ecebe001461042257806389afcb441461044857806395d89b4114610487578063a9059cbb1461048f576101b9565b80636d9a640a146103c257806370a08231146103f45780637464fc3d1461041a576101b9565b806330adf81f11610166578063485cc95511610140578063485cc9551461035c5780635909c0d51461038c5780635a3d5493146103945780636a6278421461039c576101b9565b806330adf81f1461032e578063313ce567146103365780633644e51514610354576101b9565b80630dfe1681116101975780630dfe1681146102ba57806318160ddd146102de57806323b872dd146102f8576101b9565b806306fdde03146101be5780630902f1ac1461023b578063095ea7b31461027a575b600080fd5b6101c6610580565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102005781810151838201526020016101e8565b50505050905090810190601f16801561022d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102436105b9565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b6102a66004803603604081101561029057600080fd5b506001600160a01b03813516906020013561060e565b604080519115158252519081900360200190f35b6102c2610625565b604080516001600160a01b039092168252519081900360200190f35b6102e6610634565b60408051918252519081900360200190f35b6102a66004803603606081101561030e57600080fd5b506001600160a01b0381358116916020810135909116906040013561063a565b6102e66106ec565b61033e610710565b6040805160ff9092168252519081900360200190f35b6102e6610715565b61038a6004803603604081101561037257600080fd5b506001600160a01b038135811691602001351661071b565b005b6102e66107aa565b6102e66107b0565b6102e6600480360360208110156103b257600080fd5b50356001600160a01b03166107b6565b61038a600480360360608110156103d857600080fd5b50803590602081013590604001356001600160a01b0316610b0c565b6102e66004803603602081101561040a57600080fd5b50356001600160a01b031661108b565b6102e66110aa565b6102e66004803603602081101561043857600080fd5b50356001600160a01b03166110b0565b61046e6004803603602081101561045e57600080fd5b50356001600160a01b03166110c2565b6040805192835260208301919091528051918290030190f35b6101c66114de565b6102a6600480360360408110156104a557600080fd5b506001600160a01b038135169060200135611517565b6102e6611524565b61038a600480360360208110156104d957600080fd5b50356001600160a01b031661152a565b6102c26116d6565b6102c26116e5565b61038a600480360360e081101561050f57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356116f4565b6102e66004803603604081101561056057600080fd5b506001600160a01b038135811691602001351661170c565b61038a611737565b6040518060400160405280600d81526020017f4d617273204c5020546f6b656e0000000000000000000000000000000000000081525081565b6008546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b600061061b3384846118e9565b5060015b92915050565b6006546001600160a01b031681565b60025490565b6001600160a01b03831660009081526001602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff146106d7576001600160a01b03841660009081526001602090815260408083203384529091529020546106b2908361194b565b6001600160a01b03851660009081526001602090815260408083203384529091529020555b6106e28484846119a8565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b031633146107645760405162461bcd60e51b81526004018080602001828103825260238152602001806126346023913960400191505060405180910390fd5b600680546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c5460011461080f576040805162461bcd60e51b815260206004820152601a60248201527f4d61727353776170506169723a3a6c6f636b3a204c6f636b6564000000000000604482015290519081900360640190fd5b6000600c8190558061081f6105b9565b50600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561088c57600080fd5b505afa1580156108a0573d6000803e3d6000fd5b505050506040513d60208110156108b657600080fd5b5051600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561092257600080fd5b505afa158015610936573d6000803e3d6000fd5b505050506040513d602081101561094c57600080fd5b50519050600061096c836dffffffffffffffffffffffffffff871661194b565b9050600061098a836dffffffffffffffffffffffffffff871661194b565b905060006109988787611a54565b905060006109a4610634565b9050806109dd576109c96103e86109c36109be8787611c29565b611c89565b9061194b565b98506109d860006103e8611cda565b610a2e565b610a2b6dffffffffffffffffffffffffffff89166109fb8684611c29565b81610a0257fe5b046dffffffffffffffffffffffffffff8916610a1e8685611c29565b81610a2557fe5b04611d63565b98505b60008911610a6d5760405162461bcd60e51b81526004018080602001828103825260318152602001806126a46031913960400191505060405180910390fd5b610a778a8a611cda565b610a8386868a8a611d79565b8115610abf57600854610abb906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416611c29565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b600c54600114610b63576040805162461bcd60e51b815260206004820152601a60248201527f4d61727353776170506169723a3a6c6f636b3a204c6f636b6564000000000000604482015290519081900360640190fd5b6000600c5582151580610b765750600082115b610bb15760405162461bcd60e51b815260040180806020018281038252602e8152602001806126d5602e913960400191505060405180910390fd5b600080610bbc6105b9565b5091509150816dffffffffffffffffffffffffffff1685108015610bef5750806dffffffffffffffffffffffffffff1684105b610c2a5760405162461bcd60e51b815260040180806020018281038252602a81526020018061260a602a913960400191505060405180910390fd5b60065460075460009182916001600160a01b03918216919081169087168214801590610c685750806001600160a01b0316876001600160a01b031614155b610cb9576040805162461bcd60e51b815260206004820152601e60248201527f4d61727353776170506169723a3a737761703a20496e76616c696420746f0000604482015290519081900360640190fd5b8815610cca57610cca82888b612015565b8715610cdb57610cdb81888a612015565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610d3a57600080fd5b505afa158015610d4e573d6000803e3d6000fd5b505050506040513d6020811015610d6457600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b158015610dc957600080fd5b505afa158015610ddd573d6000803e3d6000fd5b505050506040513d6020811015610df357600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168890038311610e1d576000610e33565b87856dffffffffffffffffffffffffffff160383035b9050600087856dffffffffffffffffffffffffffff16038311610e57576000610e6d565b87856dffffffffffffffffffffffffffff160383035b600554604080517f6fcca69b00000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b0390921691636fcca69b91602480820192606092909190829003018186803b158015610ed757600080fd5b505afa158015610eeb573d6000803e3d6000fd5b505050506040513d6060811015610f0157600080fd5b506040015190506000610f166103e88361194b565b90506000841180610f275750600083115b610f625760405162461bcd60e51b815260040180806020018281038252602d815260200180612584602d913960400191505060405180910390fd5b6000610f7d610f718684611c29565b6109c3896103e8611c29565b90506000610f8e610f718685611c29565b9050610fba620f4240610fb46dffffffffffffffffffffffffffff8d8116908d16611c29565b90611c29565b610fc48383611c29565b1015611017576040805162461bcd60e51b815260206004820152601560248201527f4d61727353776170506169723a3a737761703a204b0000000000000000000000604482015290519081900360640190fd5b505061102586868a8a611d79565b60408051858152602081018590528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6001600160a01b0381166000908152602081905260409020545b919050565b600b5481565b60046020526000908152604090205481565b600080600c5460011461111c576040805162461bcd60e51b815260206004820152601a60248201527f4d61727353776170506169723a3a6c6f636b3a204c6f636b6564000000000000604482015290519081900360640190fd5b6000600c8190558061112c6105b9565b50600654600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b1580156111a157600080fd5b505afa1580156111b5573d6000803e3d6000fd5b505050506040513d60208110156111cb57600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561123257600080fd5b505afa158015611246573d6000803e3d6000fd5b505050506040513d602081101561125c57600080fd5b50519050600061126b3061108b565b905060006112798888611a54565b90506000611285610634565b9050806112928487611c29565b8161129957fe5b049a50806112a78486611c29565b816112ae57fe5b04995060008b1180156112c1575060008a115b6112fc5760405162461bcd60e51b81526004018080602001828103825260318152602001806125d96031913960400191505060405180910390fd5b61130630846121e5565b611311878d8d612015565b61131c868d8c612015565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561137b57600080fd5b505afa15801561138f573d6000803e3d6000fd5b505050506040513d60208110156113a557600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d602081101561143457600080fd5b5051935061144485858b8b611d79565b81156114805760085461147c906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416611c29565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b6040518060400160405280600381526020017f4d4c50000000000000000000000000000000000000000000000000000000000081525081565b600061061b3384846119a8565b6103e881565b600c54600114611581576040805162461bcd60e51b815260206004820152601a60248201527f4d61727353776170506169723a3a6c6f636b3a204c6f636b6564000000000000604482015290519081900360640190fd5b6000600c55600654600754600854604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03948516949093169261164a9285928792611645926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b15801561161357600080fd5b505afa158015611627573d6000803e3d6000fd5b505050506040513d602081101561163d57600080fd5b50519061194b565b612015565b6116cc81846116456008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561161357600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b61170387878787878787612276565b50505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600c5460011461178e576040805162461bcd60e51b815260206004820152601a60248201527f4d61727353776170506169723a3a6c6f636b3a204c6f636b6564000000000000604482015290519081900360640190fd5b6000600c55600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516118e2926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156117f857600080fd5b505afa15801561180c573d6000803e3d6000fd5b505050506040513d602081101561182257600080fd5b5051600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561188857600080fd5b505afa15801561189c573d6000803e3d6000fd5b505050506040513d60208110156118b257600080fd5b50516008546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416611d79565b6001600c55565b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000828211156119a2576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b0383166000908152602081905260409020546119cb908261194b565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546119fa90826124c4565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600554604080517f6fcca69b0000000000000000000000000000000000000000000000000000000081523060048201529051600092839283926001600160a01b0390921691636fcca69b91602480820192606092909190829003018186803b158015611abf57600080fd5b505afa158015611ad3573d6000803e3d6000fd5b505050506040513d6060811015611ae957600080fd5b508051602090910151600b5491935091508115611c14578015611c0f576000611b286109be6dffffffffffffffffffffffffffff898116908916611c29565b90506000611b3583611c89565b905080821115611c0c576000611b56611b4e848461194b565b610fb4610634565b90506000611be883611be2600560009054906101000a90046001600160a01b03166001600160a01b031663b68738666040518163ffffffff1660e01b815260040160206040518083038186803b158015611baf57600080fd5b505afa158015611bc3573d6000803e3d6000fd5b505050506040513d6020811015611bd957600080fd5b50518790611c29565b906124c4565b90506000818381611bf557fe5b0490508015611c0857611c088882611cda565b5050505b50505b611c20565b8015611c20576000600b555b50949350505050565b600082611c385750600061061f565b82820282848281611c4557fe5b0414611c825760405162461bcd60e51b81526004018080602001828103825260218152602001806126576021913960400191505060405180910390fd5b9392505050565b60006003821115611ccc575080600160028204015b81811015611cc657809150600281828581611cb557fe5b040181611cbe57fe5b049050611c9e565b506110a5565b81156110a557506001919050565b600254611ce790826124c4565b6002556001600160a01b038216600090815260208190526040902054611d0d90826124c4565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818310611d725781611c82565b5090919050565b6dffffffffffffffffffffffffffff8411801590611da557506dffffffffffffffffffffffffffff8311155b611df6576040805162461bcd60e51b815260206004820152601f60248201527f4d61727353776170506169723a3a5f7570646174653a204f766572666c6f7700604482015290519081900360640190fd5b60085463ffffffff428116917c010000000000000000000000000000000000000000000000000000000090048116820390811615801590611e4657506dffffffffffffffffffffffffffff841615155b8015611e6157506dffffffffffffffffffffffffffff831615155b15611f0b578063ffffffff16611e9e85611e7a8661251e565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690612542565b600980547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff8116611ede84611e7a8761251e565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600880547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b6020831061210e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016120d1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612170576040519150601f19603f3d011682016040523d82523d6000602084013e612175565b606091505b50915091508180156121a35750805115806121a357508080602001905160208110156121a057600080fd5b50515b6121de5760405162461bcd60e51b815260040180806020018281038252602c815260200180612678602c913960400191505060405180910390fd5b5050505050565b6001600160a01b038216600090815260208190526040902054612208908261194b565b6001600160a01b03831660009081526020819052604090205560025461222e908261194b565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b428410156122cb576040805162461bcd60e51b815260206004820152601e60248201527f4d6172735377617045524332303a3a7065726d69743a20457870697265640000604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa15801561241f573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116158015906124735750886001600160a01b0316816001600160a01b0316145b6124ae5760405162461bcd60e51b81526004018080602001828103825260288152602001806125b16028913960400191505060405180910390fd5b6124b98989896118e9565b505050505050505050565b600082820183811015611c82576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff84168161257b57fe5b04939250505056fe4d61727353776170506169723a3a737761703a20496e73756666696369656e7420696e70757420616d6f756e744d6172735377617045524332303a3a7065726d69743a20496e76616c6964207369676e61747572654d61727353776170506169723a3a6275726e3a20496e73756666696369656e74206c6971756964697479206275726e65644d61727353776170506169723a3a737761703a20496e73756666696369656e74206c69717569646974794d61727353776170506169723a3a696e697469616c697a653a20466f7262696464656e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d61727353776170506169723a3a5f736166655472616e736665723a205472616e73666572206661696c65644d61727353776170506169723a3a6d696e743a20496e73756666696369656e74206c6971756964697479206d696e7465644d61727353776170506169723a3a737761703a20496e73756666696369656e74206f757470757420616d6f756e74a264697066735822122084348d031a87bc784131014291ff415096818acf2adb63a1993f339e57d6612964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14345,
        "contract": "contracts/swap/MarsSwapPair.sol:MarsSwapPair",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14351,
        "contract": "contracts/swap/MarsSwapPair.sol:MarsSwapPair",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 14353,
        "contract": "contracts/swap/MarsSwapPair.sol:MarsSwapPair",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 14355,
        "contract": "contracts/swap/MarsSwapPair.sol:MarsSwapPair",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 14362,
        "contract": "contracts/swap/MarsSwapPair.sol:MarsSwapPair",
        "label": "nonces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15215,
        "contract": "contracts/swap/MarsSwapPair.sol:MarsSwapPair",
        "label": "factory",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 15218,
        "contract": "contracts/swap/MarsSwapPair.sol:MarsSwapPair",
        "label": "token0",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 15221,
        "contract": "contracts/swap/MarsSwapPair.sol:MarsSwapPair",
        "label": "token1",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 15223,
        "contract": "contracts/swap/MarsSwapPair.sol:MarsSwapPair",
        "label": "reserve0",
        "offset": 0,
        "slot": "8",
        "type": "t_uint112"
      },
      {
        "astId": 15225,
        "contract": "contracts/swap/MarsSwapPair.sol:MarsSwapPair",
        "label": "reserve1",
        "offset": 14,
        "slot": "8",
        "type": "t_uint112"
      },
      {
        "astId": 15227,
        "contract": "contracts/swap/MarsSwapPair.sol:MarsSwapPair",
        "label": "blockTimestampLast",
        "offset": 28,
        "slot": "8",
        "type": "t_uint32"
      },
      {
        "astId": 15230,
        "contract": "contracts/swap/MarsSwapPair.sol:MarsSwapPair",
        "label": "price0CumulativeLast",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 15233,
        "contract": "contracts/swap/MarsSwapPair.sol:MarsSwapPair",
        "label": "price1CumulativeLast",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 15236,
        "contract": "contracts/swap/MarsSwapPair.sol:MarsSwapPair",
        "label": "kLast",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 15239,
        "contract": "contracts/swap/MarsSwapPair.sol:MarsSwapPair",
        "label": "unlocked",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}