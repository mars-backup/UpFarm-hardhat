{
  "address": "0xD21cBd58d1D8FeaBBC8c05F5bF2241321Ef9DE1c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract BSWToken",
          "name": "_BSW",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devaddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_refAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_safuaddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_BSWPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakingPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_devPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_refPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_safuPercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BONUS_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BSW",
      "outputs": [
        {
          "internalType": "contract BSWToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BSWPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IBEP20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositedBsw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devaddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "enterStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBlockDevWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "leaveStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "contract IMigratorChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingBSW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentDec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accBSWPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safuPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safuaddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devaddr",
          "type": "address"
        }
      ],
      "name": "setDevAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMigratorChef",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_refaddr",
          "type": "address"
        }
      ],
      "name": "setRefAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_safuaddr",
          "type": "address"
        }
      ],
      "name": "setSafuAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "updateBswPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "multiplierNumber",
          "type": "uint256"
        }
      ],
      "name": "updateMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawDevAndRefFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbec6005e9f044cafd757bf47cfcf26c8a0e450512fbd2f2708954028184df8bc",
  "receipt": {
    "to": null,
    "from": "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
    "contractAddress": "0xD21cBd58d1D8FeaBBC8c05F5bF2241321Ef9DE1c",
    "transactionIndex": 5,
    "gasUsed": "2706687",
    "logsBloom": "0x
    "blockHash": "0x3c8bc21f9c3393e3e9542d6a2cf1fa208b57b33a4ce10ec126f840b4d219a1ea",
    "transactionHash": "0xbec6005e9f044cafd757bf47cfcf26c8a0e450512fbd2f2708954028184df8bc",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 17896440,
        "transactionHash": "0xbec6005e9f044cafd757bf47cfcf26c8a0e450512fbd2f2708954028184df8bc",
        "address": "0xD21cBd58d1D8FeaBBC8c05F5bF2241321Ef9DE1c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001904bfcb93edc9bf961eead2e5c0de81dcc1d37d"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x3c8bc21f9c3393e3e9542d6a2cf1fa208b57b33a4ce10ec126f840b4d219a1ea"
      }
    ],
    "blockNumber": 17896440,
    "cumulativeGasUsed": "3792177",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDCCC0f640Aa5A3D7943ea24aaCb79E7D622dE578",
    "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
    "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
    "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
    "1000000000000000000",
    0,
    857000,
    90000,
    43000,
    10000
  ],
  "solcInputHash": "ac0e0d268ac00ee58ad1cac15120989b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract BSWToken\",\"name\":\"_BSW\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_refAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safuaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_BSWPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_safuPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BSW\",\"outputs\":[{\"internalType\":\"contract BSWToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BSWPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositedBsw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlockDevWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBSW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBSWPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safuPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safuaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refaddr\",\"type\":\"address\"}],\"name\":\"setRefAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safuaddr\",\"type\":\"address\"}],\"name\":\"setSafuAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateBswPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDevAndRefFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/biswap/MasterChefBSW.sol\":\"MasterChefBSW\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/test/biswap/BEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IBEP20.sol\\\";\\n\\ncontract BEP20 is IBEP20, Ownable {\\n    uint256 private constant _preMineSupply = 10000000 * 1e18;\\n    uint256 private constant _maxSupply = 700000000 * 1e18; \\n\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n\\n        _mint(msg.sender, _preMineSupply);\\n    }\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external override view returns (address) {\\n        return owner();\\n    }\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() public override view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() public override view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() public override view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-totalSupply}.\\n     */\\n    function totalSupply() public override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function preMineSupply() public override view returns (uint256) {\\n        return _preMineSupply;\\n    }\\n\\n    function maxSupply() public override view returns (uint256) {\\n        return _maxSupply;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-balanceOf}.\\n     */\\n    function balanceOf(address account) public override view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {BEP20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public override view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {BEP20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {BEP20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance')\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {BEP20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {BEP20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero')\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\\n     * the total supply.\\n     *\\n     * Requirements\\n     *\\n     * - `msg.sender` must be the token owner\\n     */\\n    /*\\n    function mint(uint256 amount) public onlyOwner returns (bool) {\\n        _mint(_msgSender(), amount);\\n        return true;\\n    }\\n    */\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0), 'BEP20: transfer from the zero address');\\n        require(recipient != address(0), 'BEP20: transfer to the zero address');\\n\\n        _balances[sender] = _balances[sender].sub(amount, 'BEP20: transfer amount exceeds balance');\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal returns(bool) {\\n        require(account != address(0), 'BEP20: mint to the zero address');\\n        if (amount.add(_totalSupply) > _maxSupply) {\\n            return false;\\n        }\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), 'BEP20: burn from the zero address');\\n\\n        _balances[account] = _balances[account].sub(amount, 'BEP20: burn amount exceeds balance');\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), 'BEP20: approve from the zero address');\\n        require(spender != address(0), 'BEP20: approve to the zero address');\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(\\n            account,\\n            _msgSender(),\\n            _allowances[account][_msgSender()].sub(amount, 'BEP20: burn amount exceeds allowance')\\n        );\\n    }\\n}\",\"keccak256\":\"0xeda1737d9817d6d004b90cd91038756995200eac97d1d39f0d6df4837f67850f\",\"license\":\"MIT\"},\"contracts/test/biswap/BSWToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./BEP20.sol\\\";\\n\\n// Biswap token with Governance.\\ncontract BSWToken is BEP20('Biswap', 'BSW') {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    EnumerableSet.AddressSet private _minters;\\n\\n    /// @notice Creates `_amount` token to `_to`.\\n    function mint(address _to, uint256 _amount) public onlyMinter returns (bool) {\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n        return true;\\n    }\\n\\n    // Copied and modified from YAM code:\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\n    // Which is copied and modified from COMPOUND:\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\n\\n    /// @notice A record of each accounts delegate\\n    mapping (address => address) internal _delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n      /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegator The address to get delegatee for\\n     */\\n    function delegates(address delegator)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _delegates[delegator];\\n    }\\n\\n   /**\\n    * @notice Delegate votes from `msg.sender` to `delegatee`\\n    * @param delegatee The address to delegate votes to\\n    */\\n    function delegate(address delegatee) external {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint nonce,\\n        uint expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n    {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name())),\\n                getChainId(),\\n                address(this)\\n            )\\n        );\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                DELEGATION_TYPEHASH,\\n                delegatee,\\n                nonce,\\n                expiry\\n            )\\n        );\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                structHash\\n            )\\n        );\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"BSW::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"BSW::delegateBySig: invalid nonce\\\");\\n        require(now <= expiry, \\\"BSW::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(blockNumber < block.number, \\\"BSW::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee)\\n        internal\\n    {\\n        address currentDelegate = _delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying BSWs (not scaled);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                // decrease old representative\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                // increase new representative\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    )\\n        internal\\n    {\\n        uint32 blockNumber = safe32(block.number, \\\"BSW::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n\\n\\n    function addMinter(address _addMinter) public onlyOwner returns (bool) {\\n        require(_addMinter != address(0), \\\"BSW: _addMinter is the zero address\\\");\\n        return EnumerableSet.add(_minters, _addMinter);\\n    }\\n\\n    function delMinter(address _delMinter) public onlyOwner returns (bool) {\\n        require(_delMinter != address(0), \\\"BSW: _delMinter is the zero address\\\");\\n        return EnumerableSet.remove(_minters, _delMinter);\\n    }\\n\\n    function getMinterLength() public view returns (uint256) {\\n        return EnumerableSet.length(_minters);\\n    }\\n\\n    function isMinter(address account) public view returns (bool) {\\n        return EnumerableSet.contains(_minters, account);\\n    }\\n\\n    function getMinter(uint256 _index) public view onlyOwner returns (address){\\n        require(_index <= getMinterLength() - 1, \\\"BSW: index out of bounds\\\");\\n        return EnumerableSet.at(_minters, _index);\\n    }\\n\\n    // modifier for mint function\\n    modifier onlyMinter() {\\n        require(isMinter(msg.sender), \\\"caller is not the minter\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0xf3ca54007f3eaa33d4bf4afebb473c3c1c9caed5840300396e7fe17190f342a6\",\"license\":\"MIT\"},\"contracts/test/biswap/MasterChefBSW.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./BSWToken.sol\\\";\\nimport \\\"./SafeBEP20.sol\\\";\\n\\ninterface IMigratorChef {\\n    function migrate(IBEP20 token) external returns (IBEP20);\\n}\\n\\ncontract MasterChefBSW is Ownable {\\n    using SafeMath for uint256;\\n    using SafeBEP20 for IBEP20;\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of BSWs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accBSWPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accBSWPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBEP20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. BSWs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that BSWs distribution occurs.\\n        uint256 accBSWPerShare; // Accumulated BSWs per share, times 1e12. See below.\\n    }\\n    // The BSW TOKEN!\\n    BSWToken public BSW;\\n    //Pools, Farms, Dev, Refs percent decimals\\n    uint256 public percentDec = 1000000;\\n    //Pools and Farms percent from token per block\\n    uint256 public stakingPercent;\\n    //Developers percent from token per block\\n    uint256 public devPercent;\\n    //Referrals percent from token per block\\n    uint256 public refPercent;\\n    //Safu fund percent from token per block\\n    uint256 public safuPercent;\\n    // Dev address.\\n    address public devaddr;\\n    // Safu fund.\\n    address public safuaddr;\\n    // Refferals commision address.\\n    address public refAddr;\\n    // Last block then develeper withdraw dev and ref fee\\n    uint256 public lastBlockDevWithdraw;\\n    // BSW tokens created per block.\\n    uint256 public BSWPerBlock;\\n    // Bonus muliplier for early BSW makers.\\n    uint256 public BONUS_MULTIPLIER = 1;\\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\\n    IMigratorChef public migrator;\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when BSW mining starts.\\n    uint256 public startBlock;\\n    // Deposited amount BSW in MasterChef\\n    uint256 public depositedBsw;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    constructor(\\n        BSWToken _BSW,\\n        address _devaddr,\\n        address _refAddr,\\n        address _safuaddr,\\n        uint256 _BSWPerBlock,\\n        uint256 _startBlock,\\n        uint256 _stakingPercent,\\n        uint256 _devPercent,\\n        uint256 _refPercent,\\n        uint256 _safuPercent\\n    ) public {\\n        BSW = _BSW;\\n        devaddr = _devaddr;\\n        refAddr = _refAddr;\\n        safuaddr = _safuaddr;\\n        BSWPerBlock = _BSWPerBlock;\\n        startBlock = _startBlock;\\n        stakingPercent = _stakingPercent;\\n        devPercent = _devPercent;\\n        refPercent = _refPercent;\\n        safuPercent = _safuPercent;\\n        lastBlockDevWithdraw = _startBlock;\\n        \\n        \\n        // staking pool\\n        poolInfo.push(PoolInfo({\\n            lpToken: _BSW,\\n            allocPoint: 1000,\\n            lastRewardBlock: startBlock,\\n            accBSWPerShare: 0\\n        }));\\n\\n        totalAllocPoint = 1000;\\n\\n    }\\n\\n    function updateMultiplier(uint256 multiplierNumber) public onlyOwner {\\n        BONUS_MULTIPLIER = multiplierNumber;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function withdrawDevAndRefFee() public{\\n        require(lastBlockDevWithdraw < block.number, 'wait for new block');\\n        uint256 multiplier = getMultiplier(lastBlockDevWithdraw, block.number);\\n        uint256 BSWReward = multiplier.mul(BSWPerBlock);\\n        BSW.mint(devaddr, BSWReward.mul(devPercent).div(percentDec));\\n        BSW.mint(safuaddr, BSWReward.mul(safuPercent).div(percentDec));\\n        BSW.mint(refAddr, BSWReward.mul(refPercent).div(percentDec));\\n        lastBlockDevWithdraw = block.number;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    function add( uint256 _allocPoint, IBEP20 _lpToken, bool _withUpdate ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accBSWPerShare: 0\\n            })\\n        );\\n    }\\n\\n    // Update the given pool's BSW allocation point. Can only be called by the owner.\\n    function set( uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Set the migrator contract. Can only be called by the owner.\\n    function setMigrator(IMigratorChef _migrator) public onlyOwner {\\n        migrator = _migrator;\\n    }\\n\\n    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\\n    function migrate(uint256 _pid) public {\\n        require(address(migrator) != address(0), \\\"migrate: no migrator\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        IBEP20 lpToken = pool.lpToken;\\n        uint256 bal = lpToken.balanceOf(address(this));\\n        lpToken.safeApprove(address(migrator), bal);\\n        IBEP20 newLpToken = migrator.migrate(lpToken);\\n        require(bal == newLpToken.balanceOf(address(this)), \\\"migrate: bad\\\");\\n        pool.lpToken = newLpToken;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n         return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n    }\\n\\n    // View function to see pending BSWs on frontend.\\n    function pendingBSW(uint256 _pid, address _user) external view returns (uint256){\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accBSWPerShare = pool.accBSWPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (_pid == 0){\\n            lpSupply = depositedBsw;\\n        }\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 BSWReward = multiplier.mul(BSWPerBlock).mul(pool.allocPoint).div(totalAllocPoint).mul(stakingPercent).div(percentDec);\\n            accBSWPerShare = accBSWPerShare.add(BSWReward.mul(1e12).div(lpSupply));\\n        }\\n        return user.amount.mul(accBSWPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (_pid == 0){\\n            lpSupply = depositedBsw;\\n        }\\n        if (lpSupply <= 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 BSWReward = multiplier.mul(BSWPerBlock).mul(pool.allocPoint).div(totalAllocPoint).mul(stakingPercent).div(percentDec);\\n        BSW.mint(address(this), BSWReward);\\n        pool.accBSWPerShare = pool.accBSWPerShare.add(BSWReward.mul(1e12).div(lpSupply));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to MasterChef for BSW allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n\\n        require (_pid != 0, 'deposit BSW by staking');\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accBSWPerShare).div(1e12).sub(user.rewardDebt);\\n            safeBSWTransfer(msg.sender, pending);\\n        }\\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n        user.amount = user.amount.add(_amount);\\n        user.rewardDebt = user.amount.mul(pool.accBSWPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n\\n        require (_pid != 0, 'withdraw BSW by unstaking');\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 pending = user.amount.mul(pool.accBSWPerShare).div(1e12).sub(user.rewardDebt);\\n        safeBSWTransfer(msg.sender, pending);\\n        user.amount = user.amount.sub(_amount);\\n        user.rewardDebt = user.amount.mul(pool.accBSWPerShare).div(1e12);\\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n        // Stake BSW tokens to MasterChef\\n    function enterStaking(uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[0];\\n        UserInfo storage user = userInfo[0][msg.sender];\\n        updatePool(0);\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accBSWPerShare).div(1e12).sub(user.rewardDebt);\\n            if(pending > 0) {\\n                safeBSWTransfer(msg.sender, pending);\\n            }\\n        }\\n        if(_amount > 0) {\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n            depositedBsw = depositedBsw.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accBSWPerShare).div(1e12);\\n        emit Deposit(msg.sender, 0, _amount);\\n    }\\n\\n    // Withdraw BSW tokens from STAKING.\\n    function leaveStaking(uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[0];\\n        UserInfo storage user = userInfo[0][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(0);\\n        uint256 pending = user.amount.mul(pool.accBSWPerShare).div(1e12).sub(user.rewardDebt);\\n        if(pending > 0) {\\n            safeBSWTransfer(msg.sender, pending);\\n        }\\n        if(_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n            depositedBsw = depositedBsw.sub(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accBSWPerShare).div(1e12);\\n        emit Withdraw(msg.sender, 0, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n    }\\n\\n    // Safe BSW transfer function, just in case if rounding error causes pool to not have enough BSWs.\\n    function safeBSWTransfer(address _to, uint256 _amount) internal {\\n        uint256 BSWBal = BSW.balanceOf(address(this));\\n        if (_amount > BSWBal) {\\n            BSW.transfer(_to, BSWBal);\\n        } else {\\n            BSW.transfer(_to, _amount);\\n        }\\n    }\\n\\n    \\n    function setDevAddress(address _devaddr) public onlyOwner {\\n        devaddr = _devaddr;\\n    }\\n    function setRefAddress(address _refaddr) public onlyOwner {\\n        refAddr = _refaddr;\\n    }\\n    function setSafuAddress(address _safuaddr) public onlyOwner{\\n        safuaddr = _safuaddr;\\n    }\\n    function updateBswPerBlock(uint256 newAmount) public onlyOwner {\\n        require(newAmount <= 30 * 1e18, 'Max per block 30 BSW');\\n        require(newAmount >= 1 * 1e18, 'Min per block 1 BSW');\\n        BSWPerBlock = newAmount;\\n    }\\n}\",\"keccak256\":\"0x13b59fe3768dc1b04c46b7e39b28aafa21f9b73aa969e8eceef8cd182f5a66b2\",\"license\":\"MIT\"},\"contracts/test/biswap/SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IBEP20.sol\\\";\\n\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            'SafeBEP20: approve from non-zero to non-zero allowance'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            'SafeBEP20: decreased allowance below zero'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x915c13443ddf922240ceb144c51ebb117cf9eea3bf764d845e76a267426ac231\",\"license\":\"MIT\"},\"contracts/test/biswap/interfaces/IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    function preMineSupply() external view returns (uint256);\\n\\n    function maxSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xc5fbe20328c9e60d0df3fa2e86f6d30ff66d797bf0d3b396365ffc9ad1cfc4a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052620f42406002556001600c55600060105534801561002157600080fd5b5060405162002c3938038062002c39833981810160405261014081101561004757600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e08801516101008901516101209099015197989697959694959394929391929091600061009461023b565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b03199081166001600160a01b039c8d1690811783556007805483169c8e169c909c17909b556009805482169a8d169a909a17909955600880548a16988c1698909817909755600b9590955560118490556003929092556004908155600591909155600692909255600a819055604080516080810182529586526103e860208701818152918701928352600060608801818152600e8054978801815590915296517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd9590940294850180549096169390971692909217909355517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe82015590517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff82015590517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c4009091015560105561023f565b3390565b6129ea806200024f6000396000f3fe608060405234801561001057600080fd5b50600436106102d25760003560e01c80635312ea8e116101865780638da5cb5b116100e3578063d0d41fe111610097578063e2bbb15811610071578063e2bbb1581461066d578063f2fde38b14610690578063fc3c28af146106b6576102d2565b8063d0d41fe114610637578063d49e77cd1461065d578063e0dcd30d14610665576102d2565b806393f1a40b116100c857806393f1a40b146105e2578063b76e360c14610627578063be1193ea1461062f576102d2565b80638da5cb5b146105b75780638dbb1e3a146105bf576102d2565b806369d0c5b81161013a5780637c7be2fa1161011f5780637c7be2fa146105815780637cd07e47146105a75780638aa28550146105af576102d2565b806369d0c5b814610571578063715018a614610579576102d2565b80635ffe61461161016b5780635ffe614614610521578063630b5ba11461053e57806364482f7914610546576102d2565b80635312ea8e146104fc57806359d5335b14610519576102d2565b806323cf31181161023457806341441d3b116101e8578063454b0608116101cd578063454b0608146104ba57806348cd4cb1146104d757806351eb05a6146104df576102d2565b806341441d3b1461047a578063441a3e7014610497576102d2565b8063305371ee11610219578063305371ee14610431578063333667dc146104555780634062726514610472576102d2565b806323cf3118146103df578063295315bf14610405576102d2565b80631526fe271161028b57806318678a731161027057806318678a731461039b5780631eaaa045146103a357806321b1aecb146103d7576102d2565b80631526fe271461034657806317caf6f114610393576102d2565b8063081e3eda116102bc578063081e3eda146103195780631058d2811461032157806312270c401461033e576102d2565b8062a2e3be146102d7578063061e26af146102f1575b600080fd5b6102df6106be565b60408051918252519081900360200190f35b6103176004803603602081101561030757600080fd5b50356001600160a01b03166106c4565b005b6102df610772565b6103176004803603602081101561033757600080fd5b5035610778565b61031761090d565b6103636004803603602081101561035c57600080fd5b5035610b7b565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b6102df610bbc565b6102df610bc2565b610317600480360360608110156103b957600080fd5b508035906001600160a01b0360208201351690604001351515610bc8565b6102df610d77565b610317600480360360208110156103f557600080fd5b50356001600160a01b0316610d7d565b6102df6004803603604081101561041b57600080fd5b50803590602001356001600160a01b0316610e2b565b610439610fc3565b604080516001600160a01b039092168252519081900360200190f35b6103176004803603602081101561046b57600080fd5b5035610fd2565b6102df611106565b6103176004803603602081101561049057600080fd5b503561110c565b610317600480360360408110156104ad57600080fd5b5080359060200135611245565b610317600480360360208110156104d057600080fd5b50356113e9565b6102df6116c2565b610317600480360360208110156104f557600080fd5b50356116c8565b6103176004803603602081101561051257600080fd5b50356118bf565b6102df61195a565b6103176004803603602081101561053757600080fd5b5035611960565b6103176119d9565b6103176004803603606081101561055c57600080fd5b508035906020810135906040013515156119fc565b610439611ae9565b610317611af8565b6103176004803603602081101561059757600080fd5b50356001600160a01b0316611bce565b610439611c7c565b6102df611c8b565b610439611c91565b6102df600480360360408110156105d557600080fd5b5080359060200135611ca0565b61060e600480360360408110156105f857600080fd5b50803590602001356001600160a01b0316611cbb565b6040805192835260208301919091528051918290030190f35b6102df611cdf565b6102df611ce5565b6103176004803603602081101561064d57600080fd5b50356001600160a01b0316611ceb565b610439611d99565b610439611da8565b6103176004803603604081101561068357600080fd5b5080359060200135611db7565b610317600480360360208110156106a657600080fd5b50356001600160a01b0316611f0e565b6102df61203a565b60065481565b6106cc612040565b6001600160a01b03166106dd611c91565b6001600160a01b031614610738576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600e5490565b6000600e60008154811061078857fe5b600091825260208083203384527ff4803e074bd026baaf6ed2e288c9515f68c72fb7216eebdd7cae1718a53ec375909152604090922080546004909202909201925083111561081e576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b61082860006116c8565b6000610862826001015461085c64e8d4a510006108568760030154876000015461204490919063ffffffff16565b9061209d565b90612104565b90508015610874576108743382612161565b83156108af5781546108869085612104565b8255825461089e906001600160a01b0316338661233d565b6012546108ab9085612104565b6012555b600383015482546108ca9164e8d4a510009161085691612044565b600183015560408051858152905160009133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a350505050565b43600a5410610963576040805162461bcd60e51b815260206004820152601260248201527f7761697420666f72206e657720626c6f636b0000000000000000000000000000604482015290519081900360640190fd5b6000610971600a5443611ca0565b9050600061098a600b548361204490919063ffffffff16565b6001546007546002546004549394506001600160a01b03928316936340c10f1993909216916109bf9190610856908790612044565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610a0557600080fd5b505af1158015610a19573d6000803e3d6000fd5b505050506040513d6020811015610a2f57600080fd5b50506001546008546002546006546001600160a01b03938416936340c10f19931691610a6091610856908790612044565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610aa657600080fd5b505af1158015610aba573d6000803e3d6000fd5b505050506040513d6020811015610ad057600080fd5b50506001546009546002546005546001600160a01b03938416936340c10f19931691610b0191610856908790612044565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610b4757600080fd5b505af1158015610b5b573d6000803e3d6000fd5b505050506040513d6020811015610b7157600080fd5b505043600a555050565b600e8181548110610b8857fe5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b60105481565b60125481565b610bd0612040565b6001600160a01b0316610be1611c91565b6001600160a01b031614610c3c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b8015610c4a57610c4a6119d9565b60006011544311610c5d57601154610c5f565b435b601054909150610c6f90856123bd565b601055604080516080810182526001600160a01b03948516815260208101958652908101918252600060608201818152600e8054600181018255925291517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd600490920291820180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919096161790945593517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe840155517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff8301555090517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40090910155565b60025481565b610d85612040565b6001600160a01b0316610d96611c91565b6001600160a01b031614610df1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600d80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080600e8481548110610e3b57fe5b60009182526020808320878452600f825260408085206001600160a01b03898116875290845281862060049586029093016003810154815484517f70a082310000000000000000000000000000000000000000000000000000000081523098810198909852935191985093969395939492909116926370a08231926024808301939192829003018186803b158015610ed257600080fd5b505afa158015610ee6573d6000803e3d6000fd5b505050506040513d6020811015610efc57600080fd5b5051905086610f0a57506012545b836002015443118015610f1c57508015155b15610f8e576000610f31856002015443611ca0565b90506000610f6a600254610856600354610f646010546108568c60010154610f64600b548b61204490919063ffffffff16565b90612044565b9050610f89610f82846108568464e8d4a51000612044565b85906123bd565b935050505b610fb6836001015461085c64e8d4a5100061085686886000015461204490919063ffffffff16565b9450505050505b92915050565b6001546001600160a01b031681565b610fda612040565b6001600160a01b0316610feb611c91565b6001600160a01b031614611046576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6801a055690d9db800008111156110a4576040805162461bcd60e51b815260206004820152601460248201527f4d61782070657220626c6f636b20333020425357000000000000000000000000604482015290519081900360640190fd5b670de0b6b3a7640000811015611101576040805162461bcd60e51b815260206004820152601360248201527f4d696e2070657220626c6f636b20312042535700000000000000000000000000604482015290519081900360640190fd5b600b55565b600b5481565b6000600e60008154811061111c57fe5b600091825260208083203384527ff4803e074bd026baaf6ed2e288c9515f68c72fb7216eebdd7cae1718a53ec37590915260408320600490920201925090611163906116c8565b8054156111ac576000611198826001015461085c64e8d4a510006108568760030154876000015461204490919063ffffffff16565b905080156111aa576111aa3382612161565b505b82156111e85781546111c9906001600160a01b0316333086612417565b80546111d590846123bd565b81556012546111e490846123bd565b6012555b600382015481546112039164e8d4a510009161085691612044565b600182015560408051848152905160009133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3505050565b81611297576040805162461bcd60e51b815260206004820152601960248201527f77697468647261772042535720627920756e7374616b696e6700000000000000604482015290519081900360640190fd5b6000600e83815481106112a657fe5b60009182526020808320868452600f825260408085203386529092529220805460049092029092019250831115611324576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b61132d846116c8565b600061135b826001015461085c64e8d4a510006108568760030154876000015461204490919063ffffffff16565b90506113673382612161565b81546113739085612104565b80835560038401546113909164e8d4a51000916108569190612044565b600183015582546113ab906001600160a01b0316338661233d565b604080518581529051869133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050505050565b600d546001600160a01b0316611446576040805162461bcd60e51b815260206004820152601460248201527f6d6967726174653a206e6f206d69677261746f72000000000000000000000000604482015290519081900360640190fd5b6000600e828154811061145557fe5b600091825260208083206004928302018054604080517f70a082310000000000000000000000000000000000000000000000000000000081523095810195909552519195506001600160a01b0316939284926370a0823192602480840193829003018186803b1580156114c757600080fd5b505afa1580156114db573d6000803e3d6000fd5b505050506040513d60208110156114f157600080fd5b5051600d54909150611510906001600160a01b038481169116836124a5565b600d54604080517fce5494bb0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529151600093929092169163ce5494bb9160248082019260209290919082900301818787803b15801561157b57600080fd5b505af115801561158f573d6000803e3d6000fd5b505050506040513d60208110156115a557600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519192506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561160a57600080fd5b505afa15801561161e573d6000803e3d6000fd5b505050506040513d602081101561163457600080fd5b50518214611689576040805162461bcd60e51b815260206004820152600c60248201527f6d6967726174653a206261640000000000000000000000000000000000000000604482015290519081900360640190fd5b83547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039190911617909255505050565b60115481565b6000600e82815481106116d757fe5b90600052602060002090600402019050806002015443116116f857506118bc565b8054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561175b57600080fd5b505afa15801561176f573d6000803e3d6000fd5b505050506040513d602081101561178557600080fd5b505190508261179357506012545b600081116117a85750436002909101556118bc565b60006117b8836002015443611ca0565b905060006117eb600254610856600354610f646010546108568a60010154610f64600b548b61204490919063ffffffff16565b600154604080517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810184905290519293506001600160a01b03909116916340c10f19916044808201926020929091908290030181600087803b15801561185b57600080fd5b505af115801561186f573d6000803e3d6000fd5b505050506040513d602081101561188557600080fd5b506118a9905061189e846108568464e8d4a51000612044565b6003860154906123bd565b6003850155505043600290920191909155505b50565b6000600e82815481106118ce57fe5b60009182526020808320858452600f82526040808520338087529352909320805460049093029093018054909450611913926001600160a01b0391909116919061233d565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a360008082556001909101555050565b60055481565b611968612040565b6001600160a01b0316611979611c91565b6001600160a01b0316146119d4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c55565b600e5460005b818110156119f8576119f0816116c8565b6001016119df565b5050565b611a04612040565b6001600160a01b0316611a15611c91565b6001600160a01b031614611a70576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b8015611a7e57611a7e6119d9565b611abb82611ab5600e8681548110611a9257fe5b90600052602060002090600402016001015460105461210490919063ffffffff16565b906123bd565b60108190555081600e8481548110611acf57fe5b906000526020600020906004020160010181905550505050565b6009546001600160a01b031681565b611b00612040565b6001600160a01b0316611b11611c91565b6001600160a01b031614611b6c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b611bd6612040565b6001600160a01b0316611be7611c91565b6001600160a01b031614611c42576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600d546001600160a01b031681565b600c5481565b6000546001600160a01b031690565b600c54600090611cb490610f648486612104565b9392505050565b600f6020908152600092835260408084209091529082529020805460019091015482565b600a5481565b60035481565b611cf3612040565b6001600160a01b0316611d04611c91565b6001600160a01b031614611d5f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6007546001600160a01b031681565b6008546001600160a01b031681565b81611e09576040805162461bcd60e51b815260206004820152601660248201527f6465706f73697420425357206279207374616b696e6700000000000000000000604482015290519081900360640190fd5b6000600e8381548110611e1857fe5b60009182526020808320868452600f82526040808520338652909252922060049091029091019150611e49846116c8565b805415611e8c576000611e7e826001015461085c64e8d4a510006108568760030154876000015461204490919063ffffffff16565b9050611e8a3382612161565b505b8154611ea3906001600160a01b0316333086612417565b8054611eaf90846123bd565b8082556003830154611ecc9164e8d4a51000916108569190612044565b6001820155604080518481529051859133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a350505050565b611f16612040565b6001600160a01b0316611f27611c91565b6001600160a01b031614611f82576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611fc75760405162461bcd60e51b81526004018080602001828103825260268152602001806129126026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60045481565b3390565b60008261205357506000610fbd565b8282028284828161206057fe5b0414611cb45760405162461bcd60e51b815260040180806020018281038252602181526020018061295e6021913960400191505060405180910390fd5b60008082116120f3576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816120fc57fe5b049392505050565b60008282111561215b576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156121c557600080fd5b505afa1580156121d9573d6000803e3d6000fd5b505050506040513d60208110156121ef57600080fd5b505190508082111561229c57600154604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561226a57600080fd5b505af115801561227e573d6000803e3d6000fd5b505050506040513d602081101561229457600080fd5b506123389050565b600154604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561230b57600080fd5b505af115801561231f573d6000803e3d6000fd5b505050506040513d602081101561233557600080fd5b50505b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526123389084906125fb565b600082820183811015611cb4576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261249f9085906125fb565b50505050565b8015806125445750604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561251657600080fd5b505afa15801561252a573d6000803e3d6000fd5b505050506040513d602081101561254057600080fd5b5051155b61257f5760405162461bcd60e51b815260040180806020018281038252603681526020018061297f6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526123389084905b6060612650826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126ac9092919063ffffffff16565b8051909150156123385780806020019051602081101561266f57600080fd5b50516123385760405162461bcd60e51b815260040180806020018281038252602a8152602001806128e8602a913960400191505060405180910390fd5b60606126bb84846000856126c3565b949350505050565b6060824710156127045760405162461bcd60e51b81526004018080602001828103825260268152602001806129386026913960400191505060405180910390fd5b61270d8561283d565b61275e576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106127bb57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161277e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461281d576040519150601f19603f3d011682016040523d82523d6000602084013e612822565b606091505b5091509150612832828286612843565b979650505050505050565b3b151590565b60608315612852575081611cb4565b8251156128625782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156128ac578181015183820152602001612894565b50505050905090810190601f1680156128d95780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666542455032303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212204a4c26b403c6ae5840bb810ed5beb882d898ea7a9dfa0e2b4079661ca2d3301764736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d25760003560e01c80635312ea8e116101865780638da5cb5b116100e3578063d0d41fe111610097578063e2bbb15811610071578063e2bbb1581461066d578063f2fde38b14610690578063fc3c28af146106b6576102d2565b8063d0d41fe114610637578063d49e77cd1461065d578063e0dcd30d14610665576102d2565b806393f1a40b116100c857806393f1a40b146105e2578063b76e360c14610627578063be1193ea1461062f576102d2565b80638da5cb5b146105b75780638dbb1e3a146105bf576102d2565b806369d0c5b81161013a5780637c7be2fa1161011f5780637c7be2fa146105815780637cd07e47146105a75780638aa28550146105af576102d2565b806369d0c5b814610571578063715018a614610579576102d2565b80635ffe61461161016b5780635ffe614614610521578063630b5ba11461053e57806364482f7914610546576102d2565b80635312ea8e146104fc57806359d5335b14610519576102d2565b806323cf31181161023457806341441d3b116101e8578063454b0608116101cd578063454b0608146104ba57806348cd4cb1146104d757806351eb05a6146104df576102d2565b806341441d3b1461047a578063441a3e7014610497576102d2565b8063305371ee11610219578063305371ee14610431578063333667dc146104555780634062726514610472576102d2565b806323cf3118146103df578063295315bf14610405576102d2565b80631526fe271161028b57806318678a731161027057806318678a731461039b5780631eaaa045146103a357806321b1aecb146103d7576102d2565b80631526fe271461034657806317caf6f114610393576102d2565b8063081e3eda116102bc578063081e3eda146103195780631058d2811461032157806312270c401461033e576102d2565b8062a2e3be146102d7578063061e26af146102f1575b600080fd5b6102df6106be565b60408051918252519081900360200190f35b6103176004803603602081101561030757600080fd5b50356001600160a01b03166106c4565b005b6102df610772565b6103176004803603602081101561033757600080fd5b5035610778565b61031761090d565b6103636004803603602081101561035c57600080fd5b5035610b7b565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b6102df610bbc565b6102df610bc2565b610317600480360360608110156103b957600080fd5b508035906001600160a01b0360208201351690604001351515610bc8565b6102df610d77565b610317600480360360208110156103f557600080fd5b50356001600160a01b0316610d7d565b6102df6004803603604081101561041b57600080fd5b50803590602001356001600160a01b0316610e2b565b610439610fc3565b604080516001600160a01b039092168252519081900360200190f35b6103176004803603602081101561046b57600080fd5b5035610fd2565b6102df611106565b6103176004803603602081101561049057600080fd5b503561110c565b610317600480360360408110156104ad57600080fd5b5080359060200135611245565b610317600480360360208110156104d057600080fd5b50356113e9565b6102df6116c2565b610317600480360360208110156104f557600080fd5b50356116c8565b6103176004803603602081101561051257600080fd5b50356118bf565b6102df61195a565b6103176004803603602081101561053757600080fd5b5035611960565b6103176119d9565b6103176004803603606081101561055c57600080fd5b508035906020810135906040013515156119fc565b610439611ae9565b610317611af8565b6103176004803603602081101561059757600080fd5b50356001600160a01b0316611bce565b610439611c7c565b6102df611c8b565b610439611c91565b6102df600480360360408110156105d557600080fd5b5080359060200135611ca0565b61060e600480360360408110156105f857600080fd5b50803590602001356001600160a01b0316611cbb565b6040805192835260208301919091528051918290030190f35b6102df611cdf565b6102df611ce5565b6103176004803603602081101561064d57600080fd5b50356001600160a01b0316611ceb565b610439611d99565b610439611da8565b6103176004803603604081101561068357600080fd5b5080359060200135611db7565b610317600480360360208110156106a657600080fd5b50356001600160a01b0316611f0e565b6102df61203a565b60065481565b6106cc612040565b6001600160a01b03166106dd611c91565b6001600160a01b031614610738576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600e5490565b6000600e60008154811061078857fe5b600091825260208083203384527ff4803e074bd026baaf6ed2e288c9515f68c72fb7216eebdd7cae1718a53ec375909152604090922080546004909202909201925083111561081e576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b61082860006116c8565b6000610862826001015461085c64e8d4a510006108568760030154876000015461204490919063ffffffff16565b9061209d565b90612104565b90508015610874576108743382612161565b83156108af5781546108869085612104565b8255825461089e906001600160a01b0316338661233d565b6012546108ab9085612104565b6012555b600383015482546108ca9164e8d4a510009161085691612044565b600183015560408051858152905160009133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a350505050565b43600a5410610963576040805162461bcd60e51b815260206004820152601260248201527f7761697420666f72206e657720626c6f636b0000000000000000000000000000604482015290519081900360640190fd5b6000610971600a5443611ca0565b9050600061098a600b548361204490919063ffffffff16565b6001546007546002546004549394506001600160a01b03928316936340c10f1993909216916109bf9190610856908790612044565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610a0557600080fd5b505af1158015610a19573d6000803e3d6000fd5b505050506040513d6020811015610a2f57600080fd5b50506001546008546002546006546001600160a01b03938416936340c10f19931691610a6091610856908790612044565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610aa657600080fd5b505af1158015610aba573d6000803e3d6000fd5b505050506040513d6020811015610ad057600080fd5b50506001546009546002546005546001600160a01b03938416936340c10f19931691610b0191610856908790612044565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610b4757600080fd5b505af1158015610b5b573d6000803e3d6000fd5b505050506040513d6020811015610b7157600080fd5b505043600a555050565b600e8181548110610b8857fe5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b60105481565b60125481565b610bd0612040565b6001600160a01b0316610be1611c91565b6001600160a01b031614610c3c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b8015610c4a57610c4a6119d9565b60006011544311610c5d57601154610c5f565b435b601054909150610c6f90856123bd565b601055604080516080810182526001600160a01b03948516815260208101958652908101918252600060608201818152600e8054600181018255925291517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd600490920291820180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919096161790945593517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe840155517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff8301555090517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40090910155565b60025481565b610d85612040565b6001600160a01b0316610d96611c91565b6001600160a01b031614610df1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600d80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080600e8481548110610e3b57fe5b60009182526020808320878452600f825260408085206001600160a01b03898116875290845281862060049586029093016003810154815484517f70a082310000000000000000000000000000000000000000000000000000000081523098810198909852935191985093969395939492909116926370a08231926024808301939192829003018186803b158015610ed257600080fd5b505afa158015610ee6573d6000803e3d6000fd5b505050506040513d6020811015610efc57600080fd5b5051905086610f0a57506012545b836002015443118015610f1c57508015155b15610f8e576000610f31856002015443611ca0565b90506000610f6a600254610856600354610f646010546108568c60010154610f64600b548b61204490919063ffffffff16565b90612044565b9050610f89610f82846108568464e8d4a51000612044565b85906123bd565b935050505b610fb6836001015461085c64e8d4a5100061085686886000015461204490919063ffffffff16565b9450505050505b92915050565b6001546001600160a01b031681565b610fda612040565b6001600160a01b0316610feb611c91565b6001600160a01b031614611046576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6801a055690d9db800008111156110a4576040805162461bcd60e51b815260206004820152601460248201527f4d61782070657220626c6f636b20333020425357000000000000000000000000604482015290519081900360640190fd5b670de0b6b3a7640000811015611101576040805162461bcd60e51b815260206004820152601360248201527f4d696e2070657220626c6f636b20312042535700000000000000000000000000604482015290519081900360640190fd5b600b55565b600b5481565b6000600e60008154811061111c57fe5b600091825260208083203384527ff4803e074bd026baaf6ed2e288c9515f68c72fb7216eebdd7cae1718a53ec37590915260408320600490920201925090611163906116c8565b8054156111ac576000611198826001015461085c64e8d4a510006108568760030154876000015461204490919063ffffffff16565b905080156111aa576111aa3382612161565b505b82156111e85781546111c9906001600160a01b0316333086612417565b80546111d590846123bd565b81556012546111e490846123bd565b6012555b600382015481546112039164e8d4a510009161085691612044565b600182015560408051848152905160009133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3505050565b81611297576040805162461bcd60e51b815260206004820152601960248201527f77697468647261772042535720627920756e7374616b696e6700000000000000604482015290519081900360640190fd5b6000600e83815481106112a657fe5b60009182526020808320868452600f825260408085203386529092529220805460049092029092019250831115611324576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b61132d846116c8565b600061135b826001015461085c64e8d4a510006108568760030154876000015461204490919063ffffffff16565b90506113673382612161565b81546113739085612104565b80835560038401546113909164e8d4a51000916108569190612044565b600183015582546113ab906001600160a01b0316338661233d565b604080518581529051869133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050505050565b600d546001600160a01b0316611446576040805162461bcd60e51b815260206004820152601460248201527f6d6967726174653a206e6f206d69677261746f72000000000000000000000000604482015290519081900360640190fd5b6000600e828154811061145557fe5b600091825260208083206004928302018054604080517f70a082310000000000000000000000000000000000000000000000000000000081523095810195909552519195506001600160a01b0316939284926370a0823192602480840193829003018186803b1580156114c757600080fd5b505afa1580156114db573d6000803e3d6000fd5b505050506040513d60208110156114f157600080fd5b5051600d54909150611510906001600160a01b038481169116836124a5565b600d54604080517fce5494bb0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529151600093929092169163ce5494bb9160248082019260209290919082900301818787803b15801561157b57600080fd5b505af115801561158f573d6000803e3d6000fd5b505050506040513d60208110156115a557600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519192506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561160a57600080fd5b505afa15801561161e573d6000803e3d6000fd5b505050506040513d602081101561163457600080fd5b50518214611689576040805162461bcd60e51b815260206004820152600c60248201527f6d6967726174653a206261640000000000000000000000000000000000000000604482015290519081900360640190fd5b83547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039190911617909255505050565b60115481565b6000600e82815481106116d757fe5b90600052602060002090600402019050806002015443116116f857506118bc565b8054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561175b57600080fd5b505afa15801561176f573d6000803e3d6000fd5b505050506040513d602081101561178557600080fd5b505190508261179357506012545b600081116117a85750436002909101556118bc565b60006117b8836002015443611ca0565b905060006117eb600254610856600354610f646010546108568a60010154610f64600b548b61204490919063ffffffff16565b600154604080517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810184905290519293506001600160a01b03909116916340c10f19916044808201926020929091908290030181600087803b15801561185b57600080fd5b505af115801561186f573d6000803e3d6000fd5b505050506040513d602081101561188557600080fd5b506118a9905061189e846108568464e8d4a51000612044565b6003860154906123bd565b6003850155505043600290920191909155505b50565b6000600e82815481106118ce57fe5b60009182526020808320858452600f82526040808520338087529352909320805460049093029093018054909450611913926001600160a01b0391909116919061233d565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a360008082556001909101555050565b60055481565b611968612040565b6001600160a01b0316611979611c91565b6001600160a01b0316146119d4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c55565b600e5460005b818110156119f8576119f0816116c8565b6001016119df565b5050565b611a04612040565b6001600160a01b0316611a15611c91565b6001600160a01b031614611a70576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b8015611a7e57611a7e6119d9565b611abb82611ab5600e8681548110611a9257fe5b90600052602060002090600402016001015460105461210490919063ffffffff16565b906123bd565b60108190555081600e8481548110611acf57fe5b906000526020600020906004020160010181905550505050565b6009546001600160a01b031681565b611b00612040565b6001600160a01b0316611b11611c91565b6001600160a01b031614611b6c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b611bd6612040565b6001600160a01b0316611be7611c91565b6001600160a01b031614611c42576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600d546001600160a01b031681565b600c5481565b6000546001600160a01b031690565b600c54600090611cb490610f648486612104565b9392505050565b600f6020908152600092835260408084209091529082529020805460019091015482565b600a5481565b60035481565b611cf3612040565b6001600160a01b0316611d04611c91565b6001600160a01b031614611d5f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6007546001600160a01b031681565b6008546001600160a01b031681565b81611e09576040805162461bcd60e51b815260206004820152601660248201527f6465706f73697420425357206279207374616b696e6700000000000000000000604482015290519081900360640190fd5b6000600e8381548110611e1857fe5b60009182526020808320868452600f82526040808520338652909252922060049091029091019150611e49846116c8565b805415611e8c576000611e7e826001015461085c64e8d4a510006108568760030154876000015461204490919063ffffffff16565b9050611e8a3382612161565b505b8154611ea3906001600160a01b0316333086612417565b8054611eaf90846123bd565b8082556003830154611ecc9164e8d4a51000916108569190612044565b6001820155604080518481529051859133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a350505050565b611f16612040565b6001600160a01b0316611f27611c91565b6001600160a01b031614611f82576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611fc75760405162461bcd60e51b81526004018080602001828103825260268152602001806129126026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60045481565b3390565b60008261205357506000610fbd565b8282028284828161206057fe5b0414611cb45760405162461bcd60e51b815260040180806020018281038252602181526020018061295e6021913960400191505060405180910390fd5b60008082116120f3576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816120fc57fe5b049392505050565b60008282111561215b576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156121c557600080fd5b505afa1580156121d9573d6000803e3d6000fd5b505050506040513d60208110156121ef57600080fd5b505190508082111561229c57600154604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561226a57600080fd5b505af115801561227e573d6000803e3d6000fd5b505050506040513d602081101561229457600080fd5b506123389050565b600154604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561230b57600080fd5b505af115801561231f573d6000803e3d6000fd5b505050506040513d602081101561233557600080fd5b50505b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526123389084906125fb565b600082820183811015611cb4576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261249f9085906125fb565b50505050565b8015806125445750604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561251657600080fd5b505afa15801561252a573d6000803e3d6000fd5b505050506040513d602081101561254057600080fd5b5051155b61257f5760405162461bcd60e51b815260040180806020018281038252603681526020018061297f6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526123389084905b6060612650826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126ac9092919063ffffffff16565b8051909150156123385780806020019051602081101561266f57600080fd5b50516123385760405162461bcd60e51b815260040180806020018281038252602a8152602001806128e8602a913960400191505060405180910390fd5b60606126bb84846000856126c3565b949350505050565b6060824710156127045760405162461bcd60e51b81526004018080602001828103825260268152602001806129386026913960400191505060405180910390fd5b61270d8561283d565b61275e576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106127bb57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161277e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461281d576040519150601f19603f3d011682016040523d82523d6000602084013e612822565b606091505b5091509150612832828286612843565b979650505050505050565b3b151590565b60608315612852575081611cb4565b8251156128625782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156128ac578181015183820152602001612894565b50505050905090810190601f1680156128d95780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666542455032303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212204a4c26b403c6ae5840bb810ed5beb882d898ea7a9dfa0e2b4079661ca2d3301764736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 290,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15587,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "BSW",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(BSWToken)15549"
      },
      {
        "astId": 15590,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "percentDec",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 15592,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "stakingPercent",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 15594,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "devPercent",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 15596,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "refPercent",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 15598,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "safuPercent",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15600,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "devaddr",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 15602,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "safuaddr",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 15604,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "refAddr",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 15606,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "lastBlockDevWithdraw",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 15608,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "BSWPerBlock",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 15611,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "BONUS_MULTIPLIER",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 15613,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "migrator",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IMigratorChef)15563"
      },
      {
        "astId": 15616,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "poolInfo",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(PoolInfo)15585_storage)dyn_storage"
      },
      {
        "astId": 15622,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "userInfo",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)15576_storage))"
      },
      {
        "astId": 15625,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 15627,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "startBlock",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 15629,
        "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
        "label": "depositedBsw",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)15585_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)15585_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterChefBSW.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(BSWToken)15549": {
        "encoding": "inplace",
        "label": "contract BSWToken",
        "numberOfBytes": "20"
      },
      "t_contract(IBEP20)17209": {
        "encoding": "inplace",
        "label": "contract IBEP20",
        "numberOfBytes": "20"
      },
      "t_contract(IMigratorChef)15563": {
        "encoding": "inplace",
        "label": "contract IMigratorChef",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)15576_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterChefBSW.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)15576_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)15576_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MasterChefBSW.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)15576_storage)"
      },
      "t_struct(PoolInfo)15585_storage": {
        "encoding": "inplace",
        "label": "struct MasterChefBSW.PoolInfo",
        "members": [
          {
            "astId": 15578,
            "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IBEP20)17209"
          },
          {
            "astId": 15580,
            "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15582,
            "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15584,
            "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
            "label": "accBSWPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)15576_storage": {
        "encoding": "inplace",
        "label": "struct MasterChefBSW.UserInfo",
        "members": [
          {
            "astId": 15573,
            "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15575,
            "contract": "contracts/test/biswap/MasterChefBSW.sol:MasterChefBSW",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}