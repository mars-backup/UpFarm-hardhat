{
  "address": "0xbdAD2803CF564ac71980c6992129F6Bb7692C4cF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_cakeAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isAutoComp",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_isCollect",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToUpPath0",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToUpPath1",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToToken0Path0",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToToken0Path1",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToToken1Path0",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToToken1Path1",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_controllerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buyBackRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_entranceFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFeeFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_core",
          "type": "address"
        }
      ],
      "name": "CoreUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyBackRouter0Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_buyBackRouter1Address",
          "type": "address"
        }
      ],
      "name": "SetBuyBackRouterAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isCollect",
          "type": "bool"
        }
      ],
      "name": "SetCollect",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_earnedToToken0Path0",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_earnedToToken0Path1",
          "type": "address[]"
        }
      ],
      "name": "SetEarnedToToken0Path",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_earnedToToken0Router0Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_earnedToToken0Router1Address",
          "type": "address"
        }
      ],
      "name": "SetEarnedToToken0RouterAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_earnedToToken1Path0",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_earnedToToken1Path1",
          "type": "address[]"
        }
      ],
      "name": "SetEarnedToToken1Path",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_earnedToToken1Router0Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_earnedToToken1Router1Address",
          "type": "address"
        }
      ],
      "name": "SetEarnedToToken1RouterAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_earnedToUpPath0",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_earnedToUpPath1",
          "type": "address[]"
        }
      ],
      "name": "SetEarnedToUpPath",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_onlyGov",
          "type": "bool"
        }
      ],
      "name": "SetOnlyGov",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_rewardsAddress",
          "type": "address"
        }
      ],
      "name": "SetRewardsAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_entranceFeeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawFeeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_controllerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_buyBackRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_slippageFactor",
          "type": "uint256"
        }
      ],
      "name": "SetSettings",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_wantRouterAddress",
          "type": "address"
        }
      ],
      "name": "SetWantRouterAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MASTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_SHARES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPFarmAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackRateMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackRateUL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackRouter0Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackRouter1Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerFeeMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerFeeUL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToToken0Path0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToToken0Path1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnedToToken0Router0Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnedToToken0Router1Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToToken1Path0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToToken1Path1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnedToToken1Router0Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnedToToken1Router1Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToUpPath0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToUpPath1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFeeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFeeFactorLL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFeeFactorMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAutoComp",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCAKEStaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCollect",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSameAssetDeposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEarnBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onlyGov",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyBackRouter0Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyBackRouter1Address",
          "type": "address"
        }
      ],
      "name": "setBuyBackRouterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isCollect",
          "type": "bool"
        }
      ],
      "name": "setCollect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "core_",
          "type": "address"
        }
      ],
      "name": "setCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_earnedToToken0Path0",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToToken0Path1",
          "type": "address[]"
        }
      ],
      "name": "setEarnedToToken0Path",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_earnedToToken0Router0Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_earnedToToken0Router1Address",
          "type": "address"
        }
      ],
      "name": "setEarnedToToken0RouterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_earnedToToken1Path0",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToToken1Path1",
          "type": "address[]"
        }
      ],
      "name": "setEarnedToToken1Path",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_earnedToToken1Router0Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_earnedToToken1Router1Address",
          "type": "address"
        }
      ],
      "name": "setEarnedToToken1RouterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_earnedToUpPath0",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToUpPath1",
          "type": "address[]"
        }
      ],
      "name": "setEarnedToUpPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_onlyGov",
          "type": "bool"
        }
      ],
      "name": "setOnlyGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsAddress",
          "type": "address"
        }
      ],
      "name": "setRewardsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entranceFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_controllerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buyBackRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippageFactor",
          "type": "uint256"
        }
      ],
      "name": "setSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wantRouterAddress",
          "type": "address"
        }
      ],
      "name": "setWantRouterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageFactorUL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantLockedTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantRouterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wbnbAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactorLL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactorMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapBNB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1138d7b82a1e555d8cba19f85afe7491bc678c7ef8ec4a03989f3ca834d0d83d",
  "receipt": {
    "to": null,
    "from": "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
    "contractAddress": "0xbdAD2803CF564ac71980c6992129F6Bb7692C4cF",
    "transactionIndex": 0,
    "gasUsed": "5448855",
    "logsBloom": "0x
    "blockHash": "0x35ca4f69b28058bbb4dcbe0c782d6a1c94a9c6d3b9181ac91901db367e95e512",
    "transactionHash": "0x1138d7b82a1e555d8cba19f85afe7491bc678c7ef8ec4a03989f3ca834d0d83d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17954877,
        "transactionHash": "0x1138d7b82a1e555d8cba19f85afe7491bc678c7ef8ec4a03989f3ca834d0d83d",
        "address": "0xbdAD2803CF564ac71980c6992129F6Bb7692C4cF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001904bfcb93edc9bf961eead2e5c0de81dcc1d37d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x35ca4f69b28058bbb4dcbe0c782d6a1c94a9c6d3b9181ac91901db367e95e512"
      }
    ],
    "blockNumber": 17954877,
    "cumulativeGasUsed": "5448855",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x40fc3759Ccc4E466650891a91F34Bdd6129094D6",
      "0x0000000000000000000000000000000000000000",
      "0x99B223Cd1f1E14B7EabD46Bc7a4a21536beDC958",
      "0x83ac0bD6315Eea678CDe633957820058AD17139A",
      "0xF606e1b3C156064bE059bb4287D08FD070795558",
      "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd",
      "0xDCCC0f640Aa5A3D7943ea24aaCb79E7D622dE578",
      "0xDCCC0f640Aa5A3D7943ea24aaCb79E7D622dE578",
      "0xD21cBd58d1D8FeaBBC8c05F5bF2241321Ef9DE1c",
      "0xa84400261e8563BE19633B7477fDEb0634bAC5DA",
      "0x55e71Da3767102C6Ebb1F5851031b373dc904A3f",
      "0x55e71Da3767102C6Ebb1F5851031b373dc904A3f",
      "0x0000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000",
      "0x55e71Da3767102C6Ebb1F5851031b373dc904A3f",
      "0x9ac64cc6e4415144c455bd8e4837fea55603e5c3"
    ],
    1,
    "0xDCCC0f640Aa5A3D7943ea24aaCb79E7D622dE578",
    true,
    false,
    [
      "0xDCCC0f640Aa5A3D7943ea24aaCb79E7D622dE578",
      "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd"
    ],
    [
      "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd",
      "0x9Ff7010Fe2DbdD638257b8eaA1a65e73129361A3",
      "0x83ac0bD6315Eea678CDe633957820058AD17139A"
    ],
    [
      "0xDCCC0f640Aa5A3D7943ea24aaCb79E7D622dE578",
      "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd"
    ],
    [],
    [],
    [],
    300,
    200,
    9990,
    9990
  ],
  "solcInputHash": "2dcb6d018d9e772ddedd4e5d7872fca7",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_cakeAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAutoComp\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isCollect\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToUpPath0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToUpPath1\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToToken0Path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToToken0Path1\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToToken1Path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToToken1Path1\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_entranceFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFeeFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyBackRouter0Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyBackRouter1Address\",\"type\":\"address\"}],\"name\":\"SetBuyBackRouterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isCollect\",\"type\":\"bool\"}],\"name\":\"SetCollect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_earnedToToken0Path0\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_earnedToToken0Path1\",\"type\":\"address[]\"}],\"name\":\"SetEarnedToToken0Path\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_earnedToToken0Router0Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_earnedToToken0Router1Address\",\"type\":\"address\"}],\"name\":\"SetEarnedToToken0RouterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_earnedToToken1Path0\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_earnedToToken1Path1\",\"type\":\"address[]\"}],\"name\":\"SetEarnedToToken1Path\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_earnedToToken1Router0Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_earnedToToken1Router1Address\",\"type\":\"address\"}],\"name\":\"SetEarnedToToken1RouterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_earnedToUpPath0\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_earnedToUpPath1\",\"type\":\"address[]\"}],\"name\":\"SetEarnedToUpPath\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_onlyGov\",\"type\":\"bool\"}],\"name\":\"SetOnlyGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardsAddress\",\"type\":\"address\"}],\"name\":\"SetRewardsAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_entranceFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_slippageFactor\",\"type\":\"uint256\"}],\"name\":\"SetSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_wantRouterAddress\",\"type\":\"address\"}],\"name\":\"SetWantRouterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MASTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_SHARES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPFarmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRateMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRateUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRouter0Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRouter1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFeeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFeeUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToToken0Path0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToToken0Path1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedToToken0Router0Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedToToken0Router1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToToken1Path0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToToken1Path1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedToToken1Router0Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedToToken1Router1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToUpPath0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToUpPath1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeFactorLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeFactorMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoComp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCAKEStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCollect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSameAssetDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEarnBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyGov\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyBackRouter0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyBackRouter1Address\",\"type\":\"address\"}],\"name\":\"setBuyBackRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isCollect\",\"type\":\"bool\"}],\"name\":\"setCollect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"core_\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_earnedToToken0Path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToToken0Path1\",\"type\":\"address[]\"}],\"name\":\"setEarnedToToken0Path\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_earnedToToken0Router0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_earnedToToken0Router1Address\",\"type\":\"address\"}],\"name\":\"setEarnedToToken0RouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_earnedToToken1Path0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToToken1Path1\",\"type\":\"address[]\"}],\"name\":\"setEarnedToToken1Path\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_earnedToToken1Router0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_earnedToToken1Router1Address\",\"type\":\"address\"}],\"name\":\"setEarnedToToken1RouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_earnedToUpPath0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToUpPath1\",\"type\":\"address[]\"}],\"name\":\"setEarnedToUpPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyGov\",\"type\":\"bool\"}],\"name\":\"setOnlyGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsAddress\",\"type\":\"address\"}],\"name\":\"setRewardsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entranceFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippageFactor\",\"type\":\"uint256\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wantRouterAddress\",\"type\":\"address\"}],\"name\":\"setWantRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactorUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantLockedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactorLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactorMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrategyPCS.sol\":\"StrategyPCS\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IPancakeswapFarm.sol\\\";\\nimport \\\"./interfaces/IPancakeRouter02.sol\\\";\\nimport \\\"./interfaces/IWBNB.sol\\\";\\nimport \\\"./refs/CoreRef.sol\\\";\\n\\ninterface IBurnable {\\n    function burn(uint256 amount) external;\\n}\\n\\nabstract contract Strategy is Ownable, CoreRef, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant MINIMUM_SHARES = 10 ** 4;\\n\\n    bool public isCAKEStaking;\\n    bool public isSameAssetDeposit;\\n    bool public isAutoComp;\\n    bool public isCollect;\\n\\n    bool public onlyGov = true;\\n\\n    address public farmContractAddress;\\n    uint256 public pid;\\n    address public wantAddress;\\n    address public token0Address;\\n    address public token1Address;\\n    address public earnedAddress;\\n\\n    address public wbnbAddress;\\n    address public UPFarmAddress;\\n    address public UPAddress;\\n\\n    uint256 public lastEarnBlock = 0;\\n    uint256 public wantLockedTotal = 0;\\n    uint256 public sharesTotal = 0;\\n\\n    uint256 public controllerFee = 0; // 70;\\n    uint256 public constant controllerFeeMax = 10000; // 100 = 1%\\n    uint256 public constant controllerFeeUL = 9900;\\n\\n    uint256 public buyBackRate = 0; // 250;\\n    uint256 public constant buyBackRateMax = 10000; // 100 = 1%\\n    uint256 public constant buyBackRateUL = 9900;\\n    address public rewardsAddress;\\n\\n    uint256 public entranceFeeFactor = 9990; // < 0.1% entrance fee - goes to pool + prevents front-running\\n    uint256 public constant entranceFeeFactorMax = 10000;\\n    uint256 public constant entranceFeeFactorLL = 9000; // 10% is the max entrance fee settable. LL = lowerlimit\\n\\n    uint256 public withdrawFeeFactor = 10000; // 0.1% withdraw fee - goes to pool\\n    uint256 public constant withdrawFeeFactorMax = 10000;\\n    uint256 public constant withdrawFeeFactorLL = 9000; // 10% is the max entrance fee settable. LL = lowerlimit\\n\\n    uint256 public slippageFactor = 950; // 5% default slippage tolerance\\n    uint256 public constant slippageFactorUL = 999;\\n\\n    address public earnedToToken0Router0Address;\\n    address public earnedToToken0Router1Address;\\n    address public earnedToToken1Router0Address;\\n    address public earnedToToken1Router1Address;\\n    address public wantRouterAddress;\\n    address public buyBackRouter0Address;\\n    address public buyBackRouter1Address;\\n    address[] public earnedToUpPath0;\\n    address[] public earnedToUpPath1;\\n    address[] public earnedToToken0Path0;\\n    address[] public earnedToToken0Path1;\\n    address[] public earnedToToken1Path0;\\n    address[] public earnedToToken1Path1;\\n\\n    event SetSettings(\\n        uint256 _entranceFeeFactor,\\n        uint256 _withdrawFeeFactor,\\n        uint256 _controllerFee,\\n        uint256 _buyBackRate,\\n        uint256 _slippageFactor\\n    );\\n\\n    event SetRewardsAddress(address _rewardsAddress);\\n    event SetCollect(bool _isCollect);\\n    event SetEarnedToUpPath(address[] _earnedToUpPath0, address[] _earnedToUpPath1);\\n    event SetEarnedToToken0Path(address[] _earnedToToken0Path0, address[] _earnedToToken0Path1);\\n    event SetEarnedToToken1Path(address[] _earnedToToken1Path0, address[] _earnedToToken1Path1);\\n    event SetEarnedToToken0RouterAddress(address _earnedToToken0Router0Address, address _earnedToToken0Router1Address);\\n    event SetEarnedToToken1RouterAddress(address _earnedToToken1Router0Address, address _earnedToToken1Router1Address);\\n    event SetWantRouterAddress(address _wantRouterAddress);\\n    event SetBuyBackRouterAddress(address _buyBackRouter0Address, address _buyBackRouter1Address);\\n    event SetOnlyGov(bool _onlyGov);\\n    event Deposit(address user, uint256 amount);\\n    event Withdraw(address user, uint256 amount);\\n\\n    function deposit(uint256 _wantAmt)\\n        external\\n        virtual\\n        onlyOwner\\n        nonReentrant\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        bool isFirst = sharesTotal == 0;\\n        require(!isFirst || _wantAmt > MINIMUM_SHARES, \\\"first deposit amount <= MINIMUM_SHARES\\\");\\n\\n        uint256 beforeAmount =  IERC20(wantAddress).balanceOf(address(this));\\n        IERC20(wantAddress).safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            _wantAmt\\n        );\\n        uint256 afterAmount =  IERC20(wantAddress).balanceOf(address(this));\\n\\n        uint256 realamount = afterAmount.sub(beforeAmount);\\n\\n        uint256 sharesAdded = realamount;\\n        if (wantLockedTotal > 0 && sharesTotal > 0) {\\n            sharesAdded = realamount\\n                .mul(sharesTotal)\\n                .mul(entranceFeeFactor)\\n                .div(wantLockedTotal)\\n                .div(entranceFeeFactorMax);\\n        }\\n        sharesTotal = sharesTotal.add(sharesAdded);\\n\\n        if (isAutoComp) {\\n            _farm(realamount);\\n        } else {\\n            wantLockedTotal = wantLockedTotal.add(realamount);\\n        }\\n\\n        if (isFirst) {\\n            sharesAdded = sharesAdded.sub(MINIMUM_SHARES);\\n        }\\n\\n        if (isAutoComp && isCollect) {\\n            _collect();\\n        }\\n\\n        emit Deposit(msg.sender, realamount);\\n        return sharesAdded;\\n    }\\n\\n    function farm() external virtual onlyGuardianOrGovernor nonReentrant {\\n        _farm(IERC20(wantAddress).balanceOf(address(this)));\\n    }\\n\\n    function _farm(uint256 wantAmt) internal virtual {\\n        require(isAutoComp, \\\"!isAutoComp\\\");\\n        wantLockedTotal = wantLockedTotal.add(wantAmt);\\n        IERC20(wantAddress).safeIncreaseAllowance(farmContractAddress, wantAmt);\\n\\n        if (isCAKEStaking) {\\n            IPancakeswapFarm(farmContractAddress).enterStaking(wantAmt);\\n        } else {\\n            IPancakeswapFarm(farmContractAddress).deposit(pid, wantAmt);\\n        }\\n    }\\n\\n    function _unfarm(uint256 _wantAmt) internal virtual {\\n        if (isCAKEStaking) {\\n            IPancakeswapFarm(farmContractAddress).leaveStaking(_wantAmt);\\n        } else {\\n            IPancakeswapFarm(farmContractAddress).withdraw(pid, _wantAmt);\\n        }\\n    }\\n\\n    function _collect() internal virtual {\\n        if (earnedAddress == wbnbAddress) {\\n            _wrapBNB();\\n        }\\n        uint256 earnedAmt = IERC20(earnedAddress).balanceOf(address(this));\\n\\n        if (earnedAmt > 0 && rewardsAddress != address(0)) {\\n            IERC20(earnedAddress).safeTransfer(rewardsAddress, earnedAmt);\\n        }\\n    }\\n\\n    function withdraw(uint256 _wantAmt)\\n        public\\n        virtual\\n        onlyOwner\\n        nonReentrant\\n        returns (uint256)\\n    {        \\n        require(_wantAmt > 0, \\\"_wantAmt <= 0\\\");\\n        uint256 sharesRemoved = _wantAmt.mul(sharesTotal).div(wantLockedTotal);\\n        require(sharesRemoved > 0, \\\"sharesRemoved <= 0\\\");\\n        if (sharesRemoved > sharesTotal) {\\n            sharesRemoved = sharesTotal;\\n        }\\n        sharesTotal = sharesTotal.sub(sharesRemoved);\\n\\n        if (withdrawFeeFactor < withdrawFeeFactorMax) {\\n            _wantAmt = _wantAmt.mul(withdrawFeeFactor).div(\\n                withdrawFeeFactorMax\\n            );\\n        }\\n\\n        if (isAutoComp) {\\n            _unfarm(_wantAmt);\\n        }\\n\\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\\n        if (_wantAmt > wantAmt) {\\n            _wantAmt = wantAmt;\\n        }\\n\\n        if (wantLockedTotal < _wantAmt) {\\n            _wantAmt = wantLockedTotal;\\n        }\\n\\n        wantLockedTotal = wantLockedTotal.sub(_wantAmt);\\n\\n        IERC20(wantAddress).safeTransfer(UPFarmAddress, _wantAmt);\\n\\n        if (isAutoComp && isCollect) {\\n            _collect();\\n        }\\n\\n        emit Withdraw(msg.sender,_wantAmt);\\n\\n        return sharesRemoved;\\n    }\\n\\n    function harvest() internal virtual {\\n        _unfarm(0);\\n    }\\n\\n    function earn() external virtual nonReentrant whenNotPaused {\\n        require(isAutoComp, \\\"!isAutoComp\\\");\\n        require(\\n            !onlyGov || core().isGovernor(msg.sender) || core().isGuardian(msg.sender),\\n            \\\"!gov\\\"\\n        );\\n\\n        harvest();\\n\\n        if (isCollect) {\\n            _collect();\\n            lastEarnBlock = block.number;\\n            return;\\n        }\\n\\n        if (earnedAddress == wbnbAddress) {\\n            _wrapBNB();\\n        }\\n\\n        uint256 earnedAmt = IERC20(earnedAddress).balanceOf(address(this));\\n\\n        earnedAmt = distributeFees(earnedAmt);\\n        earnedAmt = buyBack(earnedAmt);\\n\\n        if (isCAKEStaking || isSameAssetDeposit) {\\n            lastEarnBlock = block.number;\\n            _farm(IERC20(wantAddress).balanceOf(address(this)));\\n            return;\\n        }\\n\\n        if (token0Address == token1Address) {\\n            IERC20(earnedAddress).safeApprove(earnedToToken0Router0Address, 0);\\n            IERC20(earnedAddress).safeIncreaseAllowance(\\n                earnedToToken0Router0Address,\\n                earnedAmt\\n            );\\n            _safeSwapAuto(\\n                earnedToToken0Router0Address,\\n                earnedToToken0Router1Address,\\n                earnedAmt,\\n                slippageFactor,\\n                earnedToToken0Path0,\\n                earnedToToken0Path1,\\n                address(this),\\n                block.timestamp.add(600)\\n            );\\n        } else {\\n            if (earnedAddress != token0Address) {\\n                IERC20(earnedAddress).safeApprove(earnedToToken0Router0Address, 0);\\n                IERC20(earnedAddress).safeIncreaseAllowance(\\n                    earnedToToken0Router0Address,\\n                    earnedAmt.div(2)\\n                );\\n                _safeSwapAuto(\\n                    earnedToToken0Router0Address,\\n                    earnedToToken0Router1Address,\\n                    earnedAmt.div(2),\\n                    slippageFactor,\\n                    earnedToToken0Path0,\\n                    earnedToToken0Path1,\\n                    address(this),\\n                    block.timestamp.add(600)\\n                );\\n            }\\n\\n            if (earnedAddress != token1Address) {\\n                IERC20(earnedAddress).safeApprove(earnedToToken1Router0Address, 0);\\n                IERC20(earnedAddress).safeIncreaseAllowance(\\n                    earnedToToken1Router0Address,\\n                    earnedAmt.div(2)\\n                );\\n                _safeSwapAuto(\\n                    earnedToToken1Router0Address,\\n                    earnedToToken1Router1Address,\\n                    earnedAmt.div(2),\\n                    slippageFactor,\\n                    earnedToToken1Path0,\\n                    earnedToToken1Path1,\\n                    address(this),\\n                    block.timestamp.add(600)\\n                );\\n            }\\n\\n            uint256 token0Amt = IERC20(token0Address).balanceOf(address(this));\\n            uint256 token1Amt = IERC20(token1Address).balanceOf(address(this));\\n            if (token0Amt > 0 && token1Amt > 0) {\\n                IERC20(token0Address).safeIncreaseAllowance(\\n                    wantRouterAddress,\\n                    token0Amt\\n                );\\n                IERC20(token1Address).safeIncreaseAllowance(\\n                    wantRouterAddress,\\n                    token1Amt\\n                );\\n                IPancakeRouter02(wantRouterAddress).addLiquidity(\\n                    token0Address,\\n                    token1Address,\\n                    token0Amt,\\n                    token1Amt,\\n                    0,\\n                    0,\\n                    address(this),\\n                    block.timestamp.add(600)\\n                );\\n            }\\n        }\\n\\n        lastEarnBlock = block.number;\\n\\n        _farm(IERC20(wantAddress).balanceOf(address(this)));\\n    }\\n\\n    function buyBack(uint256 _earnedAmt) internal virtual returns (uint256) {\\n        if (buyBackRate <= 0) {\\n            return _earnedAmt;\\n        }\\n\\n        uint256 buyBackAmt = _earnedAmt.mul(buyBackRate).div(buyBackRateMax);\\n        uint256 burnAmt = buyBackAmt;\\n        if (earnedAddress != UPAddress) {\\n            IERC20(earnedAddress).safeApprove(buyBackRouter0Address, 0);\\n            IERC20(earnedAddress).safeIncreaseAllowance(\\n                buyBackRouter0Address,\\n                buyBackAmt\\n            );\\n            uint256 before = IERC20(UPAddress).balanceOf(address(this));\\n            _safeSwapAuto(\\n                buyBackRouter0Address,\\n                buyBackRouter1Address,\\n                buyBackAmt,\\n                slippageFactor,\\n                earnedToUpPath0,\\n                earnedToUpPath1,\\n                address(this),\\n                block.timestamp.add(600)\\n            );\\n            burnAmt = IERC20(UPAddress).balanceOf(address(this)).sub(before);\\n        }\\n\\n        IBurnable(UPAddress).burn(burnAmt);\\n\\n        return _earnedAmt.sub(buyBackAmt);\\n    }\\n\\n    function distributeFees(uint256 _earnedAmt)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        if (_earnedAmt > 0) {\\n            if (controllerFee > 0) {\\n                uint256 fee =\\n                    _earnedAmt.mul(controllerFee).div(controllerFeeMax);\\n                IERC20(earnedAddress).safeTransfer(rewardsAddress, fee);\\n                _earnedAmt = _earnedAmt.sub(fee);\\n            }\\n        }\\n\\n        return _earnedAmt;\\n    }\\n\\n    function setSettings(\\n        uint256 _entranceFeeFactor,\\n        uint256 _withdrawFeeFactor,\\n        uint256 _controllerFee,\\n        uint256 _buyBackRate,\\n        uint256 _slippageFactor\\n    ) external virtual onlyGovernor {\\n        require(\\n            _entranceFeeFactor >= entranceFeeFactorLL,\\n            \\\"_entranceFeeFactor too low\\\"\\n        );\\n        require(\\n            _entranceFeeFactor <= entranceFeeFactorMax,\\n            \\\"_entranceFeeFactor too high\\\"\\n        );\\n        entranceFeeFactor = _entranceFeeFactor;\\n\\n        require(\\n            _withdrawFeeFactor >= withdrawFeeFactorLL,\\n            \\\"_withdrawFeeFactor too low\\\"\\n        );\\n        require(\\n            _withdrawFeeFactor <= withdrawFeeFactorMax,\\n            \\\"_withdrawFeeFactor too high\\\"\\n        );\\n        withdrawFeeFactor = _withdrawFeeFactor;\\n\\n        require(_controllerFee <= controllerFeeUL, \\\"_controllerFee too high\\\");\\n        controllerFee = _controllerFee;\\n\\n        require(_buyBackRate <= buyBackRateUL, \\\"_buyBackRate too high\\\");\\n        buyBackRate = _buyBackRate;\\n\\n        require(\\n            _slippageFactor <= slippageFactorUL,\\n            \\\"_slippageFactor too high\\\"\\n        );\\n        slippageFactor = _slippageFactor;\\n\\n        emit SetSettings(\\n            _entranceFeeFactor,\\n            _withdrawFeeFactor,\\n            _controllerFee,\\n            _buyBackRate,\\n            _slippageFactor\\n        );\\n    }\\n\\n    function setRewardsAddress(address _rewardsAddress)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        rewardsAddress = _rewardsAddress;\\n        emit SetRewardsAddress(_rewardsAddress);\\n    }\\n\\n    function setCollect(bool _isCollect)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        isCollect = _isCollect;\\n        emit SetCollect(_isCollect);\\n    }\\n\\n    function setEarnedToUpPath(address[] memory _earnedToUpPath0, address[] memory _earnedToUpPath1)\\n        external\\n        onlyGovernor\\n    {\\n        require(\\n            _checkPath(_earnedToUpPath0, _earnedToUpPath1, earnedAddress, UPAddress),\\n            \\\"invalid _earnedToUpPath\\\"\\n        );\\n        earnedToUpPath0 = _earnedToUpPath0;\\n        earnedToUpPath1 = _earnedToUpPath1;\\n        emit SetEarnedToUpPath(_earnedToUpPath0, _earnedToUpPath1);\\n    }\\n\\n    function setEarnedToToken0Path(address[] memory _earnedToToken0Path0, address[] memory _earnedToToken0Path1)\\n        external\\n        onlyGovernor\\n    {\\n        require(\\n            _checkPath(_earnedToToken0Path0, _earnedToToken0Path1, earnedAddress, token0Address),\\n            \\\"invalid _earnedToToken0Path\\\"\\n        );\\n        earnedToToken0Path0 = _earnedToToken0Path0;\\n        earnedToToken0Path1 = _earnedToToken0Path1;\\n        emit SetEarnedToToken0Path(_earnedToToken0Path0, _earnedToToken0Path1);\\n    }\\n\\n    function setEarnedToToken1Path(address[] memory _earnedToToken1Path0, address[] memory _earnedToToken1Path1)\\n        external\\n        onlyGovernor\\n    {\\n        require(\\n            token0Address == token1Address || _checkPath(_earnedToToken1Path0, _earnedToToken1Path1, earnedAddress, token1Address),\\n            \\\"invalid _earnedToToken1Path\\\"\\n        );\\n        earnedToToken1Path0 = _earnedToToken1Path0;\\n        earnedToToken1Path1 = _earnedToToken1Path1;\\n        emit SetEarnedToToken1Path(_earnedToToken1Path0, _earnedToToken1Path1);\\n    }\\n\\n    function setEarnedToToken0RouterAddress(address _earnedToToken0Router0Address, address _earnedToToken0Router1Address)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        earnedToToken0Router0Address = _earnedToToken0Router0Address;\\n        earnedToToken0Router1Address = _earnedToToken0Router1Address;\\n        emit SetEarnedToToken0RouterAddress(_earnedToToken0Router0Address, _earnedToToken0Router1Address);\\n    }\\n\\n    function setEarnedToToken1RouterAddress(address _earnedToToken1Router0Address, address _earnedToToken1Router1Address)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        earnedToToken1Router0Address = _earnedToToken1Router0Address;\\n        earnedToToken1Router1Address = _earnedToToken1Router1Address;\\n        emit SetEarnedToToken1RouterAddress(_earnedToToken1Router0Address, _earnedToToken1Router1Address);\\n    }\\n\\n    function setWantRouterAddress(address _wantRouterAddress)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        wantRouterAddress = _wantRouterAddress;\\n        emit SetWantRouterAddress(_wantRouterAddress);\\n    }\\n\\n    function setBuyBackRouterAddress(address _buyBackRouter0Address, address _buyBackRouter1Address)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        buyBackRouter0Address = _buyBackRouter0Address;\\n        buyBackRouter1Address = _buyBackRouter1Address;\\n        emit SetBuyBackRouterAddress(_buyBackRouter0Address, _buyBackRouter1Address);\\n    }\\n\\n    function setOnlyGov(bool _onlyGov) external virtual onlyGovernor {\\n        onlyGov = _onlyGov;\\n        emit SetOnlyGov(_onlyGov);\\n    }\\n\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external virtual onlyGovernor {\\n        require(_token != earnedAddress, \\\"!safe\\\");\\n        require(_token != wantAddress, \\\"!safe\\\");\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function _wrapBNB() internal virtual {\\n        // BNB -> WBNB\\n        uint256 bnbBal = address(this).balance;\\n        if (bnbBal > 0) {\\n            IWBNB(wbnbAddress).deposit{value: bnbBal}(); // BNB -> WBNB\\n        }\\n    }\\n\\n    function wrapBNB() external virtual onlyGovernor {\\n        _wrapBNB();\\n    }\\n\\n    function _safeSwap(\\n        address _routerAddress,\\n        uint256 _amountIn,\\n        uint256 _slippageFactor,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline\\n    ) internal virtual {\\n        uint256[] memory amounts =\\n            IPancakeRouter02(_routerAddress).getAmountsOut(_amountIn, _path);\\n        uint256 amountOut = amounts[amounts.length.sub(1)];\\n\\n        IPancakeRouter02(_routerAddress)\\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            _amountIn,\\n            amountOut.mul(_slippageFactor).div(1000),\\n            _path,\\n            _to,\\n            _deadline\\n        );\\n    }\\n\\n    function _safeSwapCrossRouter(\\n        address _router0Address,\\n        address _router1Address,\\n        uint256 _amountIn,\\n        uint256 _slippageFactor,\\n        address[] memory _path0,\\n        address[] memory _path1,\\n        address _to,\\n        uint256 _deadline\\n    ) internal virtual {\\n        IERC20 midToken = IERC20(_path0[_path0.length - 1]);\\n        uint256 before = midToken.balanceOf(address(this));\\n        _safeSwap(\\n            _router0Address,\\n            _amountIn,\\n            _slippageFactor,\\n            _path0,\\n            address(this),\\n            _deadline\\n        );\\n        uint256 _amountMid = midToken.balanceOf(address(this)).sub(before);\\n        if (_amountMid > 0) {\\n            midToken.safeApprove(_router1Address, 0);\\n            midToken.safeIncreaseAllowance(\\n                _router1Address,\\n                _amountMid\\n            );\\n            _safeSwap(\\n                _router1Address,\\n                _amountMid,\\n                _slippageFactor,\\n                _path1,\\n                _to,\\n                _deadline\\n            );\\n        }\\n    }\\n\\n    function _safeSwapAuto(\\n        address _router0Address,\\n        address _router1Address,\\n        uint256 _amountIn,\\n        uint256 _slippageFactor,\\n        address[] memory _path0,\\n        address[] memory _path1,\\n        address _to,\\n        uint256 _deadline\\n    ) internal virtual {\\n        if (_router1Address == address(0)) {\\n            _safeSwap(\\n                _router0Address,\\n                _amountIn,\\n                _slippageFactor,\\n                _path0,\\n                _to,\\n                _deadline\\n            );\\n        } else {\\n            _safeSwapCrossRouter(\\n                _router0Address,\\n                _router1Address,\\n                _amountIn,\\n                _slippageFactor,\\n                _path0,\\n                _path1,\\n                _to,\\n                _deadline\\n            );\\n        }\\n    }\\n\\n    function _checkPath(address[] memory path0, address[] memory path1, address from, address to) internal virtual view returns (bool) {\\n        uint len0 = path0.length;\\n        uint len1 = path1.length;\\n        if (isCollect || from == to) {\\n            return len0 == 0 && len1 == 0;\\n        }\\n        return len0 >= 2 &&\\n            path0[0] == from &&\\n            (\\n                (len1 == 0 && path0[len0 - 1] == to) ||\\n                (len1 >= 2 && path0[len0 - 1] == path1[0] && path1[len1 - 1] == to)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x87db23dee40929f0219cdce3d67769216321ffbae983068ebd6218e6c81ac31c\",\"license\":\"MIT\"},\"contracts/StrategyPCS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./Strategy.sol\\\";\\n\\ncontract StrategyPCS is Strategy {\\n    constructor(\\n        address[] memory _addresses,\\n        uint256 _pid,\\n        address _cakeAddress,\\n        bool _isAutoComp,\\n        bool _isCollect,\\n        address[] memory _earnedToUpPath0,\\n        address[] memory _earnedToUpPath1,\\n        address[] memory _earnedToToken0Path0,\\n        address[] memory _earnedToToken0Path1,\\n        address[] memory _earnedToToken1Path0,\\n        address[] memory _earnedToToken1Path1,\\n        uint256 _controllerFee,\\n        uint256 _buyBackRate,\\n        uint256 _entranceFeeFactor,\\n        uint256 _withdrawFeeFactor\\n    ) public CoreRef(_addresses[0]) {\\n        wbnbAddress = _addresses[1];\\n        UPFarmAddress = _addresses[2];\\n        UPAddress = _addresses[3];\\n        wantAddress = _addresses[4];\\n        token0Address = _addresses[5];\\n        token1Address = _addresses[6];\\n        earnedAddress = _addresses[7];\\n        farmContractAddress = _addresses[8];\\n        rewardsAddress = _addresses[9];\\n        wantRouterAddress = _addresses[10];\\n        earnedToToken0Router0Address = _addresses[11];\\n        earnedToToken0Router1Address = _addresses[12];\\n        earnedToToken1Router0Address = _addresses[13];\\n        earnedToToken1Router1Address = _addresses[14];\\n        buyBackRouter0Address = _addresses[15];\\n        buyBackRouter1Address = _addresses[16];\\n\\n        pid = _pid;\\n        isCAKEStaking = wantAddress == _cakeAddress;\\n        isSameAssetDeposit = wantAddress == earnedAddress;\\n        isAutoComp = _isAutoComp;\\n        isCollect = _isCollect;\\n\\n        require(\\n            _checkPath(_earnedToUpPath0, _earnedToUpPath1, earnedAddress, UPAddress),\\n            \\\"invalid _earnedToUpPath\\\"\\n        );\\n        earnedToUpPath0 = _earnedToUpPath0;\\n        earnedToUpPath1 = _earnedToUpPath1;\\n\\n        require(\\n            _checkPath(_earnedToToken0Path0, _earnedToToken0Path1, earnedAddress, token0Address),\\n            \\\"invalid _earnedToToken0Path\\\"\\n        );\\n        earnedToToken0Path0 = _earnedToToken0Path0;\\n        earnedToToken0Path1 = _earnedToToken0Path1;\\n\\n        require(\\n            token0Address == token1Address || _checkPath(_earnedToToken1Path0, _earnedToToken1Path1, earnedAddress, token1Address),\\n            \\\"invalid _earnedToToken1Path\\\"\\n        );\\n        earnedToToken1Path0 = _earnedToToken1Path0;\\n        earnedToToken1Path1 = _earnedToToken1Path1;\\n\\n        require(_buyBackRate <= buyBackRateUL, \\\"invalid buybackRate\\\");\\n        require(_controllerFee <= controllerFeeUL, \\\"invalid controllerFee\\\");\\n        require(_entranceFeeFactor >= entranceFeeFactorLL && _entranceFeeFactor <= entranceFeeFactorMax, \\\"invalid entranceFee\\\");\\n        require(_withdrawFeeFactor >= withdrawFeeFactorLL && _withdrawFeeFactor <= withdrawFeeFactorMax, \\\"invalid withdrawFee\\\");\\n        buyBackRate = _buyBackRate;\\n        controllerFee = _controllerFee;\\n        entranceFeeFactor = _entranceFeeFactor;\\n        withdrawFeeFactor = _withdrawFeeFactor;\\n    }\\n}\\n\",\"keccak256\":\"0x47400d351eeabe2209dc028f6433b0dbe5a035e9fb9d5586787b3c2c8325e69f\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\",\"keccak256\":\"0xb1fe7d8ff816e984f63300b0631623fc83a8aa4d1ee0c90fb0e444eb91a5254c\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"./IPancakeRouter01.sol\\\";\\n\\npragma solidity 0.6.12;\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\",\"keccak256\":\"0x45ef77d49d58722fda84df3d21e2b1277324597787763eee24b2cd269375f8ec\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeswapFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\ninterface IPancakeswapFarm {\\n    function poolLength() external view returns (uint256);\\n\\n    function userInfo() external view returns (uint256);\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // View function to see pending CAKEs on frontend.\\n    function pendingCake(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Deposit LP tokens to MasterChef for CAKE allocation.\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    // Stake CAKE tokens to MasterChef\\n    function enterStaking(uint256 _amount) external;\\n\\n    // Withdraw CAKE tokens from STAKING.\\n    function leaveStaking(uint256 _amount) external;\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\",\"keccak256\":\"0x002c818cec64fca97983f186029b194ef20432494ae82dac1d0b3b3589f6c9c4\",\"license\":\"MIT\"},\"contracts/interfaces/IWBNB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\npragma solidity ^0.6.12;\\ninterface IWBNB is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\",\"keccak256\":\"0xb84fb3a2d9ab809e87a597b70197842a5c0dffb5d4547086f69a3cb2be0335a8\",\"license\":\"MIT\"},\"contracts/refs/CoreRef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ninterface ICore {\\n    function isGovernor(address _address) external view returns (bool);\\n\\n    function isGuardian(address _address) external view returns (bool);\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\\n\\nabstract contract CoreRef is Pausable {\\n\\n    event CoreUpdate(address indexed _core);\\n\\n    ICore private _core;\\n\\n    bytes32 public constant MASTER_ROLE = keccak256(\\\"MASTER_ROLE\\\");\\n\\n    constructor(address core_) public {\\n        _core = ICore(core_);\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender),\\n            \\\"CoreRef::onlyGovernor: Caller is not a governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(\\n            _core.isGuardian(msg.sender),\\n            \\\"CoreRef::onlyGuardian: Caller is not a guardian\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardianOrGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender),\\n            \\\"CoreRef::onlyGuardianOrGovernor: Caller is not a guardian or governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMaster() {\\n        require(\\n            _core.hasRole(MASTER_ROLE, msg.sender),\\n            \\\"CoreRef::onlyMaster: Caller is not a master\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        require(\\n            _core.hasRole(role, msg.sender),\\n            \\\"CoreRef::onlyRole: Not permit\\\"\\n        );\\n        _;\\n    }\\n\\n    function setCore(address core_) external onlyGovernor {\\n        _core = ICore(core_);\\n        emit CoreUpdate(core_);\\n    }\\n\\n    function pause() public onlyGuardianOrGovernor {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyGovernor {\\n        _unpause();\\n    }\\n\\n    function core() public view returns (ICore) {\\n        return _core;\\n    }\\n\\n}\",\"keccak256\":\"0xe8d45314ea477e9dfbff6d0bc6e319f1f77a69457ce35d1f8ffb55c9d8cd2b06\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526003805460ff60201b19166401000000001790556000600c819055600d819055600e819055600f8190556010556127066012556127106013556103b66014553480156200005057600080fd5b50604051620063bb380380620063bb83398181016040526101e08110156200007757600080fd5b81019080805160405193929190846401000000008211156200009857600080fd5b908301906020820185811115620000ae57600080fd5b8251866020820283011164010000000082111715620000cc57600080fd5b82525081516020918201928201910280838360005b83811015620000fb578181015183820152602001620000e1565b505050509190910160408181526020840151908401516060850151608086015160a0909601805193989297919695509192909190846401000000008211156200014357600080fd5b9083019060208201858111156200015957600080fd5b82518660208202830111640100000000821117156200017757600080fd5b82525081516020918201928201910280838360005b83811015620001a65781810151838201526020016200018c565b5050505090500160405260200180516040519392919084640100000000821115620001d057600080fd5b908301906020820185811115620001e657600080fd5b82518660208202830111640100000000821117156200020457600080fd5b82525081516020918201928201910280838360005b838110156200023357818101518382015260200162000219565b50505050905001604052602001805160405193929190846401000000008211156200025d57600080fd5b9083019060208201858111156200027357600080fd5b82518660208202830111640100000000821117156200029157600080fd5b82525081516020918201928201910280838360005b83811015620002c0578181015183820152602001620002a6565b5050505090500160405260200180516040519392919084640100000000821115620002ea57600080fd5b9083019060208201858111156200030057600080fd5b82518660208202830111640100000000821117156200031e57600080fd5b82525081516020918201928201910280838360005b838110156200034d57818101518382015260200162000333565b50505050905001604052602001805160405193929190846401000000008211156200037757600080fd5b9083019060208201858111156200038d57600080fd5b8251866020820283011164010000000082111715620003ab57600080fd5b82525081516020918201928201910280838360005b83811015620003da578181015183820152602001620003c0565b50505050905001604052602001805160405193929190846401000000008211156200040457600080fd5b9083019060208201858111156200041a57600080fd5b82518660208202830111640100000000821117156200043857600080fd5b82525081516020918201928201910280838360005b83811015620004675781810151838201526020016200044d565b50505050905001604052602001805190602001909291908051906020019092919080519060200190929190805190602001909291905050508e600081518110620004ad57fe5b60200260200101516000620004c762000dab60201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060008060146101000a81548160ff02191690831515021790555080600160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505060016002819055508e6001815181106200056957fe5b6020026020010151600960006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e600281518110620005a557fe5b6020026020010151600a60006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e600381518110620005e157fe5b6020026020010151600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e6004815181106200061d57fe5b6020026020010151600560006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e6005815181106200065957fe5b6020026020010151600660006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e6006815181106200069557fe5b6020026020010151600760006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e600781518110620006d157fe5b6020026020010151600860006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e6008815181106200070d57fe5b6020026020010151600360056101000a8154816001600160a01b0302191690836001600160a01b031602179055508e6009815181106200074957fe5b6020026020010151601160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e600a815181106200078557fe5b6020026020010151601960006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e600b81518110620007c157fe5b6020026020010151601560006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e600c81518110620007fd57fe5b6020026020010151601660006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e600d815181106200083957fe5b6020026020010151601760006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e600e815181106200087557fe5b6020026020010151601860006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e600f81518110620008b157fe5b6020026020010151601a60006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e601081518110620008ed57fe5b6020026020010151601b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055508d6004819055508c6001600160a01b0316600560009054906101000a90046001600160a01b03166001600160a01b031614600360006101000a81548160ff021916908315150217905550600860009054906101000a90046001600160a01b03166001600160a01b0316600560009054906101000a90046001600160a01b03166001600160a01b031614600360016101000a81548160ff0219169083151502179055508b600360026101000a81548160ff0219169083151502179055508a6003806101000a81548160ff02191690831515021790555062000a2e8a8a600860009054906101000a90046001600160a01b0316600b60009054906101000a90046001600160a01b031662000daf60201b60201c565b62000a80576040805162461bcd60e51b815260206004820152601760248201527f696e76616c6964205f6561726e6564546f557050617468000000000000000000604482015290519081900360640190fd5b895162000a9590601c9060208d019062000f0e565b50885162000aab90601d9060208c019062000f0e565b5060085460065462000ace918a918a916001600160a01b03908116911662000daf565b62000b20576040805162461bcd60e51b815260206004820152601b60248201527f696e76616c6964205f6561726e6564546f546f6b656e30506174680000000000604482015290519081900360640190fd5b875162000b3590601e9060208b019062000f0e565b50865162000b4b90601f9060208a019062000f0e565b506007546006546001600160a01b039081169116148062000b89575060085460075462000b8991889188916001600160a01b03908116911662000daf565b62000bdb576040805162461bcd60e51b815260206004820152601b60248201527f696e76616c6964205f6561726e6564546f546f6b656e31506174680000000000604482015290519081900360640190fd5b855162000bef906020908189019062000f0e565b50845162000c0590602190602088019062000f0e565b506126ac83111562000c5e576040805162461bcd60e51b815260206004820152601360248201527f696e76616c6964206275796261636b5261746500000000000000000000000000604482015290519081900360640190fd5b6126ac84111562000cb6576040805162461bcd60e51b815260206004820152601560248201527f696e76616c696420636f6e74726f6c6c65724665650000000000000000000000604482015290519081900360640190fd5b612328821015801562000ccb57506127108211155b62000d1d576040805162461bcd60e51b815260206004820152601360248201527f696e76616c696420656e7472616e636546656500000000000000000000000000604482015290519081900360640190fd5b612328811015801562000d3257506127108111155b62000d84576040805162461bcd60e51b815260206004820152601360248201527f696e76616c696420776974686472617746656500000000000000000000000000604482015290519081900360640190fd5b601092909255600f929092556012919091556013555062000f999950505050505050505050565b3390565b8351835160035460009291906301000000900460ff168062000de25750836001600160a01b0316856001600160a01b0316145b1562000dff578115801562000df5575080155b9250505062000f06565b6002821015801562000e375750846001600160a01b03168760008151811062000e2457fe5b60200260200101516001600160a01b0316145b801562000f0157508015801562000e765750836001600160a01b031687600184038151811062000e6357fe5b60200260200101516001600160a01b0316145b8062000f0157506002811015801562000ecc57508560008151811062000e9857fe5b60200260200101516001600160a01b031687600184038151811062000eb957fe5b60200260200101516001600160a01b0316145b801562000f015750836001600160a01b031686600183038151811062000eee57fe5b60200260200101516001600160a01b0316145b925050505b949350505050565b82805482825590600052602060002090810192821562000f66579160200282015b8281111562000f6657825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000f2f565b5062000f7492915062000f78565b5090565b5b8082111562000f745780546001600160a01b031916815560010162000f79565b6154128062000fa96000396000f3fe608060405234801561001057600080fd5b50600436106104a75760003560e01c806384fa32ac1161026b578063c0973eed11610150578063dc224863116100c8578063ee50dc3411610097578063f2f4eb261161007c578063f2f4eb2614610c42578063f2fde38b14610c4a578063ffbd3b1f14610c70576104a7565b8063ee50dc34146105b1578063f106845414610c3a576104a7565b8063dc22486314610c1a578063e5dd455a14610c22578063e719847414610c2a578063e7a0367914610c32576104a7565b8063d1a94edc1161011f578063d5b0916311610104578063d5b0916314610c02578063d7cb416f14610c0a578063db22e43a14610c12576104a7565b8063d1a94edc14610ad3578063d389800f14610bfa576104a7565b8063c0973eed14610a95578063c302a4d014610898578063c6bb8e3614610a9d578063cdf2098914610acb576104a7565b8063a1a47d71116101e3578063b3545c01116101b2578063b74cd24211610197578063b74cd24214610a7d578063b83b54ca14610a85578063bece4d7d14610a8d576104a7565b8063b3545c0114610500578063b6b55f2514610a60576104a7565b8063a1a47d71146105b1578063a3d2855e14610914578063aba6876314610a3b578063b0fb2ce414610a43576104a7565b80638a3e97051161023a5780639a2466431161021f5780639a246643146108fc5780639fc33a9f14610904578063a17f3d811461090c576104a7565b80638a3e9705146108c65780638da5cb5b146108f4576104a7565b806384fa32ac1461085b57806385f02dd614610890578063866b2018146108985780638906758d146108a0576104a7565b8063380eec2f1161039157806367206d40116103095780637ff36fbe116102d85780638219425d116102bd5780638219425d1461082e5780638456cb591461084b578063846d9e1714610853576104a7565b80637ff36fbe146108005780638000963014610808576104a7565b806367206d401461079d57806368f54162146107d35780636e965b51146107db578063715018a6146107f8576104a7565b80634d9f7bb2116103605780635d5ae284116103455780635d5ae2841461076f57806363fe3e3a1461079557806367057b6c146105b1576104a7565b80634d9f7bb2146105b15780635c975abb14610767576104a7565b8063380eec2f146107475780633f4ba83a1461074f57806342da4eb31461075757806344a3955e1461075f576104a7565b806324893bd7116104245780632fce1cab116103f357806330e0045e116103d857806330e0045e1461071a57806335c7f1211461073757806336e9332d1461073f576104a7565b80632fce1cab146105d657806330d15c65146105f3576104a7565b806324893bd71461058c57806326a1ccad146105945780632717eff3146105b15780632e1a7d4d146105b9576104a7565b80630daef3211161047b5780630fa4e01e116104605780630fa4e01e146105745780631334903f1461057c578063178a8d0714610584576104a7565b80630daef321146105395780630dbccf0f14610555576104a7565b80625e8e6b146104ac578063061bf643146104d0578063061c7d48146105005780630b6bb30b1461051a575b600080fd5b6104b4610c78565b604080516001600160a01b039092168252519081900360200190f35b6104fe600480360360408110156104e657600080fd5b506001600160a01b0381358116916020013516610c87565b005b610508610dc0565b60408051918252519081900360200190f35b6104fe6004803603602081101561053057600080fd5b50351515610dc6565b610541610ee7565b604080519115158252519081900360200190f35b6104fe6004803603602081101561056b57600080fd5b50351515610ef8565b610508611018565b61050861101e565b610508611024565b6104b461102a565b6104b4600480360360208110156105aa57600080fd5b5035611039565b610508611060565b610508600480360360208110156105cf57600080fd5b5035611066565b6104b4600480360360208110156105ec57600080fd5b50356113b6565b6104fe6004803603604081101561060957600080fd5b81019060208101813564010000000081111561062457600080fd5b82018360208201111561063657600080fd5b8035906020019184602083028401116401000000008311171561065857600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156106a857600080fd5b8201836020820111156106ba57600080fd5b803590602001918460208302840111640100000000831117156106dc57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506113c3945050505050565b6104b46004803603602081101561073057600080fd5b50356115cd565b6104b46115da565b6104fe6115e9565b6104b461182a565b6104fe611839565b6105086118f5565b6105086118fb565b610541611901565b6104fe6004803603602081101561078557600080fd5b50356001600160a01b0316611922565b6104b4611a40565b6104fe600480360360608110156107b357600080fd5b506001600160a01b03813581169160208101359160409091013516611a4f565b610508611be0565b6104b4600480360360208110156107f157600080fd5b5035611be6565b6104fe611bf3565b6104b4611cc9565b6104fe6004803603602081101561081e57600080fd5b50356001600160a01b0316611cd8565b6104b46004803603602081101561084457600080fd5b5035611dec565b6104fe611df9565b610541611f4a565b6104fe600480360360a081101561087157600080fd5b5080359060208101359060408101359060608101359060800135611f53565b6105086122d4565b6105086122da565b6104fe600480360360208110156108b657600080fd5b50356001600160a01b03166122e0565b6104fe600480360360408110156108dc57600080fd5b506001600160a01b03813581169160200135166123fe565b6104b4612537565b610541612546565b6104b4612554565b6104b461256c565b6104fe6004803603604081101561092a57600080fd5b81019060208101813564010000000081111561094557600080fd5b82018360208201111561095757600080fd5b8035906020019184602083028401116401000000008311171561097957600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156109c957600080fd5b8201836020820111156109db57600080fd5b803590602001918460208302840111640100000000831117156109fd57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061257b945050505050565b6104b4612745565b6104b460048036036020811015610a5957600080fd5b5035612754565b61050860048036036020811015610a7657600080fd5b5035612761565b610508612b3c565b6104b4612b42565b6104b4612b51565b6104b4612b60565b6104fe60048036036040811015610ab357600080fd5b506001600160a01b0381358116916020013516612b6f565b6104b4612ca8565b6104fe60048036036040811015610ae957600080fd5b810190602081018135640100000000811115610b0457600080fd5b820183602082011115610b1657600080fd5b80359060200191846020830284011164010000000083111715610b3857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050640100000000811115610b8857600080fd5b820183602082011115610b9a57600080fd5b80359060200191846020830284011164010000000083111715610bbc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612cb7945050505050565b6104fe612e68565b6104fe613909565b6104b46139c3565b6105416139d2565b6105086139e2565b610541613a06565b6104b4613a15565b6104b4613a24565b610508613a33565b6104b4613a39565b6104fe60048036036020811015610c6057600080fd5b50356001600160a01b0316613a48565b610508613b74565b601b546001600160a01b031681565b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b158015610cd257600080fd5b505afa158015610ce6573d6000803e3d6000fd5b505050506040513d6020811015610cfc57600080fd5b5051610d395760405162461bcd60e51b815260040180806020018281038252602f81526020018061529c602f913960400191505060405180910390fd5b601a80546001600160a01b038085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283168117909355601b805491851691909216811790915560408051928352602083019190915280517f071b73faa021635fad0a92808ae9c59c365befd74127681dfdf2123f3e71553e9281900390910190a15050565b6126ac81565b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b158015610e1157600080fd5b505afa158015610e25573d6000803e3d6000fd5b505050506040513d6020811015610e3b57600080fd5b5051610e785760405162461bcd60e51b815260040180806020018281038252602f81526020018061529c602f913960400191505060405180910390fd5b6003805482151564010000000081027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff9092169190911790915560408051918252517f125177ac7b8930dac1e59c2b30b1b6b9191b30af40cf6bbb5d20fec4d44be60f9181900360200190a150565b600354640100000000900460ff1681565b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b158015610f4357600080fd5b505afa158015610f57573d6000803e3d6000fd5b505050506040513d6020811015610f6d57600080fd5b5051610faa5760405162461bcd60e51b815260040180806020018281038252602f81526020018061529c602f913960400191505060405180910390fd5b60038054821515630100000081027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff9092169190911790915560408051918252517f11eebf9ecfc205a1581472f52a6942317b4b052652b7d159c5a991b1caf9553f9181900360200190a150565b600c5481565b60125481565b60105481565b601a546001600160a01b031681565b601c818154811061104657fe5b6000918252602090912001546001600160a01b0316905081565b61271081565b6000611070613b7a565b6001600160a01b0316611081612537565b6001600160a01b0316146110dc576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600280541415611133576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805581611189576040805162461bcd60e51b815260206004820152600d60248201527f5f77616e74416d74203c3d203000000000000000000000000000000000000000604482015290519081900360640190fd5b60006111ac600d546111a6600e5486613b7e90919063ffffffff16565b90613be0565b905060008111611203576040805162461bcd60e51b815260206004820152601260248201527f73686172657352656d6f766564203c3d20300000000000000000000000000000604482015290519081900360640190fd5b600e548111156112125750600e545b600e5461121f9082613c47565b600e55601354612710111561124c576112496127106111a660135486613b7e90919063ffffffff16565b92505b60035462010000900460ff16156112665761126683613ca4565b600554604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156112ca57600080fd5b505afa1580156112de573d6000803e3d6000fd5b505050506040513d60208110156112f457600080fd5b5051905080841115611304578093505b83600d54101561131457600d5493505b600d546113219085613c47565b600d55600a54600554611341916001600160a01b03918216911686613da8565b60035462010000900460ff16801561136257506003546301000000900460ff165b1561136f5761136f613e28565b604080513381526020810186905281517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364929181900390910190a150600160025592915050565b6020818154811061104657fe5b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b15801561140e57600080fd5b505afa158015611422573d6000803e3d6000fd5b505050506040513d602081101561143857600080fd5b50516114755760405162461bcd60e51b815260040180806020018281038252602f81526020018061529c602f913960400191505060405180910390fd5b600854600b5461149591849184916001600160a01b039081169116613f16565b6114e6576040805162461bcd60e51b815260206004820152601760248201527f696e76616c6964205f6561726e6564546f557050617468000000000000000000604482015290519081900360640190fd5b81516114f990601c9060208501906151c1565b50805161150d90601d9060208401906151c1565b507fe96d7b34c373d3a3ec2babcc077062bf437a26d39643ab5fd97764cc54a4212f8282604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561157557818101518382015260200161155d565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156115b457818101518382015260200161159c565b5050505090500194505050505060405180910390a15050565b601d818154811061104657fe5b600a546001600160a01b031681565b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b15801561163457600080fd5b505afa158015611648573d6000803e3d6000fd5b505050506040513d602081101561165e57600080fd5b5051806116f75750600154604080517f0c68ba2100000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b0390921691630c68ba2191602480820192602092909190829003018186803b1580156116ca57600080fd5b505afa1580156116de573d6000803e3d6000fd5b505050506040513d60208110156116f457600080fd5b50515b6117325760405162461bcd60e51b81526004018080602001828103825260458152602001806153386045913960600191505060405180910390fd5b600280541415611789576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60028055600554604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051611823926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156117f257600080fd5b505afa158015611806573d6000803e3d6000fd5b505050506040513d602081101561181c57600080fd5b5051614066565b6001600255565b600b546001600160a01b031681565b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b15801561188457600080fd5b505afa158015611898573d6000803e3d6000fd5b505050506040513d60208110156118ae57600080fd5b50516118eb5760405162461bcd60e51b815260040180806020018281038252602f81526020018061529c602f913960400191505060405180910390fd5b6118f36141c5565b565b600d5481565b600e5481565b60005474010000000000000000000000000000000000000000900460ff1690565b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b15801561196d57600080fd5b505afa158015611981573d6000803e3d6000fd5b505050506040513d602081101561199757600080fd5b50516119d45760405162461bcd60e51b815260040180806020018281038252602f81526020018061529c602f913960400191505060405180910390fd5b601980546001600160a01b0383167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051918252517f42d7ec3cae52221425bb6589ab144941ed3874dda5bcb98099ddc59ff3e50c9d9181900360200190a150565b6009546001600160a01b031681565b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b158015611a9a57600080fd5b505afa158015611aae573d6000803e3d6000fd5b505050506040513d6020811015611ac457600080fd5b5051611b015760405162461bcd60e51b815260040180806020018281038252602f81526020018061529c602f913960400191505060405180910390fd5b6008546001600160a01b0384811691161415611b64576040805162461bcd60e51b815260206004820152600560248201527f2173616665000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6005546001600160a01b0384811691161415611bc7576040805162461bcd60e51b815260206004820152600560248201527f2173616665000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611bdb6001600160a01b0384168284613da8565b505050565b60135481565b601f818154811061104657fe5b611bfb613b7a565b6001600160a01b0316611c0c612537565b6001600160a01b031614611c67576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6006546001600160a01b031681565b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b158015611d2357600080fd5b505afa158015611d37573d6000803e3d6000fd5b505050506040513d6020811015611d4d57600080fd5b5051611d8a5760405162461bcd60e51b815260040180806020018281038252602f81526020018061529c602f913960400191505060405180910390fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fad9400e618eb1344fde53db22397a1b82c765527ecbba3a5c86bcac15090828b90600090a250565b6021818154811061104657fe5b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b158015611e4457600080fd5b505afa158015611e58573d6000803e3d6000fd5b505050506040513d6020811015611e6e57600080fd5b505180611f075750600154604080517f0c68ba2100000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b0390921691630c68ba2191602480820192602092909190829003018186803b158015611eda57600080fd5b505afa158015611eee573d6000803e3d6000fd5b505050506040513d6020811015611f0457600080fd5b50515b611f425760405162461bcd60e51b81526004018080602001828103825260458152602001806153386045913960600191505060405180910390fd5b6118f361428c565b60035460ff1681565b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b158015611f9e57600080fd5b505afa158015611fb2573d6000803e3d6000fd5b505050506040513d6020811015611fc857600080fd5b50516120055760405162461bcd60e51b815260040180806020018281038252602f81526020018061529c602f913960400191505060405180910390fd5b61232885101561205c576040805162461bcd60e51b815260206004820152601a60248201527f5f656e7472616e6365466565466163746f7220746f6f206c6f77000000000000604482015290519081900360640190fd5b6127108511156120b3576040805162461bcd60e51b815260206004820152601b60248201527f5f656e7472616e6365466565466163746f7220746f6f20686967680000000000604482015290519081900360640190fd5b601285905561232884101561210f576040805162461bcd60e51b815260206004820152601a60248201527f5f7769746864726177466565466163746f7220746f6f206c6f77000000000000604482015290519081900360640190fd5b612710841115612166576040805162461bcd60e51b815260206004820152601b60248201527f5f7769746864726177466565466163746f7220746f6f20686967680000000000604482015290519081900360640190fd5b60138490556126ac8311156121c2576040805162461bcd60e51b815260206004820152601760248201527f5f636f6e74726f6c6c657246656520746f6f2068696768000000000000000000604482015290519081900360640190fd5b600f8390556126ac82111561221e576040805162461bcd60e51b815260206004820152601560248201527f5f6275794261636b5261746520746f6f20686967680000000000000000000000604482015290519081900360640190fd5b60108290556103e781111561227a576040805162461bcd60e51b815260206004820152601860248201527f5f736c697070616765466163746f7220746f6f20686967680000000000000000604482015290519081900360640190fd5b60148190556040805186815260208101869052808201859052606081018490526080810183905290517fc67e0b149a57a70fa44a531a46c2c6d8e0b242fa12f459f250012c3a5987d29a9181900360a00190a15050505050565b600f5481565b61232881565b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b15801561232b57600080fd5b505afa15801561233f573d6000803e3d6000fd5b505050506040513d602081101561235557600080fd5b50516123925760405162461bcd60e51b815260040180806020018281038252602f81526020018061529c602f913960400191505060405180910390fd5b601180546001600160a01b0383167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051918252517fa69f1931be99336e049905baa11d21ed44204d7686e46b4344404d80d47c29889181900360200190a150565b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b15801561244957600080fd5b505afa15801561245d573d6000803e3d6000fd5b505050506040513d602081101561247357600080fd5b50516124b05760405162461bcd60e51b815260040180806020018281038252602f81526020018061529c602f913960400191505060405180910390fd5b601780546001600160a01b038085167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093556018805491851691909216811790915560408051928352602083019190915280517f0b862f0e5cb2c8acd447c3c04b7637f5ac576983fd7ecf72fe3529636483cf309281900390910190a15050565b6000546001600160a01b031690565b600354610100900460ff1681565b6003546501000000000090046001600160a01b031681565b6017546001600160a01b031681565b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b1580156125c657600080fd5b505afa1580156125da573d6000803e3d6000fd5b505050506040513d60208110156125f057600080fd5b505161262d5760405162461bcd60e51b815260040180806020018281038252602f81526020018061529c602f913960400191505060405180910390fd5b6007546006546001600160a01b0390811691161480612667575060085460075461266791849184916001600160a01b039081169116613f16565b6126b8576040805162461bcd60e51b815260206004820152601b60248201527f696e76616c6964205f6561726e6564546f546f6b656e31506174680000000000604482015290519081900360640190fd5b81516126ca90602090818501906151c1565b5080516126de9060219060208401906151c1565b507f903fe96a5723b5e127a99e44f9675f8c21700bc9230aefd5e2936506417029c98282604051808060200180602001838103835285818151815260200191508051906020019060200280838360008381101561157557818101518382015260200161155d565b6018546001600160a01b031681565b601e818154811061104657fe5b600061276b613b7a565b6001600160a01b031661277c612537565b6001600160a01b0316146127d7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60028054141561282e576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002805561283a611901565b1561288c576040805162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b600e541580158061289e575061271083115b6128d95760405162461bcd60e51b81526004018080602001828103825260268152602001806152cb6026913960400191505060405180910390fd5b600554604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561293d57600080fd5b505afa158015612951573d6000803e3d6000fd5b505050506040513d602081101561296757600080fd5b5051600554909150612984906001600160a01b031633308761434e565b600554604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156129e857600080fd5b505afa1580156129fc573d6000803e3d6000fd5b505050506040513d6020811015612a1257600080fd5b505190506000612a228284613c47565b600d54909150819015801590612a3a57506000600e54115b15612a6f57612a6c6127106111a6600d546111a6601254612a66600e5489613b7e90919063ffffffff16565b90613b7e565b90505b600e54612a7c90826143dc565b600e5560035462010000900460ff1615612a9e57612a9982614066565b612aaf565b600d54612aab90836143dc565b600d555b8415612ac457612ac181612710613c47565b90505b60035462010000900460ff168015612ae557506003546301000000900460ff165b15612af257612af2613e28565b604080513381526020810184905281517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c929181900390910190a160016002559695505050505050565b6103e781565b6016546001600160a01b031681565b6015546001600160a01b031681565b6011546001600160a01b031681565b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b158015612bba57600080fd5b505afa158015612bce573d6000803e3d6000fd5b505050506040513d6020811015612be457600080fd5b5051612c215760405162461bcd60e51b815260040180806020018281038252602f81526020018061529c602f913960400191505060405180910390fd5b601580546001600160a01b038085167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093556016805491851691909216811790915560408051928352602083019190915280517f5bc08486dd6c0ecfe4a1bed664ce71864f8a67d5eb593593c5baf1049c7a7aa29281900390910190a15050565b6019546001600160a01b031681565b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b158015612d0257600080fd5b505afa158015612d16573d6000803e3d6000fd5b505050506040513d6020811015612d2c57600080fd5b5051612d695760405162461bcd60e51b815260040180806020018281038252602f81526020018061529c602f913960400191505060405180910390fd5b600854600654612d8991849184916001600160a01b039081169116613f16565b612dda576040805162461bcd60e51b815260206004820152601b60248201527f696e76616c6964205f6561726e6564546f546f6b656e30506174680000000000604482015290519081900360640190fd5b8151612ded90601e9060208501906151c1565b508051612e0190601f9060208401906151c1565b507f5e791c36fb57fdae3adf1327b54fb3cf83c09aaafa093790a99dbb1be6ac16728282604051808060200180602001838103835285818151815260200191508051906020019060200280838360008381101561157557818101518382015260200161155d565b600280541415612ebf576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60028055612ecb611901565b15612f1d576040805162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b60035462010000900460ff16612f7a576040805162461bcd60e51b815260206004820152600b60248201527f2169734175746f436f6d70000000000000000000000000000000000000000000604482015290519081900360640190fd5b600354640100000000900460ff1615806130105750612f97613a39565b6001600160a01b031663e43581b8336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612fe357600080fd5b505afa158015612ff7573d6000803e3d6000fd5b505050506040513d602081101561300d57600080fd5b50515b80613097575061301e613a39565b6001600160a01b0316630c68ba21336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561306a57600080fd5b505afa15801561307e573d6000803e3d6000fd5b505050506040513d602081101561309457600080fd5b50515b6130ea576040805162461bcd60e51b8152602060048083019190915260248201527f21676f7600000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6130f2614436565b6003546301000000900460ff16156131155761310c613e28565b43600c55611823565b6009546008546001600160a01b039081169116141561313657613136614440565b600854604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561319a57600080fd5b505afa1580156131ae573d6000803e3d6000fd5b505050506040513d60208110156131c457600080fd5b505190506131d1816144b3565b90506131dc81614516565b60035490915060ff16806131f75750600354610100900460ff165b1561326b5743600c55600554604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051613265926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156117f257600080fd5b50611823565b6007546006546001600160a01b03908116911614156133b3576015546008546132a2916001600160a01b0391821691166000614849565b6015546008546132bf916001600160a01b039182169116836149a3565b601554601654601454601e8054604080516020808402820181019092528281526133ae966001600160a01b0390811696169488949093919290919083018282801561333357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613315575b5050505050601f80548060200260200160405190810160405280929190818152602001828054801561338e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613370575b5050505050306133a9610258426143dc90919063ffffffff16565b614abc565b613898565b6006546008546001600160a01b03908116911614613504576015546008546133e9916001600160a01b0391821691166000614849565b601554613417906001600160a01b0316613404836002613be0565b6008546001600160a01b031691906149a3565b601554601654613504916001600160a01b039081169116613439846002613be0565b601454601e805480602002602001604051908101604052809291908181526020018280548015613333576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311613315575050505050601f80548060200260200160405190810160405280929190818152602001828054801561338e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311613370575050505050306133a9610258426143dc90919063ffffffff16565b6007546008546001600160a01b0390811691161461363f5760175460085461353a916001600160a01b0391821691166000614849565b601754613555906001600160a01b0316613404836002613be0565b60175460185461363f916001600160a01b039081169116613577846002613be0565b6014546020805460408051828402810184019091528181529190828201828280156135cb57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116135ad575b5050505050602180548060200260200160405190810160405280929190818152602001828054801561338e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311613370575050505050306133a9610258426143dc90919063ffffffff16565b600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156136a357600080fd5b505afa1580156136b7573d6000803e3d6000fd5b505050506040513d60208110156136cd57600080fd5b5051600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561373957600080fd5b505afa15801561374d573d6000803e3d6000fd5b505050506040513d602081101561376357600080fd5b5051905081158015906137765750600081115b1561389557601954600654613798916001600160a01b039182169116846149a3565b6019546007546137b5916001600160a01b039182169116836149a3565b6019546006546007546001600160a01b039283169263e8e3370092811691168585600080306137e6426102586143dc565b6040518963ffffffff1660e01b815260040180896001600160a01b03168152602001886001600160a01b03168152602001878152602001868152602001858152602001848152602001836001600160a01b0316815260200182815260200198505050505050505050606060405180830381600087803b15801561386857600080fd5b505af115801561387c573d6000803e3d6000fd5b505050506040513d606081101561389257600080fd5b50505b50505b43600c55600554604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051613901926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156117f257600080fd5b506001600255565b60015460408051631c86b03760e31b815233600482015290516001600160a01b039092169163e43581b891602480820192602092909190829003018186803b15801561395457600080fd5b505afa158015613968573d6000803e3d6000fd5b505050506040513d602081101561397e57600080fd5b50516139bb5760405162461bcd60e51b815260040180806020018281038252602f81526020018061529c602f913960400191505060405180910390fd5b6118f3614440565b6007546001600160a01b031681565b6003546301000000900460ff1681565b7f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c81565b60035462010000900460ff1681565b6008546001600160a01b031681565b6005546001600160a01b031681565b60045481565b6001546001600160a01b031690565b613a50613b7a565b6001600160a01b0316613a61612537565b6001600160a01b031614613abc576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116613b015760405162461bcd60e51b81526004018080602001828103825260268152602001806152766026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60145481565b3390565b600082613b8d57506000613bda565b82820282848281613b9a57fe5b0414613bd75760405162461bcd60e51b81526004018080602001828103825260218152602001806153176021913960400191505060405180910390fd5b90505b92915050565b6000808211613c36576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381613c3f57fe5b049392505050565b600082821115613c9e576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60035460ff1615613d2757600360059054906101000a90046001600160a01b03166001600160a01b0316631058d281826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613d0a57600080fd5b505af1158015613d1e573d6000803e3d6000fd5b50505050613da5565b600360059054906101000a90046001600160a01b03166001600160a01b031663441a3e70600454836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015613d8c57600080fd5b505af1158015613da0573d6000803e3d6000fd5b505050505b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611bdb908490614af7565b6009546008546001600160a01b0390811691161415613e4957613e49614440565b600854604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015613ead57600080fd5b505afa158015613ec1573d6000803e3d6000fd5b505050506040513d6020811015613ed757600080fd5b505190508015801590613ef457506011546001600160a01b031615155b15613da557601154600854613da5916001600160a01b03918216911683613da8565b8351835160035460009291906301000000900460ff1680613f485750836001600160a01b0316856001600160a01b0316145b15613f625781158015613f59575080155b9250505061405e565b60028210158015613f985750846001600160a01b031687600081518110613f8557fe5b60200260200101516001600160a01b0316145b8015614059575080158015613fd45750836001600160a01b0316876001840381518110613fc157fe5b60200260200101516001600160a01b0316145b80614059575060028110158015614026575085600081518110613ff357fe5b60200260200101516001600160a01b031687600184038151811061401357fe5b60200260200101516001600160a01b0316145b80156140595750836001600160a01b031686600183038151811061404657fe5b60200260200101516001600160a01b0316145b925050505b949350505050565b60035462010000900460ff166140c3576040805162461bcd60e51b815260206004820152600b60248201527f2169734175746f436f6d70000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d546140d090826143dc565b600d556003546005546140fa916001600160a01b03918216916501000000000090910416836149a3565b60035460ff161561416057600360059054906101000a90046001600160a01b03166001600160a01b03166341441d3b826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613d0a57600080fd5b600360059054906101000a90046001600160a01b03166001600160a01b031663e2bbb158600454836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015613d8c57600080fd5b6141cd611901565b61421e576040805162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61426f613b7a565b604080516001600160a01b039092168252519081900360200190a1565b614294611901565b156142e6576040805162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861426f613b7a565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526143d6908590614af7565b50505050565b600082820183811015613bd7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6118f36000613ca4565b478015613da557600960009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561449757600080fd5b505af11580156144ab573d6000803e3d6000fd5b505050505050565b6000811561450e57600f541561450e5760006144e06127106111a6600f5486613b7e90919063ffffffff16565b601154600854919250614500916001600160a01b03908116911683613da8565b61450a8382613c47565b9250505b50805b919050565b60008060105411614528575080614511565b60006145456127106111a660105486613b7e90919063ffffffff16565b600b5460085491925082916001600160a01b039081169116146147b857601a54600854614580916001600160a01b0391821691166000614849565b601a5460085461459d916001600160a01b039182169116846149a3565b600b54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561460157600080fd5b505afa158015614615573d6000803e3d6000fd5b505050506040513d602081101561462b57600080fd5b5051601a54601b54601454601c805460408051602080840282018101909252828152969750614718966001600160a01b0396871696909516948a9493909290918301828280156146a457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614686575b5050505050601d80548060200260200160405190810160405280929190818152602001828054801561338e576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311613370575050505050306133a9610258426143dc90919063ffffffff16565b600b54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516147b49284926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561478257600080fd5b505afa158015614796573d6000803e3d6000fd5b505050506040513d60208110156147ac57600080fd5b505190613c47565b9150505b600b54604080517f42966c680000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b15801561481e57600080fd5b505af1158015614832573d6000803e3d6000fd5b5050505061405e8285613c4790919063ffffffff16565b8015806148e85750604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156148ba57600080fd5b505afa1580156148ce573d6000803e3d6000fd5b505050506040513d60208110156148e457600080fd5b5051155b6149235760405162461bcd60e51b81526004018080602001828103825260368152602001806153a76036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052611bdb908490614af7565b6000614a3982856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015614a0757600080fd5b505afa158015614a1b573d6000803e3d6000fd5b505050506040513d6020811015614a3157600080fd5b5051906143dc565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790529091506143d6908590614af7565b6001600160a01b038716614add57614ad8888787878686614ba8565b614aed565b614aed8888888888888888614e49565b5050505050505050565b6060614b4c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614f8f9092919063ffffffff16565b805190915015611bdb57808060200190516020811015614b6b57600080fd5b5051611bdb5760405162461bcd60e51b815260040180806020018281038252602a81526020018061537d602a913960400191505060405180910390fd5b604080517fd06ca61f00000000000000000000000000000000000000000000000000000000815260048101878152602482019283528551604483015285516060936001600160a01b038b169363d06ca61f938b938a939192606401906020808601910280838360005b83811015614c29578181015183820152602001614c11565b50505050905001935050505060006040518083038186803b158015614c4d57600080fd5b505afa158015614c61573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015614ca857600080fd5b8101908080516040519392919084640100000000821115614cc857600080fd5b908301906020820185811115614cdd57600080fd5b8251866020820283011164010000000082111715614cfa57600080fd5b82525081516020918201928201910280838360005b83811015614d27578181015183820152602001614d0f565b505050509050016040525050509050600081614d4e60018451613c4790919063ffffffff16565b81518110614d5857fe5b60200260200101519050876001600160a01b0316635c11d79588614d8b6103e86111a68b87613b7e90919063ffffffff16565b8888886040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015614dfe578181015183820152602001614de6565b505050509050019650505050505050600060405180830381600087803b158015614e2757600080fd5b505af1158015614e3b573d6000803e3d6000fd5b505050505050505050505050565b600084600186510381518110614e5b57fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015614eb457600080fd5b505afa158015614ec8573d6000803e3d6000fd5b505050506040513d6020811015614ede57600080fd5b50519050614ef08a8989893088614ba8565b6000614f4382846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561478257600080fd5b90508015614f8257614f606001600160a01b0384168b6000614849565b614f746001600160a01b0384168b836149a3565b614f828a828a898989614ba8565b5050505050505050505050565b6060614f9e8484600085614fa8565b90505b9392505050565b606082471015614fe95760405162461bcd60e51b81526004018080602001828103825260268152602001806152f16026913960400191505060405180910390fd5b614ff285615117565b615043576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106150a057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101615063565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615102576040519150601f19603f3d011682016040523d82523d6000602084013e615107565b606091505b509150915061405982828661511d565b3b151590565b6060831561512c575081614fa1565b82511561513c5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561518657818101518382015260200161516e565b50505050905090810190601f1680156151b35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b82805482825590600052602060002090810192821561522e579160200282015b8281111561522e57825182547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039091161782556020909201916001909101906151e1565b5061523a92915061523e565b5090565b5b8082111561523a5780547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560010161523f56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373436f72655265663a3a6f6e6c79476f7665726e6f723a2043616c6c6572206973206e6f74206120676f7665726e6f726669727374206465706f73697420616d6f756e74203c3d204d494e494d554d5f534841524553416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f72655265663a3a6f6e6c79477561726469616e4f72476f7665726e6f723a2043616c6c6572206973206e6f74206120677561726469616e206f7220676f7665726e6f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220804a930268a6a83fb5a9d7f6eb76c53713f0403db40e0300c37b15f825e1b99164736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 290,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2370,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11828,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "_core",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICore)11820"
      },
      {
        "astId": 2455,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4257,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "isCAKEStaking",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 4259,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "isSameAssetDeposit",
        "offset": 1,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 4261,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "isAutoComp",
        "offset": 2,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 4263,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "isCollect",
        "offset": 3,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 4266,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "onlyGov",
        "offset": 4,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 4268,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "farmContractAddress",
        "offset": 5,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4270,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "pid",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4272,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "wantAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4274,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "token0Address",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4276,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "token1Address",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4278,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4280,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "wbnbAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 4282,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "UPFarmAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 4284,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "UPAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 4287,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "lastEarnBlock",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4290,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "wantLockedTotal",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4293,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "sharesTotal",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4296,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "controllerFee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4305,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "buyBackRate",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 4313,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "rewardsAddress",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 4316,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "entranceFeeFactor",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 4325,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "withdrawFeeFactor",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 4334,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "slippageFactor",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 4339,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken0Router0Address",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 4341,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken0Router1Address",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 4343,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken1Router0Address",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 4345,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken1Router1Address",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 4347,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "wantRouterAddress",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      },
      {
        "astId": 4349,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "buyBackRouter0Address",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 4351,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "buyBackRouter1Address",
        "offset": 0,
        "slot": "27",
        "type": "t_address"
      },
      {
        "astId": 4354,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToUpPath0",
        "offset": 0,
        "slot": "28",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4357,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToUpPath1",
        "offset": 0,
        "slot": "29",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4360,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken0Path0",
        "offset": 0,
        "slot": "30",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4363,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken0Path1",
        "offset": 0,
        "slot": "31",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4366,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken1Path0",
        "offset": 0,
        "slot": "32",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4369,
        "contract": "contracts/StrategyPCS.sol:StrategyPCS",
        "label": "earnedToToken1Path1",
        "offset": 0,
        "slot": "33",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICore)11820": {
        "encoding": "inplace",
        "label": "contract ICore",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}