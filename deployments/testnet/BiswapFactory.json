{
  "address": "0xcBa002d24bb91D0f80b1Eb2834eA814CAA2e718F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_devFee",
          "type": "uint8"
        }
      ],
      "name": "setDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_swapFee",
          "type": "uint32"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x608e45f602cdd28c2e12539d9120de32eef747d2092fb57c595ba7b88ba25f26",
  "receipt": {
    "to": null,
    "from": "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
    "contractAddress": "0xcBa002d24bb91D0f80b1Eb2834eA814CAA2e718F",
    "transactionIndex": 4,
    "gasUsed": "3296982",
    "logsBloom": "0x
    "blockHash": "0x7cdb8b2ad08d35241d6fa977f78948e70ab9bc46b0613453f605d9e9c7529a69",
    "transactionHash": "0x608e45f602cdd28c2e12539d9120de32eef747d2092fb57c595ba7b88ba25f26",
    "logs": [],
    "blockNumber": 17896446,
    "cumulativeGasUsed": "3679461",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D"
  ],
  "solcInputHash": "20df48f99607937b09216e9c312374b3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_devFee\",\"type\":\"uint8\"}],\"name\":\"setDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_swapFee\",\"type\":\"uint32\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/biswap/BiswapFactory.sol\":\"BiswapFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/test/biswap/BiswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *Submitted for verification at BscScan.com on 2021-05-22\\n*/\\n\\npragma solidity 0.6.12;\\n\\ninterface IBiswapFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function INIT_CODE_HASH() external pure returns (bytes32);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setDevFee(address pair, uint8 _devFee) external;\\n    function setSwapFee(address pair, uint32 swapFee) external;\\n}\\n\\n\\n\\ninterface IBiswapPair {\\n/*\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n*/\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n    function swapFee() external view returns (uint32);\\n    function devFee() external view returns (uint32);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n    function setSwapFee(uint32) external;\\n    function setDevFee(uint32) external;\\n}\\n\\ninterface IBiswapERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\\ncontract BiswapERC20 is IBiswapERC20 {\\n    using SafeMath for uint;\\n\\n    string public override constant name = 'Biswap LPs';\\n    string public override constant symbol = 'BSW-LP';\\n    uint8 public override constant decimals = 18;\\n    uint  public override totalSupply;\\n    mapping(address => uint) public override balanceOf;\\n    mapping(address => mapping(address => uint)) public override allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public override constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public override nonces;\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    constructor() public {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external override returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\\n        if (allowance[from][msg.sender] != uint(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\\n        require(deadline >= block.timestamp, 'Biswap: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Biswap: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\ninterface IBiswapCallee {\\n    function BiswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\\ncontract BiswapPair is IBiswapPair, BiswapERC20 {\\n    using SafeMath  for uint;\\n    using UQ112x112 for uint224;\\n\\n    uint public override constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public override factory;\\n    address public override token0;\\n    address public override token1;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint public override price0CumulativeLast;\\n    uint public override price1CumulativeLast;\\n    uint public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n    uint32 public override swapFee = 1; // uses 0.1% default\\n    uint32 public override devFee = 1; // uses 0.5% default from swap fee\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'Biswap: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves() public override view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Biswap: TRANSFER_FAILED');\\n    }\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external override {\\n        require(msg.sender == factory, 'Biswap: FORBIDDEN'); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    function setSwapFee(uint32 _swapFee) external override {\\n        require(_swapFee > 0, \\\"BiswapPair: lower then 0\\\");\\n        require(msg.sender == factory, 'BiswapPair: FORBIDDEN');\\n        require(_swapFee <= 1000, 'BiswapPair: FORBIDDEN_FEE');\\n        swapFee = _swapFee;\\n    }\\n    \\n    function setDevFee(uint32 _devFee) external override {\\n        require(_devFee > 0, \\\"BiswapPair: lower then 0\\\");\\n        require(msg.sender == factory, 'BiswapPair: FORBIDDEN');\\n        require(_devFee <= 500, 'BiswapPair: FORBIDDEN_FEE');\\n        devFee = _devFee;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'Biswap: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IBiswapFactory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\n                uint rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint denominator = rootK.mul(devFee).add(rootKLast);\\n                    uint liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external override lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = IERC20(token0).balanceOf(address(this));\\n        uint balance1 = IERC20(token1).balanceOf(address(this));\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'Biswap: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external override lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0;                                // gas savings\\n        address _token1 = token1;                                // gas savings\\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'Biswap: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external override lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'Biswap: INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Biswap: INSUFFICIENT_LIQUIDITY');\\n\\n        uint balance0;\\n        uint balance1;\\n        { // scope for _token{0,1}, avoids stack too deep errors\\n        address _token0 = token0;\\n        address _token1 = token1;\\n        require(to != _token0 && to != _token1, 'Biswap: INVALID_TO');\\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n        if (data.length > 0) IBiswapCallee(to).BiswapCall(msg.sender, amount0Out, amount1Out, data);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'Biswap: INSUFFICIENT_INPUT_AMOUNT');\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n        uint _swapFee = swapFee;\\n        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(_swapFee));\\n        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(_swapFee));\\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'Biswap: K');\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external override lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external override lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n}\\n\\n\\ncontract BiswapFactory is IBiswapFactory {\\n    address public override feeTo;\\n    address public override feeToSetter;\\n    bytes32 public override INIT_CODE_HASH = keccak256(abi.encodePacked(type(BiswapPair).creationCode));\\n\\n    mapping(address => mapping(address => address)) public override getPair;\\n    address[] public override allPairs;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    constructor(address _feeToSetter) public {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external view override returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\\n        require(tokenA != tokenB, 'Biswap: IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'Biswap: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'Biswap: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(BiswapPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IBiswapPair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external override {\\n        require(msg.sender == feeToSetter, 'Biswap: FORBIDDEN');\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external override {\\n        require(msg.sender == feeToSetter, 'Biswap: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function setDevFee(address _pair, uint8 _devFee) external override {\\n        require(msg.sender == feeToSetter, 'Biswap: FORBIDDEN');\\n        require(_devFee > 0, 'Biswap: FORBIDDEN_FEE');\\n        BiswapPair(_pair).setDevFee(_devFee);\\n    }\\n    \\n    function setSwapFee(address _pair, uint32 _swapFee) external override {\\n        require(msg.sender == feeToSetter, 'Biswap: FORBIDDEN');\\n        BiswapPair(_pair).setSwapFee(_swapFee);\\n    }\\n}\",\"keccak256\":\"0x999bc55364122021c625c2e4f8fd4167c2de1c19e4421013d21e3f901f333333\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604081905261001060a06100e9565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106100565780518252601f199092019160209182019101610037565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001206002553480156100a057600080fd5b50604051616291380380616291833981810160405260208110156100c357600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790556100f6565b612af48061379d83390190565b613698806101056000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80639e68ceb811610081578063e6a439051161005b578063e6a43905146101f5578063ef0bc99314610230578063f46901ed1461026c576100c9565b80639e68ceb814610146578063a2e74af614610187578063c9c65396146101ba576100c9565b80631e3dd18b116100b25780631e3dd18b14610107578063257671f514610124578063574f2ba31461013e576100c9565b8063017e7e58146100ce578063094b7415146100ff575b600080fd5b6100d661029f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100d66102bb565b6100d66004803603602081101561011d57600080fd5b50356102d7565b61012c61030b565b60408051918252519081900360200190f35b61012c610311565b6101856004803603604081101561015c57600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff16906020013563ffffffff16610317565b005b6101856004803603602081101561019d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610412565b6100d6600480360360408110156101d057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166104df565b6100d66004803603604081101561020b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610913565b6101856004803603604081101561024657600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff16906020013560ff16610946565b6101856004803603602081101561028257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a94565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600481815481106102e457fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60025481565b60045490565b60015473ffffffffffffffffffffffffffffffffffffffff16331461039d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4269737761703a20464f5242494444454e000000000000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff1663d6d788c3826040518263ffffffff1660e01b8152600401808263ffffffff168152602001915050600060405180830381600087803b1580156103f657600080fd5b505af115801561040a573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461049857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4269737761703a20464f5242494444454e000000000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561057c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4269737761703a204944454e544943414c5f4144445245535345530000000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106105b95783856105bc565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff821661064357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4269737761703a205a45524f5f41444452455353000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600360209081526040808320858516845290915290205416156106e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4269737761703a20504149525f45584953545300000000000000000000000000604482015290519081900360640190fd5b6060604051806020016106f690610b61565b6020820181038252601f19601f82011660405250905060008383604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f594508473ffffffffffffffffffffffffffffffffffffffff1663485cc95585856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561080457600080fd5b505af1158015610818573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff84811660008181526003602081815260408084208987168086529083528185208054978d167fffffffffffffffffffffffff000000000000000000000000000000000000000098891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b600360209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1633146109cc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4269737761703a20464f5242494444454e000000000000000000000000000000604482015290519081900360640190fd5b60008160ff1611610a3e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4269737761703a20464f5242494444454e5f4645450000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff166303c150b0826040518263ffffffff1660e01b8152600401808260ff168152602001915050600060405180830381600087803b1580156103f657600080fd5b60015473ffffffffffffffffffffffffffffffffffffffff163314610b1a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4269737761703a20464f5242494444454e000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b612af480610b6f8339019056fe6080604052600c8054640100000000600163ffffffff19909216821763ffffffff60201b191617909155600d5534801561003857600080fd5b50604080518082018252600a815269426973776170204c507360b01b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f9af0e98ffe13181561a4920bf009db0b47677d9ae073d40337f69a639f36e66d818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556129c98061012b6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80636827e7641161010f578063ba9a7a56116100a2578063d505accf11610071578063d505accf146105cb578063d6d788c31461061c578063dd62ed3e1461063f578063fff6cae91461066d576101e5565b8063ba9a7a561461058d578063bc25cf7714610595578063c45a0155146105bb578063d21220a7146105c3576101e5565b80637ecebe00116100de5780637ecebe00146104f457806389afcb441461051a57806395d89b4114610559578063a9059cbb14610561576101e5565b80636827e764146104985780636a627842146104a057806370a08231146104c65780637464fc3d146104ec576101e5565b806323b872dd11610187578063485cc95511610156578063485cc9551461043957806354cf2aeb146104675780635909c0d5146104885780635a3d549314610490576101e5565b806323b872dd146103d557806330adf81f1461040b578063313ce567146104135780633644e51514610431576101e5565b80630902f1ac116101c35780630902f1ac14610318578063095ea7b3146103575780630dfe16811461039757806318160ddd146103bb576101e5565b8063022c0d9f146101ea57806303c150b01461027857806306fdde031461029b575b600080fd5b6102766004803603608081101561020057600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561023757600080fd5b82018360208201111561024957600080fd5b8035906020019184600183028401116401000000008311171561026b57600080fd5b509092509050610675565b005b6102766004803603602081101561028e57600080fd5b503563ffffffff16610c2c565b6102a3610d82565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102dd5781810151838201526020016102c5565b50505050905090810190601f16801561030a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610320610dbb565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103836004803603604081101561036d57600080fd5b506001600160a01b038135169060200135610e10565b604080519115158252519081900360200190f35b61039f610e27565b604080516001600160a01b039092168252519081900360200190f35b6103c3610e36565b60408051918252519081900360200190f35b610383600480360360608110156103eb57600080fd5b506001600160a01b03813581169160208101359091169060400135610e3c565b6103c3610eee565b61041b610f12565b6040805160ff9092168252519081900360200190f35b6103c3610f17565b6102766004803603604081101561044f57600080fd5b506001600160a01b0381358116916020013516610f1d565b61046f610fc2565b6040805163ffffffff9092168252519081900360200190f35b6103c3610fce565b6103c3610fd4565b61046f610fda565b6103c3600480360360208110156104b657600080fd5b50356001600160a01b0316610fee565b6103c3600480360360208110156104dc57600080fd5b50356001600160a01b0316611336565b6103c3611348565b6103c36004803603602081101561050a57600080fd5b50356001600160a01b031661134e565b6105406004803603602081101561053057600080fd5b50356001600160a01b0316611360565b6040805192835260208301919091528051918290030190f35b6102a3611776565b6103836004803603604081101561057757600080fd5b506001600160a01b0381351690602001356117af565b6103c36117bc565b610276600480360360208110156105ab57600080fd5b50356001600160a01b03166117c2565b61039f61196e565b61039f61197d565b610276600480360360e08110156105e157600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561198c565b6102766004803603602081101561063257600080fd5b503563ffffffff16611bf0565b6103c36004803603604081101561065557600080fd5b506001600160a01b0381358116916020013516611d3e565b610276611d5b565b600d546001146106cc576040805162461bcd60e51b815260206004820152600e60248201527f4269737761703a204c4f434b4544000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d55841515806106df5750600084115b61071a5760405162461bcd60e51b815260040180806020018281038252602281526020018061292c6022913960400191505060405180910390fd5b600080610725610dbb565b5091509150816dffffffffffffffffffffffffffff16871080156107585750806dffffffffffffffffffffffffffff1686105b6107a9576040805162461bcd60e51b815260206004820152601e60248201527f4269737761703a20494e53554646494349454e545f4c49515549444954590000604482015290519081900360640190fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107e75750806001600160a01b0316896001600160a01b031614155b610838576040805162461bcd60e51b815260206004820152601260248201527f4269737761703a20494e56414c49445f544f0000000000000000000000000000604482015290519081900360640190fd5b8a1561084957610849828a8d611f0d565b891561085a5761085a818a8c611f0d565b861561090c57886001600160a01b0316635b3bc4fe338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156108f357600080fd5b505af1158015610907573d6000803e3d6000fd5b505050505b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561096b57600080fd5b505afa15801561097f573d6000803e3d6000fd5b505050506040513d602081101561099557600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b1580156109fa57600080fd5b505afa158015610a0e573d6000803e3d6000fd5b505050506040513d6020811015610a2457600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a90038311610a4e576000610a64565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff16038311610a88576000610a9e565b89856dffffffffffffffffffffffffffff160383035b90506000821180610aaf5750600081115b610aea5760405162461bcd60e51b81526004018080602001828103825260218152602001806129736021913960400191505060405180910390fd5b600c5463ffffffff90811690600090610b1d90610b0b90869085906120f316565b610b17886103e86120f3565b9061215f565b90506000610b2e610b0b85856120f3565b9050610b5a620f4240610b546dffffffffffffffffffffffffffff8c8116908c166120f3565b906120f3565b610b6483836120f3565b1015610bb7576040805162461bcd60e51b815260206004820152600960248201527f4269737761703a204b0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b505050610bc6848488886121b7565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b60008163ffffffff1611610c87576040805162461bcd60e51b815260206004820152601860248201527f426973776170506169723a206c6f776572207468656e20300000000000000000604482015290519081900360640190fd5b6005546001600160a01b03163314610ce6576040805162461bcd60e51b815260206004820152601560248201527f426973776170506169723a20464f5242494444454e0000000000000000000000604482015290519081900360640190fd5b6101f48163ffffffff161115610d43576040805162461bcd60e51b815260206004820152601960248201527f426973776170506169723a20464f5242494444454e5f46454500000000000000604482015290519081900360640190fd5b600c805463ffffffff909216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff909216919091179055565b6040518060400160405280600a81526020017f426973776170204c50730000000000000000000000000000000000000000000081525081565b6008546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b6000610e1d338484612453565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b03831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610ed9576001600160a01b0384166000908152600260209081526040808320338452909152902054610eb4908361215f565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610ee48484846124b5565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610f7c576040805162461bcd60e51b815260206004820152601160248201527f4269737761703a20464f5242494444454e000000000000000000000000000000604482015290519081900360640190fd5b600680546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560078054929093169116179055565b600c5463ffffffff1681565b60095481565b600a5481565b600c54640100000000900463ffffffff1681565b6000600d54600114611047576040805162461bcd60e51b815260206004820152600e60248201527f4269737761703a204c4f434b4544000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d81905580611057610dbb565b50600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156110c457600080fd5b505afa1580156110d8573d6000803e3d6000fd5b505050506040513d60208110156110ee57600080fd5b5051600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561115a57600080fd5b505afa15801561116e573d6000803e3d6000fd5b505050506040513d602081101561118457600080fd5b5051905060006111a4836dffffffffffffffffffffffffffff871661215f565b905060006111c2836dffffffffffffffffffffffffffff871661215f565b905060006111d08787612563565b60005490915080611207576111f36103e8610b176111ee87876120f3565b6126c3565b985061120260006103e8612715565b611258565b6112556dffffffffffffffffffffffffffff891661122586846120f3565b8161122c57fe5b046dffffffffffffffffffffffffffff891661124886856120f3565b8161124f57fe5b0461279f565b98505b600089116112975760405162461bcd60e51b81526004018080602001828103825260258152602001806129076025913960400191505060405180910390fd5b6112a18a8a612715565b6112ad86868a8a6121b7565b81156112e9576008546112e5906dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004166120f3565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600d546001146113ba576040805162461bcd60e51b815260206004820152600e60248201527f4269737761703a204c4f434b4544000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d819055806113ca610dbb565b50600654600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561143f57600080fd5b505afa158015611453573d6000803e3d6000fd5b505050506040513d602081101561146957600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156114d057600080fd5b505afa1580156114e4573d6000803e3d6000fd5b505050506040513d60208110156114fa57600080fd5b5051306000908152600160205260408120549192506115198888612563565b6000549091508061152a84876120f3565b8161153157fe5b049a508061153f84866120f3565b8161154657fe5b04995060008b118015611559575060008a115b6115945760405162461bcd60e51b815260040180806020018281038252602581526020018061294e6025913960400191505060405180910390fd5b61159e30846127b7565b6115a9878d8d611f0d565b6115b4868d8c611f0d565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561161357600080fd5b505afa158015611627573d6000803e3d6000fd5b505050506040513d602081101561163d57600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b1580156116a257600080fd5b505afa1580156116b6573d6000803e3d6000fd5b505050506040513d60208110156116cc57600080fd5b505193506116dc85858b8b6121b7565b811561171857600854611714906dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004166120f3565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600d81905550915091565b6040518060400160405280600681526020017f4253572d4c50000000000000000000000000000000000000000000000000000081525081565b6000610e1d3384846124b5565b6103e881565b600d54600114611819576040805162461bcd60e51b815260206004820152600e60248201527f4269737761703a204c4f434b4544000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600654600754600854604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b0394851694909316926118e292859287926118dd926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b1580156118ab57600080fd5b505afa1580156118bf573d6000803e3d6000fd5b505050506040513d60208110156118d557600080fd5b50519061215f565b611f0d565b61196481846118dd6008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118ab57600080fd5b50506001600d5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b428410156119e1576040805162461bcd60e51b815260206004820152600f60248201527f4269737761703a20455850495245440000000000000000000000000000000000604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015611b35573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b03811615801590611b895750886001600160a01b0316816001600160a01b0316145b611bda576040805162461bcd60e51b815260206004820152601960248201527f4269737761703a20494e56414c49445f5349474e415455524500000000000000604482015290519081900360640190fd5b611be5898989612453565b505050505050505050565b60008163ffffffff1611611c4b576040805162461bcd60e51b815260206004820152601860248201527f426973776170506169723a206c6f776572207468656e20300000000000000000604482015290519081900360640190fd5b6005546001600160a01b03163314611caa576040805162461bcd60e51b815260206004820152601560248201527f426973776170506169723a20464f5242494444454e0000000000000000000000604482015290519081900360640190fd5b6103e88163ffffffff161115611d07576040805162461bcd60e51b815260206004820152601960248201527f426973776170506169723a20464f5242494444454e5f46454500000000000000604482015290519081900360640190fd5b600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff92909216919091179055565b600260209081526000928352604080842090915290825290205481565b600d54600114611db2576040805162461bcd60e51b815260206004820152600e60248201527f4269737761703a204c4f434b4544000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051611f06926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e1c57600080fd5b505afa158015611e30573d6000803e3d6000fd5b505050506040513d6020811015611e4657600080fd5b5051600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611eac57600080fd5b505afa158015611ec0573d6000803e3d6000fd5b505050506040513d6020811015611ed657600080fd5b50516008546dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004166121b7565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b6020831061200657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611fc9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612068576040519150601f19603f3d011682016040523d82523d6000602084013e61206d565b606091505b509150915081801561209b57508051158061209b575080806020019051602081101561209857600080fd5b50515b6120ec576040805162461bcd60e51b815260206004820152601760248201527f4269737761703a205452414e534645525f4641494c4544000000000000000000604482015290519081900360640190fd5b5050505050565b600081158061210e5750508082028282828161210b57fe5b04145b610e21576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820382811115610e21576040805162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b6dffffffffffffffffffffffffffff84118015906121e357506dffffffffffffffffffffffffffff8311155b612234576040805162461bcd60e51b815260206004820152601060248201527f4269737761703a204f564552464c4f5700000000000000000000000000000000604482015290519081900360640190fd5b60085463ffffffff428116917c01000000000000000000000000000000000000000000000000000000009004811682039081161580159061228457506dffffffffffffffffffffffffffff841615155b801561229f57506dffffffffffffffffffffffffffff831615155b15612349578063ffffffff166122dc856122b886612849565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169061286d565b600980547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff811661231c846122b887612849565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600880547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166000908152600160205260409020546124d8908261215f565b6001600160a01b03808516600090815260016020526040808220939093559084168152205461250790826128ae565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b1580156125b457600080fd5b505afa1580156125c8573d6000803e3d6000fd5b505050506040513d60208110156125de57600080fd5b5051600b546001600160a01b0382161580159450919250906126af5780156126aa5760006126226111ee6dffffffffffffffffffffffffffff8881169088166120f3565b9050600061262f836126c3565b9050808211156126a7576000612651612648848461215f565b600054906120f3565b600c5490915060009061268390849061267d90879063ffffffff6401000000009091048116906120f316565b906128ae565b9050600081838161269057fe5b04905080156126a3576126a38782612715565b5050505b50505b6126bb565b80156126bb576000600b555b505092915050565b60006003821115612706575080600160028204015b81811015612700578091506002818285816126ef57fe5b0401816126f857fe5b0490506126d8565b50612710565b8115612710575060015b919050565b60005461272290826128ae565b60009081556001600160a01b03831681526001602052604090205461274790826128ae565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106127ae57816127b0565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546127da908261215f565b6001600160a01b03831660009081526001602052604081209190915554612801908261215f565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416816128a657fe5b049392505050565b80820182811015610e21576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfe4269737761703a20494e53554646494349454e545f4c49515549444954595f4d494e5445444269737761703a20494e53554646494349454e545f4f55545055545f414d4f554e544269737761703a20494e53554646494349454e545f4c49515549444954595f4255524e45444269737761703a20494e53554646494349454e545f494e5055545f414d4f554e54a26469706673582212204f3313e159670e2cb4f3366035f2d209797ae7c10bf55d0557578854c5f869fe64736f6c634300060c0033a2646970667358221220e267e2124f1c421fce6344484b8772b1bb03e478fc2093d79032826e0b80775264736f6c634300060c00336080604052600c8054640100000000600163ffffffff19909216821763ffffffff60201b191617909155600d5534801561003857600080fd5b50604080518082018252600a815269426973776170204c507360b01b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f9af0e98ffe13181561a4920bf009db0b47677d9ae073d40337f69a639f36e66d818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556129c98061012b6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80636827e7641161010f578063ba9a7a56116100a2578063d505accf11610071578063d505accf146105cb578063d6d788c31461061c578063dd62ed3e1461063f578063fff6cae91461066d576101e5565b8063ba9a7a561461058d578063bc25cf7714610595578063c45a0155146105bb578063d21220a7146105c3576101e5565b80637ecebe00116100de5780637ecebe00146104f457806389afcb441461051a57806395d89b4114610559578063a9059cbb14610561576101e5565b80636827e764146104985780636a627842146104a057806370a08231146104c65780637464fc3d146104ec576101e5565b806323b872dd11610187578063485cc95511610156578063485cc9551461043957806354cf2aeb146104675780635909c0d5146104885780635a3d549314610490576101e5565b806323b872dd146103d557806330adf81f1461040b578063313ce567146104135780633644e51514610431576101e5565b80630902f1ac116101c35780630902f1ac14610318578063095ea7b3146103575780630dfe16811461039757806318160ddd146103bb576101e5565b8063022c0d9f146101ea57806303c150b01461027857806306fdde031461029b575b600080fd5b6102766004803603608081101561020057600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561023757600080fd5b82018360208201111561024957600080fd5b8035906020019184600183028401116401000000008311171561026b57600080fd5b509092509050610675565b005b6102766004803603602081101561028e57600080fd5b503563ffffffff16610c2c565b6102a3610d82565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102dd5781810151838201526020016102c5565b50505050905090810190601f16801561030a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610320610dbb565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103836004803603604081101561036d57600080fd5b506001600160a01b038135169060200135610e10565b604080519115158252519081900360200190f35b61039f610e27565b604080516001600160a01b039092168252519081900360200190f35b6103c3610e36565b60408051918252519081900360200190f35b610383600480360360608110156103eb57600080fd5b506001600160a01b03813581169160208101359091169060400135610e3c565b6103c3610eee565b61041b610f12565b6040805160ff9092168252519081900360200190f35b6103c3610f17565b6102766004803603604081101561044f57600080fd5b506001600160a01b0381358116916020013516610f1d565b61046f610fc2565b6040805163ffffffff9092168252519081900360200190f35b6103c3610fce565b6103c3610fd4565b61046f610fda565b6103c3600480360360208110156104b657600080fd5b50356001600160a01b0316610fee565b6103c3600480360360208110156104dc57600080fd5b50356001600160a01b0316611336565b6103c3611348565b6103c36004803603602081101561050a57600080fd5b50356001600160a01b031661134e565b6105406004803603602081101561053057600080fd5b50356001600160a01b0316611360565b6040805192835260208301919091528051918290030190f35b6102a3611776565b6103836004803603604081101561057757600080fd5b506001600160a01b0381351690602001356117af565b6103c36117bc565b610276600480360360208110156105ab57600080fd5b50356001600160a01b03166117c2565b61039f61196e565b61039f61197d565b610276600480360360e08110156105e157600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561198c565b6102766004803603602081101561063257600080fd5b503563ffffffff16611bf0565b6103c36004803603604081101561065557600080fd5b506001600160a01b0381358116916020013516611d3e565b610276611d5b565b600d546001146106cc576040805162461bcd60e51b815260206004820152600e60248201527f4269737761703a204c4f434b4544000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d55841515806106df5750600084115b61071a5760405162461bcd60e51b815260040180806020018281038252602281526020018061292c6022913960400191505060405180910390fd5b600080610725610dbb565b5091509150816dffffffffffffffffffffffffffff16871080156107585750806dffffffffffffffffffffffffffff1686105b6107a9576040805162461bcd60e51b815260206004820152601e60248201527f4269737761703a20494e53554646494349454e545f4c49515549444954590000604482015290519081900360640190fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107e75750806001600160a01b0316896001600160a01b031614155b610838576040805162461bcd60e51b815260206004820152601260248201527f4269737761703a20494e56414c49445f544f0000000000000000000000000000604482015290519081900360640190fd5b8a1561084957610849828a8d611f0d565b891561085a5761085a818a8c611f0d565b861561090c57886001600160a01b0316635b3bc4fe338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156108f357600080fd5b505af1158015610907573d6000803e3d6000fd5b505050505b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561096b57600080fd5b505afa15801561097f573d6000803e3d6000fd5b505050506040513d602081101561099557600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b1580156109fa57600080fd5b505afa158015610a0e573d6000803e3d6000fd5b505050506040513d6020811015610a2457600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a90038311610a4e576000610a64565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff16038311610a88576000610a9e565b89856dffffffffffffffffffffffffffff160383035b90506000821180610aaf5750600081115b610aea5760405162461bcd60e51b81526004018080602001828103825260218152602001806129736021913960400191505060405180910390fd5b600c5463ffffffff90811690600090610b1d90610b0b90869085906120f316565b610b17886103e86120f3565b9061215f565b90506000610b2e610b0b85856120f3565b9050610b5a620f4240610b546dffffffffffffffffffffffffffff8c8116908c166120f3565b906120f3565b610b6483836120f3565b1015610bb7576040805162461bcd60e51b815260206004820152600960248201527f4269737761703a204b0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b505050610bc6848488886121b7565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b60008163ffffffff1611610c87576040805162461bcd60e51b815260206004820152601860248201527f426973776170506169723a206c6f776572207468656e20300000000000000000604482015290519081900360640190fd5b6005546001600160a01b03163314610ce6576040805162461bcd60e51b815260206004820152601560248201527f426973776170506169723a20464f5242494444454e0000000000000000000000604482015290519081900360640190fd5b6101f48163ffffffff161115610d43576040805162461bcd60e51b815260206004820152601960248201527f426973776170506169723a20464f5242494444454e5f46454500000000000000604482015290519081900360640190fd5b600c805463ffffffff909216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff909216919091179055565b6040518060400160405280600a81526020017f426973776170204c50730000000000000000000000000000000000000000000081525081565b6008546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b6000610e1d338484612453565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b03831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610ed9576001600160a01b0384166000908152600260209081526040808320338452909152902054610eb4908361215f565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610ee48484846124b5565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610f7c576040805162461bcd60e51b815260206004820152601160248201527f4269737761703a20464f5242494444454e000000000000000000000000000000604482015290519081900360640190fd5b600680546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560078054929093169116179055565b600c5463ffffffff1681565b60095481565b600a5481565b600c54640100000000900463ffffffff1681565b6000600d54600114611047576040805162461bcd60e51b815260206004820152600e60248201527f4269737761703a204c4f434b4544000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d81905580611057610dbb565b50600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156110c457600080fd5b505afa1580156110d8573d6000803e3d6000fd5b505050506040513d60208110156110ee57600080fd5b5051600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561115a57600080fd5b505afa15801561116e573d6000803e3d6000fd5b505050506040513d602081101561118457600080fd5b5051905060006111a4836dffffffffffffffffffffffffffff871661215f565b905060006111c2836dffffffffffffffffffffffffffff871661215f565b905060006111d08787612563565b60005490915080611207576111f36103e8610b176111ee87876120f3565b6126c3565b985061120260006103e8612715565b611258565b6112556dffffffffffffffffffffffffffff891661122586846120f3565b8161122c57fe5b046dffffffffffffffffffffffffffff891661124886856120f3565b8161124f57fe5b0461279f565b98505b600089116112975760405162461bcd60e51b81526004018080602001828103825260258152602001806129076025913960400191505060405180910390fd5b6112a18a8a612715565b6112ad86868a8a6121b7565b81156112e9576008546112e5906dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004166120f3565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600d546001146113ba576040805162461bcd60e51b815260206004820152600e60248201527f4269737761703a204c4f434b4544000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d819055806113ca610dbb565b50600654600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561143f57600080fd5b505afa158015611453573d6000803e3d6000fd5b505050506040513d602081101561146957600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156114d057600080fd5b505afa1580156114e4573d6000803e3d6000fd5b505050506040513d60208110156114fa57600080fd5b5051306000908152600160205260408120549192506115198888612563565b6000549091508061152a84876120f3565b8161153157fe5b049a508061153f84866120f3565b8161154657fe5b04995060008b118015611559575060008a115b6115945760405162461bcd60e51b815260040180806020018281038252602581526020018061294e6025913960400191505060405180910390fd5b61159e30846127b7565b6115a9878d8d611f0d565b6115b4868d8c611f0d565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561161357600080fd5b505afa158015611627573d6000803e3d6000fd5b505050506040513d602081101561163d57600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b1580156116a257600080fd5b505afa1580156116b6573d6000803e3d6000fd5b505050506040513d60208110156116cc57600080fd5b505193506116dc85858b8b6121b7565b811561171857600854611714906dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004166120f3565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600d81905550915091565b6040518060400160405280600681526020017f4253572d4c50000000000000000000000000000000000000000000000000000081525081565b6000610e1d3384846124b5565b6103e881565b600d54600114611819576040805162461bcd60e51b815260206004820152600e60248201527f4269737761703a204c4f434b4544000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600654600754600854604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b0394851694909316926118e292859287926118dd926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b1580156118ab57600080fd5b505afa1580156118bf573d6000803e3d6000fd5b505050506040513d60208110156118d557600080fd5b50519061215f565b611f0d565b61196481846118dd6008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118ab57600080fd5b50506001600d5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b428410156119e1576040805162461bcd60e51b815260206004820152600f60248201527f4269737761703a20455850495245440000000000000000000000000000000000604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015611b35573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b03811615801590611b895750886001600160a01b0316816001600160a01b0316145b611bda576040805162461bcd60e51b815260206004820152601960248201527f4269737761703a20494e56414c49445f5349474e415455524500000000000000604482015290519081900360640190fd5b611be5898989612453565b505050505050505050565b60008163ffffffff1611611c4b576040805162461bcd60e51b815260206004820152601860248201527f426973776170506169723a206c6f776572207468656e20300000000000000000604482015290519081900360640190fd5b6005546001600160a01b03163314611caa576040805162461bcd60e51b815260206004820152601560248201527f426973776170506169723a20464f5242494444454e0000000000000000000000604482015290519081900360640190fd5b6103e88163ffffffff161115611d07576040805162461bcd60e51b815260206004820152601960248201527f426973776170506169723a20464f5242494444454e5f46454500000000000000604482015290519081900360640190fd5b600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff92909216919091179055565b600260209081526000928352604080842090915290825290205481565b600d54600114611db2576040805162461bcd60e51b815260206004820152600e60248201527f4269737761703a204c4f434b4544000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051611f06926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e1c57600080fd5b505afa158015611e30573d6000803e3d6000fd5b505050506040513d6020811015611e4657600080fd5b5051600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611eac57600080fd5b505afa158015611ec0573d6000803e3d6000fd5b505050506040513d6020811015611ed657600080fd5b50516008546dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004166121b7565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b6020831061200657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611fc9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612068576040519150601f19603f3d011682016040523d82523d6000602084013e61206d565b606091505b509150915081801561209b57508051158061209b575080806020019051602081101561209857600080fd5b50515b6120ec576040805162461bcd60e51b815260206004820152601760248201527f4269737761703a205452414e534645525f4641494c4544000000000000000000604482015290519081900360640190fd5b5050505050565b600081158061210e5750508082028282828161210b57fe5b04145b610e21576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820382811115610e21576040805162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b6dffffffffffffffffffffffffffff84118015906121e357506dffffffffffffffffffffffffffff8311155b612234576040805162461bcd60e51b815260206004820152601060248201527f4269737761703a204f564552464c4f5700000000000000000000000000000000604482015290519081900360640190fd5b60085463ffffffff428116917c01000000000000000000000000000000000000000000000000000000009004811682039081161580159061228457506dffffffffffffffffffffffffffff841615155b801561229f57506dffffffffffffffffffffffffffff831615155b15612349578063ffffffff166122dc856122b886612849565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169061286d565b600980547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff811661231c846122b887612849565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600880547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166000908152600160205260409020546124d8908261215f565b6001600160a01b03808516600090815260016020526040808220939093559084168152205461250790826128ae565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b1580156125b457600080fd5b505afa1580156125c8573d6000803e3d6000fd5b505050506040513d60208110156125de57600080fd5b5051600b546001600160a01b0382161580159450919250906126af5780156126aa5760006126226111ee6dffffffffffffffffffffffffffff8881169088166120f3565b9050600061262f836126c3565b9050808211156126a7576000612651612648848461215f565b600054906120f3565b600c5490915060009061268390849061267d90879063ffffffff6401000000009091048116906120f316565b906128ae565b9050600081838161269057fe5b04905080156126a3576126a38782612715565b5050505b50505b6126bb565b80156126bb576000600b555b505092915050565b60006003821115612706575080600160028204015b81811015612700578091506002818285816126ef57fe5b0401816126f857fe5b0490506126d8565b50612710565b8115612710575060015b919050565b60005461272290826128ae565b60009081556001600160a01b03831681526001602052604090205461274790826128ae565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106127ae57816127b0565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546127da908261215f565b6001600160a01b03831660009081526001602052604081209190915554612801908261215f565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416816128a657fe5b049392505050565b80820182811015610e21576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfe4269737761703a20494e53554646494349454e545f4c49515549444954595f4d494e5445444269737761703a20494e53554646494349454e545f4f55545055545f414d4f554e544269737761703a20494e53554646494349454e545f4c49515549444954595f4255524e45444269737761703a20494e53554646494349454e545f494e5055545f414d4f554e54a26469706673582212204f3313e159670e2cb4f3366035f2d209797ae7c10bf55d0557578854c5f869fe64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80639e68ceb811610081578063e6a439051161005b578063e6a43905146101f5578063ef0bc99314610230578063f46901ed1461026c576100c9565b80639e68ceb814610146578063a2e74af614610187578063c9c65396146101ba576100c9565b80631e3dd18b116100b25780631e3dd18b14610107578063257671f514610124578063574f2ba31461013e576100c9565b8063017e7e58146100ce578063094b7415146100ff575b600080fd5b6100d661029f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100d66102bb565b6100d66004803603602081101561011d57600080fd5b50356102d7565b61012c61030b565b60408051918252519081900360200190f35b61012c610311565b6101856004803603604081101561015c57600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff16906020013563ffffffff16610317565b005b6101856004803603602081101561019d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610412565b6100d6600480360360408110156101d057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166104df565b6100d66004803603604081101561020b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610913565b6101856004803603604081101561024657600080fd5b50803573ffffffffffffffffffffffffffffffffffffffff16906020013560ff16610946565b6101856004803603602081101561028257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a94565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600481815481106102e457fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60025481565b60045490565b60015473ffffffffffffffffffffffffffffffffffffffff16331461039d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4269737761703a20464f5242494444454e000000000000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff1663d6d788c3826040518263ffffffff1660e01b8152600401808263ffffffff168152602001915050600060405180830381600087803b1580156103f657600080fd5b505af115801561040a573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461049857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4269737761703a20464f5242494444454e000000000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561057c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4269737761703a204944454e544943414c5f4144445245535345530000000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106105b95783856105bc565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff821661064357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4269737761703a205a45524f5f41444452455353000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600360209081526040808320858516845290915290205416156106e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4269737761703a20504149525f45584953545300000000000000000000000000604482015290519081900360640190fd5b6060604051806020016106f690610b61565b6020820181038252601f19601f82011660405250905060008383604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f594508473ffffffffffffffffffffffffffffffffffffffff1663485cc95585856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561080457600080fd5b505af1158015610818573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff84811660008181526003602081815260408084208987168086529083528185208054978d167fffffffffffffffffffffffff000000000000000000000000000000000000000098891681179091559383528185208686528352818520805488168517905560048054600181018255958190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b600360209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1633146109cc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4269737761703a20464f5242494444454e000000000000000000000000000000604482015290519081900360640190fd5b60008160ff1611610a3e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4269737761703a20464f5242494444454e5f4645450000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff166303c150b0826040518263ffffffff1660e01b8152600401808260ff168152602001915050600060405180830381600087803b1580156103f657600080fd5b60015473ffffffffffffffffffffffffffffffffffffffff163314610b1a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4269737761703a20464f5242494444454e000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b612af480610b6f8339019056fe6080604052600c8054640100000000600163ffffffff19909216821763ffffffff60201b191617909155600d5534801561003857600080fd5b50604080518082018252600a815269426973776170204c507360b01b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f9af0e98ffe13181561a4920bf009db0b47677d9ae073d40337f69a639f36e66d818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556129c98061012b6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80636827e7641161010f578063ba9a7a56116100a2578063d505accf11610071578063d505accf146105cb578063d6d788c31461061c578063dd62ed3e1461063f578063fff6cae91461066d576101e5565b8063ba9a7a561461058d578063bc25cf7714610595578063c45a0155146105bb578063d21220a7146105c3576101e5565b80637ecebe00116100de5780637ecebe00146104f457806389afcb441461051a57806395d89b4114610559578063a9059cbb14610561576101e5565b80636827e764146104985780636a627842146104a057806370a08231146104c65780637464fc3d146104ec576101e5565b806323b872dd11610187578063485cc95511610156578063485cc9551461043957806354cf2aeb146104675780635909c0d5146104885780635a3d549314610490576101e5565b806323b872dd146103d557806330adf81f1461040b578063313ce567146104135780633644e51514610431576101e5565b80630902f1ac116101c35780630902f1ac14610318578063095ea7b3146103575780630dfe16811461039757806318160ddd146103bb576101e5565b8063022c0d9f146101ea57806303c150b01461027857806306fdde031461029b575b600080fd5b6102766004803603608081101561020057600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561023757600080fd5b82018360208201111561024957600080fd5b8035906020019184600183028401116401000000008311171561026b57600080fd5b509092509050610675565b005b6102766004803603602081101561028e57600080fd5b503563ffffffff16610c2c565b6102a3610d82565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102dd5781810151838201526020016102c5565b50505050905090810190601f16801561030a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610320610dbb565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103836004803603604081101561036d57600080fd5b506001600160a01b038135169060200135610e10565b604080519115158252519081900360200190f35b61039f610e27565b604080516001600160a01b039092168252519081900360200190f35b6103c3610e36565b60408051918252519081900360200190f35b610383600480360360608110156103eb57600080fd5b506001600160a01b03813581169160208101359091169060400135610e3c565b6103c3610eee565b61041b610f12565b6040805160ff9092168252519081900360200190f35b6103c3610f17565b6102766004803603604081101561044f57600080fd5b506001600160a01b0381358116916020013516610f1d565b61046f610fc2565b6040805163ffffffff9092168252519081900360200190f35b6103c3610fce565b6103c3610fd4565b61046f610fda565b6103c3600480360360208110156104b657600080fd5b50356001600160a01b0316610fee565b6103c3600480360360208110156104dc57600080fd5b50356001600160a01b0316611336565b6103c3611348565b6103c36004803603602081101561050a57600080fd5b50356001600160a01b031661134e565b6105406004803603602081101561053057600080fd5b50356001600160a01b0316611360565b6040805192835260208301919091528051918290030190f35b6102a3611776565b6103836004803603604081101561057757600080fd5b506001600160a01b0381351690602001356117af565b6103c36117bc565b610276600480360360208110156105ab57600080fd5b50356001600160a01b03166117c2565b61039f61196e565b61039f61197d565b610276600480360360e08110156105e157600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561198c565b6102766004803603602081101561063257600080fd5b503563ffffffff16611bf0565b6103c36004803603604081101561065557600080fd5b506001600160a01b0381358116916020013516611d3e565b610276611d5b565b600d546001146106cc576040805162461bcd60e51b815260206004820152600e60248201527f4269737761703a204c4f434b4544000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d55841515806106df5750600084115b61071a5760405162461bcd60e51b815260040180806020018281038252602281526020018061292c6022913960400191505060405180910390fd5b600080610725610dbb565b5091509150816dffffffffffffffffffffffffffff16871080156107585750806dffffffffffffffffffffffffffff1686105b6107a9576040805162461bcd60e51b815260206004820152601e60248201527f4269737761703a20494e53554646494349454e545f4c49515549444954590000604482015290519081900360640190fd5b60065460075460009182916001600160a01b039182169190811690891682148015906107e75750806001600160a01b0316896001600160a01b031614155b610838576040805162461bcd60e51b815260206004820152601260248201527f4269737761703a20494e56414c49445f544f0000000000000000000000000000604482015290519081900360640190fd5b8a1561084957610849828a8d611f0d565b891561085a5761085a818a8c611f0d565b861561090c57886001600160a01b0316635b3bc4fe338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156108f357600080fd5b505af1158015610907573d6000803e3d6000fd5b505050505b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561096b57600080fd5b505afa15801561097f573d6000803e3d6000fd5b505050506040513d602081101561099557600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b1580156109fa57600080fd5b505afa158015610a0e573d6000803e3d6000fd5b505050506040513d6020811015610a2457600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a90038311610a4e576000610a64565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff16038311610a88576000610a9e565b89856dffffffffffffffffffffffffffff160383035b90506000821180610aaf5750600081115b610aea5760405162461bcd60e51b81526004018080602001828103825260218152602001806129736021913960400191505060405180910390fd5b600c5463ffffffff90811690600090610b1d90610b0b90869085906120f316565b610b17886103e86120f3565b9061215f565b90506000610b2e610b0b85856120f3565b9050610b5a620f4240610b546dffffffffffffffffffffffffffff8c8116908c166120f3565b906120f3565b610b6483836120f3565b1015610bb7576040805162461bcd60e51b815260206004820152600960248201527f4269737761703a204b0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b505050610bc6848488886121b7565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600d55505050505050505050565b60008163ffffffff1611610c87576040805162461bcd60e51b815260206004820152601860248201527f426973776170506169723a206c6f776572207468656e20300000000000000000604482015290519081900360640190fd5b6005546001600160a01b03163314610ce6576040805162461bcd60e51b815260206004820152601560248201527f426973776170506169723a20464f5242494444454e0000000000000000000000604482015290519081900360640190fd5b6101f48163ffffffff161115610d43576040805162461bcd60e51b815260206004820152601960248201527f426973776170506169723a20464f5242494444454e5f46454500000000000000604482015290519081900360640190fd5b600c805463ffffffff909216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff909216919091179055565b6040518060400160405280600a81526020017f426973776170204c50730000000000000000000000000000000000000000000081525081565b6008546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b6000610e1d338484612453565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b03831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610ed9576001600160a01b0384166000908152600260209081526040808320338452909152902054610eb4908361215f565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610ee48484846124b5565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610f7c576040805162461bcd60e51b815260206004820152601160248201527f4269737761703a20464f5242494444454e000000000000000000000000000000604482015290519081900360640190fd5b600680546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560078054929093169116179055565b600c5463ffffffff1681565b60095481565b600a5481565b600c54640100000000900463ffffffff1681565b6000600d54600114611047576040805162461bcd60e51b815260206004820152600e60248201527f4269737761703a204c4f434b4544000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d81905580611057610dbb565b50600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156110c457600080fd5b505afa1580156110d8573d6000803e3d6000fd5b505050506040513d60208110156110ee57600080fd5b5051600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561115a57600080fd5b505afa15801561116e573d6000803e3d6000fd5b505050506040513d602081101561118457600080fd5b5051905060006111a4836dffffffffffffffffffffffffffff871661215f565b905060006111c2836dffffffffffffffffffffffffffff871661215f565b905060006111d08787612563565b60005490915080611207576111f36103e8610b176111ee87876120f3565b6126c3565b985061120260006103e8612715565b611258565b6112556dffffffffffffffffffffffffffff891661122586846120f3565b8161122c57fe5b046dffffffffffffffffffffffffffff891661124886856120f3565b8161124f57fe5b0461279f565b98505b600089116112975760405162461bcd60e51b81526004018080602001828103825260258152602001806129076025913960400191505060405180910390fd5b6112a18a8a612715565b6112ad86868a8a6121b7565b81156112e9576008546112e5906dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004166120f3565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600d546001146113ba576040805162461bcd60e51b815260206004820152600e60248201527f4269737761703a204c4f434b4544000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d819055806113ca610dbb565b50600654600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561143f57600080fd5b505afa158015611453573d6000803e3d6000fd5b505050506040513d602081101561146957600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156114d057600080fd5b505afa1580156114e4573d6000803e3d6000fd5b505050506040513d60208110156114fa57600080fd5b5051306000908152600160205260408120549192506115198888612563565b6000549091508061152a84876120f3565b8161153157fe5b049a508061153f84866120f3565b8161154657fe5b04995060008b118015611559575060008a115b6115945760405162461bcd60e51b815260040180806020018281038252602581526020018061294e6025913960400191505060405180910390fd5b61159e30846127b7565b6115a9878d8d611f0d565b6115b4868d8c611f0d565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561161357600080fd5b505afa158015611627573d6000803e3d6000fd5b505050506040513d602081101561163d57600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b1580156116a257600080fd5b505afa1580156116b6573d6000803e3d6000fd5b505050506040513d60208110156116cc57600080fd5b505193506116dc85858b8b6121b7565b811561171857600854611714906dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004166120f3565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600d81905550915091565b6040518060400160405280600681526020017f4253572d4c50000000000000000000000000000000000000000000000000000081525081565b6000610e1d3384846124b5565b6103e881565b600d54600114611819576040805162461bcd60e51b815260206004820152600e60248201527f4269737761703a204c4f434b4544000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600654600754600854604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b0394851694909316926118e292859287926118dd926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b1580156118ab57600080fd5b505afa1580156118bf573d6000803e3d6000fd5b505050506040513d60208110156118d557600080fd5b50519061215f565b611f0d565b61196481846118dd6008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118ab57600080fd5b50506001600d5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b428410156119e1576040805162461bcd60e51b815260206004820152600f60248201527f4269737761703a20455850495245440000000000000000000000000000000000604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015611b35573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b03811615801590611b895750886001600160a01b0316816001600160a01b0316145b611bda576040805162461bcd60e51b815260206004820152601960248201527f4269737761703a20494e56414c49445f5349474e415455524500000000000000604482015290519081900360640190fd5b611be5898989612453565b505050505050505050565b60008163ffffffff1611611c4b576040805162461bcd60e51b815260206004820152601860248201527f426973776170506169723a206c6f776572207468656e20300000000000000000604482015290519081900360640190fd5b6005546001600160a01b03163314611caa576040805162461bcd60e51b815260206004820152601560248201527f426973776170506169723a20464f5242494444454e0000000000000000000000604482015290519081900360640190fd5b6103e88163ffffffff161115611d07576040805162461bcd60e51b815260206004820152601960248201527f426973776170506169723a20464f5242494444454e5f46454500000000000000604482015290519081900360640190fd5b600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff92909216919091179055565b600260209081526000928352604080842090915290825290205481565b600d54600114611db2576040805162461bcd60e51b815260206004820152600e60248201527f4269737761703a204c4f434b4544000000000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051611f06926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e1c57600080fd5b505afa158015611e30573d6000803e3d6000fd5b505050506040513d6020811015611e4657600080fd5b5051600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611eac57600080fd5b505afa158015611ec0573d6000803e3d6000fd5b505050506040513d6020811015611ed657600080fd5b50516008546dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004166121b7565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b6020831061200657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611fc9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612068576040519150601f19603f3d011682016040523d82523d6000602084013e61206d565b606091505b509150915081801561209b57508051158061209b575080806020019051602081101561209857600080fd5b50515b6120ec576040805162461bcd60e51b815260206004820152601760248201527f4269737761703a205452414e534645525f4641494c4544000000000000000000604482015290519081900360640190fd5b5050505050565b600081158061210e5750508082028282828161210b57fe5b04145b610e21576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820382811115610e21576040805162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b6dffffffffffffffffffffffffffff84118015906121e357506dffffffffffffffffffffffffffff8311155b612234576040805162461bcd60e51b815260206004820152601060248201527f4269737761703a204f564552464c4f5700000000000000000000000000000000604482015290519081900360640190fd5b60085463ffffffff428116917c01000000000000000000000000000000000000000000000000000000009004811682039081161580159061228457506dffffffffffffffffffffffffffff841615155b801561229f57506dffffffffffffffffffffffffffff831615155b15612349578063ffffffff166122dc856122b886612849565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169061286d565b600980547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff811661231c846122b887612849565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600880547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166000908152600160205260409020546124d8908261215f565b6001600160a01b03808516600090815260016020526040808220939093559084168152205461250790826128ae565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b1580156125b457600080fd5b505afa1580156125c8573d6000803e3d6000fd5b505050506040513d60208110156125de57600080fd5b5051600b546001600160a01b0382161580159450919250906126af5780156126aa5760006126226111ee6dffffffffffffffffffffffffffff8881169088166120f3565b9050600061262f836126c3565b9050808211156126a7576000612651612648848461215f565b600054906120f3565b600c5490915060009061268390849061267d90879063ffffffff6401000000009091048116906120f316565b906128ae565b9050600081838161269057fe5b04905080156126a3576126a38782612715565b5050505b50505b6126bb565b80156126bb576000600b555b505092915050565b60006003821115612706575080600160028204015b81811015612700578091506002818285816126ef57fe5b0401816126f857fe5b0490506126d8565b50612710565b8115612710575060015b919050565b60005461272290826128ae565b60009081556001600160a01b03831681526001602052604090205461274790826128ae565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106127ae57816127b0565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546127da908261215f565b6001600160a01b03831660009081526001602052604081209190915554612801908261215f565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416816128a657fe5b049392505050565b80820182811015610e21576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfe4269737761703a20494e53554646494349454e545f4c49515549444954595f4d494e5445444269737761703a20494e53554646494349454e545f4f55545055545f414d4f554e544269737761703a20494e53554646494349454e545f4c49515549444954595f4255524e45444269737761703a20494e53554646494349454e545f494e5055545f414d4f554e54a26469706673582212204f3313e159670e2cb4f3366035f2d209797ae7c10bf55d0557578854c5f869fe64736f6c634300060c0033a2646970667358221220e267e2124f1c421fce6344484b8772b1bb03e478fc2093d79032826e0b80775264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2185,
        "contract": "contracts/test/biswap/BiswapFactory.sol:BiswapFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2188,
        "contract": "contracts/test/biswap/BiswapFactory.sol:BiswapFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2200,
        "contract": "contracts/test/biswap/BiswapFactory.sol:BiswapFactory",
        "label": "INIT_CODE_HASH",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 2207,
        "contract": "contracts/test/biswap/BiswapFactory.sol:BiswapFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 2211,
        "contract": "contracts/test/biswap/BiswapFactory.sol:BiswapFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}