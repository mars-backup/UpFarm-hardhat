{
  "address": "0x99B223Cd1f1E14B7EabD46Bc7a4a21536beDC958",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vestingMaster",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_want",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strat",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        }
      ],
      "name": "Add",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_core",
          "type": "address"
        }
      ],
      "name": "CoreUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        }
      ],
      "name": "Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vesting",
          "type": "address"
        }
      ],
      "name": "SetVestingMaster",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "want",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesTotal",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UpdateTokenPerBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MASTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_want",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_strat",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNoHarvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "want",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "strat",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "core_",
          "type": "address"
        }
      ],
      "name": "setCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_master",
          "type": "address"
        }
      ],
      "name": "setVestingMaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "stakedWantTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateTokenPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingMaster",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdca2416b6800218cab8c2097ec1a34e28a6138aed5813638e22fc325159be93e",
  "receipt": {
    "to": null,
    "from": "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
    "contractAddress": "0x1Bc3AFDAFa404164962d345F26c8d84A1c9B72b2",
    "transactionIndex": 1,
    "gasUsed": "3019608",
    "logsBloom": "0x
    "blockHash": "0x1d75dbb7a8093f652a1056452675a4fb30f90df1f5e587120df4e7e679dd5585",
    "transactionHash": "0xdca2416b6800218cab8c2097ec1a34e28a6138aed5813638e22fc325159be93e",
    "logs": [],
    "blockNumber": 16802698,
    "cumulativeGasUsed": "3173407",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x40fc3759Ccc4E466650891a91F34Bdd6129094D6",
    "0x4C2e91C8eD9eed3aFa2cC5ecBb26ae752c83dA59",
    "0xA2B68e6d4ba6E9E2fC5610E6Ab6A3f849e8FA3F1",
    "200000000000000000",
    0
  ],
  "solcInputHash": "2f541bcd60d5e1a907d6462ac5275e07",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingMaster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strat\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"}],\"name\":\"SetVestingMaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesTotal\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateTokenPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MASTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_strat\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNoHarvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"core_\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"setVestingMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakedWantTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateTokenPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UpFarm.sol\":\"UpFarm\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/UpFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IVestingMaster.sol\\\";\\nimport \\\"./refs/CoreRef.sol\\\";\\n\\ninterface IStrategy {\\n\\n    function deposit( uint256 _wantAmt)\\n        external\\n        returns (uint256);\\n\\n    function withdraw( uint256 _wantAmt)\\n        external\\n        returns (uint256);\\n\\n    function wantAddress() external view returns (address);\\n    function wantLockedTotal() external view returns (uint256);\\n    function sharesTotal() external view returns (uint256);\\n}\\n\\ninterface IUPToken {\\n    function mint(address _to, uint256 _amount) external;\\n}\\n\\ncontract UpFarm is CoreRef, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 shares;\\n        uint256 rewardDebt;\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 want;\\n        uint256 allocPoint;\\n        uint256 lastRewardBlock;\\n        uint256 accTokenPerShare;\\n        address strat;\\n        bool locked;\\n    }\\n\\n    address public rewardToken;\\n    address public vestingMaster;\\n    uint256 public tokenPerBlock;\\n    uint256 public startBlock;\\n\\n    PoolInfo[] public poolInfo;\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    uint256 public totalAllocPoint = 0;\\n\\n    mapping(address => bool) public poolExistence;\\n\\n    uint256 private _accShareReward;\\n\\n    uint256 private _accHarvestedReward;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 shares, uint256 rewardDebt);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, uint256 shares, uint256 rewardDebt);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event UpdatePool(\\n        address want,\\n        uint256 accTokenPerShare,\\n        uint256 reward,\\n        uint256 sharesTotal\\n    );\\n    event UpdateTokenPerBlock(address indexed user,uint256 amount);\\n    event SetVestingMaster(address indexed user,address vesting);\\n    event Add( \\n        uint256 _allocPoint,\\n        address _want,\\n        address _strat,\\n        bool _locked\\n    );\\n\\n    event Set( \\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _locked\\n    );\\n\\n    modifier nonDuplicated(address _strat) {\\n        require(\\n            !poolExistence[_strat],\\n            \\\"UpFarm::nonDuplicated: Duplicated\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _core,\\n        address _rewardToken,\\n        address _vestingMaster,\\n        uint256 _tokenPerBlock,\\n        uint256 _startBlock\\n    ) public CoreRef(_core) {\\n        rewardToken = _rewardToken;\\n        vestingMaster = _vestingMaster;\\n        tokenPerBlock = _tokenPerBlock;\\n        startBlock = _startBlock;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _want,\\n        bool _withUpdate,\\n        address _strat,\\n        bool _locked\\n    ) external onlyGuardianOrGovernor nonDuplicated(_strat) {\\n        require(address(_want) == IStrategy(_strat).wantAddress(), \\\"UpFarm::add: Invalid want\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 lastRewardBlock =\\n            block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                want: _want,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accTokenPerShare: 0,\\n                strat: _strat,\\n                locked: _locked\\n            })\\n        );\\n        poolExistence[_strat] = true;\\n        emit Add(_allocPoint, address(_want), _strat, _locked);\\n    }\\n\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate,\\n        bool _locked\\n    ) external onlyGuardianOrGovernor {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].locked = _locked;\\n\\n        emit Set(_pid, _allocPoint, _locked);\\n    }\\n\\n    function getMultiplier(uint256 _from, uint256 _to) internal pure returns (uint256) {\\n        return _to.sub(_from);\\n    }\\n\\n    function pendingToken(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 sharesTotal = IStrategy(pool.strat).sharesTotal();\\n        if (block.number > pool.lastRewardBlock && sharesTotal != 0) {\\n            uint256 multiplier =\\n                getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 tokenReward =\\n                multiplier.mul(tokenPerBlock).mul(pool.allocPoint).div(\\n                    totalAllocPoint\\n                );\\n            accTokenPerShare = accTokenPerShare.add(\\n                tokenReward.mul(1e12).div(sharesTotal)\\n            );\\n        }\\n        return user.shares.mul(accTokenPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    function stakedWantTokens(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 sharesTotal = IStrategy(pool.strat).sharesTotal();\\n        uint256 wantLockedTotal = IStrategy(pool.strat).wantLockedTotal();\\n        if (sharesTotal == 0) {\\n            return 0;\\n        }\\n        uint256 amount = user.shares.mul(wantLockedTotal).div(sharesTotal);\\n        if (sharesTotal < wantLockedTotal && amount.mul(sharesTotal) < user.shares.mul(wantLockedTotal)) {\\n            amount = amount.add(1);\\n        }\\n        return amount;\\n    }\\n\\n    function massUpdatePools() public {\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 sharesTotal = IStrategy(pool.strat).sharesTotal();\\n        if (sharesTotal == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        if (multiplier == 0) {\\n            return;\\n        }\\n        uint256 reward =\\n            multiplier.mul(tokenPerBlock).mul(pool.allocPoint).div(\\n                totalAllocPoint\\n            );\\n        pool.accTokenPerShare = pool.accTokenPerShare.add(\\n            reward.mul(1e12).div(sharesTotal)\\n        );\\n        pool.lastRewardBlock = block.number;\\n        _accShareReward = _accShareReward.add(reward);\\n        emit UpdatePool(\\n            address(pool.want),\\n            pool.accTokenPerShare,\\n            reward,\\n            sharesTotal\\n        );\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _wantAmt) external nonReentrant {\\n        updatePool(_pid);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.shares > 0) {\\n            uint256 pending =\\n                user.shares.mul(pool.accTokenPerShare).div(1e12).sub(\\n                    user.rewardDebt\\n                );\\n            if (pending > 0) {\\n                uint256 locked;\\n                if (pool.locked && vestingMaster != address(0)) {\\n                    locked = pending\\n                        .div(IVestingMaster(vestingMaster).lockedPeriodAmount().add(1))\\n                        .mul(IVestingMaster(vestingMaster).lockedPeriodAmount());\\n                }\\n                safeTokenTransfer(msg.sender, pending.sub(locked));\\n                if (locked > 0) {\\n                    uint256 actualAmount = safeTokenTransfer(\\n                        vestingMaster,\\n                        locked\\n                    );\\n                    IVestingMaster(vestingMaster).lock(msg.sender, actualAmount);\\n                }\\n                _accHarvestedReward = _accHarvestedReward.add(pending);\\n            }\\n        }\\n        uint256 realAmount = _wantAmt;\\n        if (_wantAmt > 0) {\\n            uint256 beforeAmount = pool.want.balanceOf(address(this));\\n            pool.want.safeTransferFrom(\\n                address(msg.sender),\\n                address(this),\\n                _wantAmt\\n            );\\n            uint256 afterAmount = pool.want.balanceOf(address(this));\\n            realAmount = afterAmount.sub(beforeAmount);\\n            pool.want.safeIncreaseAllowance(pool.strat, realAmount);\\n            uint256 sharesAdded =\\n                IStrategy(pool.strat).deposit(realAmount);\\n            user.shares = user.shares.add(sharesAdded);\\n        }\\n        user.rewardDebt = user.shares.mul(pool.accTokenPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, realAmount, user.shares, user.rewardDebt);\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _wantAmt) public nonReentrant {\\n        updatePool(_pid);\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 wantLockedTotal = IStrategy(pool.strat).wantLockedTotal();\\n        uint256 sharesTotal = IStrategy(pool.strat).sharesTotal();\\n\\n        require(user.shares > 0, \\\"user.shares is 0\\\");\\n        require(sharesTotal > 0, \\\"sharesTotal is 0\\\");\\n\\n        uint256 pending =\\n            user.shares.mul(pool.accTokenPerShare).div(1e12).sub(\\n                user.rewardDebt\\n            );\\n        if (pending > 0) {\\n            uint256 locked;\\n            if (pool.locked && vestingMaster != address(0)) {\\n                locked = pending\\n                    .div(IVestingMaster(vestingMaster).lockedPeriodAmount().add(1))\\n                    .mul(IVestingMaster(vestingMaster).lockedPeriodAmount());\\n            }\\n            safeTokenTransfer(msg.sender, pending.sub(locked));\\n            if (locked > 0) {\\n                uint256 actualAmount = safeTokenTransfer(\\n                    vestingMaster,\\n                    locked\\n                );\\n                IVestingMaster(vestingMaster).lock(msg.sender, actualAmount);\\n            }\\n            _accHarvestedReward = _accHarvestedReward.add(pending);\\n        }\\n\\n        uint256 amount = user.shares.mul(wantLockedTotal).div(sharesTotal);\\n        if (sharesTotal < wantLockedTotal && amount.mul(sharesTotal) < user.shares.mul(wantLockedTotal)) {\\n            amount = amount.add(1);\\n        }\\n        if (_wantAmt > amount) {\\n            _wantAmt = amount;\\n        }\\n        if (_wantAmt > 0) {\\n            uint256 sharesRemoved =\\n                IStrategy(poolInfo[_pid].strat).withdraw(_wantAmt);\\n\\n            if (sharesRemoved > user.shares) {\\n                user.shares = 0;\\n            } else {\\n                user.shares = user.shares.sub(sharesRemoved);\\n            }\\n\\n            uint256 wantBal = IERC20(pool.want).balanceOf(address(this));\\n            if (wantBal < _wantAmt) {\\n                _wantAmt = wantBal;\\n            }\\n            pool.want.safeTransfer(address(msg.sender), _wantAmt);\\n        }\\n        user.rewardDebt = user.shares.mul(pool.accTokenPerShare).div(1e12);\\n        emit Withdraw(msg.sender, _pid, _wantAmt, user.shares, user.rewardDebt);\\n    }\\n\\n    function withdrawAll(uint256 _pid) external {\\n        withdraw(_pid, uint256(-1));\\n    }\\n\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 wantLockedTotal =\\n            IStrategy(pool.strat).wantLockedTotal();\\n        uint256 sharesTotal = IStrategy(pool.strat).sharesTotal();\\n        uint256 amount = user.shares.mul(wantLockedTotal).div(sharesTotal);\\n        if (sharesTotal < wantLockedTotal && amount.mul(sharesTotal) < user.shares.mul(wantLockedTotal)) {\\n            amount = amount.add(1);\\n        }\\n\\n        user.shares = 0;\\n        user.rewardDebt = 0;\\n\\n        IStrategy(pool.strat).withdraw(amount);\\n        uint256 wantBal = IERC20(pool.want).balanceOf(address(this));\\n        if (wantBal < amount) {\\n            amount = wantBal;\\n        }\\n        pool.want.safeTransfer(msg.sender, amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);        \\n    }\\n\\n    function safeTokenTransfer(address _to, uint256 _amount) internal returns (uint256) {\\n        uint256 balance = IERC20(rewardToken).balanceOf(address(this));\\n        if (_amount > balance) {\\n            _amount = balance;\\n        }\\n        IERC20(rewardToken).safeTransfer(_to, _amount);\\n        return _amount;\\n    }\\n\\n    function setVestingMaster(address _master) external onlyGovernor {\\n        vestingMaster = _master;\\n        emit SetVestingMaster(msg.sender, _master);\\n    }\\n\\n    function updateTokenPerBlock(uint256 _tokenPerBlock) external onlyGuardianOrGovernor {\\n        massUpdatePools();\\n        tokenPerBlock = _tokenPerBlock;\\n        emit UpdateTokenPerBlock(msg.sender, _tokenPerBlock);\\n    }\\n\\n    function inCaseTokensGetStuck(address _token, uint256 _amount) external onlyGovernor {\\n        require(_token != rewardToken, \\\"!safe\\\");\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    function getNoHarvestReward() public view returns (uint256) {\\n        return _accShareReward.sub(_accHarvestedReward);\\n    }\\n}\\n\",\"keccak256\":\"0xbf8406ef69981bcaf5986bcf5ec7f6a143fd22f83d84877e8659553f05376d0a\",\"license\":\"MIT\"},\"contracts/interfaces/IVestingMaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\npragma solidity 0.6.12;\\n\\ninterface IVestingMaster{\\n    function lock(address account, uint256 amount) external;\\n\\n    function claim() external;\\n\\n    function getVestingAmount() external view returns (uint256 lockedAmount, uint256 claimableAmount);\\n\\n    function lockedPeriodAmount() external view returns (uint256 periodAmount);\\n\\n    function vestingToken() external view returns (IERC20);\\n\\n    function period() external view returns (uint256);\\n\\n    function totalLockedRewards() external view returns (uint256);\\n}\",\"keccak256\":\"0x7755df88c51c0860b91a8dea5dbcb4f7ec676491ecbe23a2d9777b11d50fc9be\",\"license\":\"MIT\"},\"contracts/refs/CoreRef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ninterface ICore {\\n    function isGovernor(address _address) external view returns (bool);\\n\\n    function isGuardian(address _address) external view returns (bool);\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\\n\\nabstract contract CoreRef is Pausable {\\n\\n    event CoreUpdate(address indexed _core);\\n\\n    ICore private _core;\\n\\n    bytes32 public constant MASTER_ROLE = keccak256(\\\"MASTER_ROLE\\\");\\n\\n    constructor(address core_) public {\\n        _core = ICore(core_);\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender),\\n            \\\"CoreRef::onlyGovernor: Caller is not a governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(\\n            _core.isGuardian(msg.sender),\\n            \\\"CoreRef::onlyGuardian: Caller is not a guardian\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardianOrGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender),\\n            \\\"CoreRef::onlyGuardianOrGovernor: Caller is not a guardian or governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMaster() {\\n        require(\\n            _core.hasRole(MASTER_ROLE, msg.sender),\\n            \\\"CoreRef::onlyMaster: Caller is not a master\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        require(\\n            _core.hasRole(role, msg.sender),\\n            \\\"CoreRef::onlyRole: Not permit\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        require(\\n            _core.hasRole(role, address(0)) || _core.hasRole(role, msg.sender),\\n            \\\"CoreRef::onlyRoleOrOpenRole: Not permit\\\"\\n        );\\n        _;\\n    }\\n\\n    function setCore(address core_) external onlyGovernor {\\n        _core = ICore(core_);\\n        emit CoreUpdate(core_);\\n    }\\n\\n    function pause() public onlyGuardianOrGovernor {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyGovernor {\\n        _unpause();\\n    }\\n\\n    function core() public view returns (ICore) {\\n        return _core;\\n    }\\n\\n}\",\"keccak256\":\"0x347c55d9c381f639b545aca006912b67dde6c675080086b7cd33dc205ebcc3d5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060085534801561001557600080fd5b506040516134ad3803806134ad833981810160405260a081101561003857600080fd5b508051602082015160408301516060840151608090940151600080546001600160a01b03958616610100026001600160a81b031990911617905560018055600280549385166001600160a01b0319948516179055600380549490921693909216929092179091556004919091556005556133f6806100b76000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80637b84daec11610104578063c2ca2803116100a2578063e2bbb15811610071578063e2bbb158146104df578063f2f4eb2614610502578063f7c618c11461050a578063f98d19d814610512576101cf565b8063c2ca28031461045f578063c6d758cb14610485578063cbd258b5146104b1578063dc224863146104d7576101cf565b80638cb8c8f0116100de5780638cb8c8f0146103ad57806393f1a40b146103e0578063958e2d3114610425578063ae0e597a14610442576101cf565b80637b84daec14610353578063800096301461037f5780638456cb59146103a5576101cf565b806348cd4cb1116101715780635312ea8e1161014b5780635312ea8e1461030a5780635aca5e93146103275780635c975abb1461032f578063630b5ba11461034b576101cf565b806348cd4cb1146102b957806348e43af4146102c157806351eb05a6146102ed576101cf565b80631eccdf07116101ad5780631eccdf07146102605780633f4ba83a146102845780634198709a1461028e578063441a3e7014610296576101cf565b8063081e3eda146101d45780631526fe27146101ee57806317caf6f114610258575b600080fd5b6101dc610556565b60408051918252519081900360200190f35b61020b6004803603602081101561020457600080fd5b503561055c565b60405180876001600160a01b03168152602001868152602001858152602001848152602001836001600160a01b031681526020018215158152602001965050505050505060405180910390f35b6101dc6105c5565b6102686105cb565b604080516001600160a01b039092168252519081900360200190f35b61028c6105da565b005b6101dc6106b3565b61028c600480360360408110156102ac57600080fd5b50803590602001356106b9565b6101dc610dfc565b6101dc600480360360408110156102d757600080fd5b50803590602001356001600160a01b0316610e02565b61028c6004803603602081101561030357600080fd5b5035610f7a565b61028c6004803603602081101561032057600080fd5b503561111e565b6101dc6114b4565b6103376114d2565b604080519115158252519081900360200190f35b61028c6114db565b6101dc6004803603604081101561036957600080fd5b50803590602001356001600160a01b03166114f9565b61028c6004803603602081101561039557600080fd5b50356001600160a01b03166116b7565b61028c6117ed565b61028c600480360360808110156103c357600080fd5b50803590602081013590604081013515159060600135151561195f565b61040c600480360360408110156103f657600080fd5b50803590602001356001600160a01b0316611beb565b6040805192835260208301919091528051918290030190f35b61028c6004803603602081101561043b57600080fd5b5035611c0f565b61028c6004803603602081101561045857600080fd5b5035611c39565b61028c6004803603602081101561047557600080fd5b50356001600160a01b0316611de9565b61028c6004803603604081101561049b57600080fd5b506001600160a01b038135169060200135611f27565b610337600480360360208110156104c757600080fd5b50356001600160a01b0316612071565b6101dc612086565b61028c600480360360408110156104f557600080fd5b50803590602001356120aa565b61026861257a565b61026861258e565b61028c600480360360a081101561052857600080fd5b508035906001600160a01b03602082013581169160408101351515916060820135169060800135151561259d565b60065490565b6006818154811061056957fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0393841695509193909290919081169074010000000000000000000000000000000000000000900460ff1686565b60085481565b6003546001600160a01b031681565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b15801561064257600080fd5b505afa158015610656573d6000803e3d6000fd5b505050506040513d602081101561066c57600080fd5b50516106a95760405162461bcd60e51b815260040180806020018281038252602f8152602001806132dc602f913960400191505060405180910390fd5b6106b1612a0f565b565b60045481565b60026001541415610711576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260015561071f82610f7a565b60006006838154811061072e57fe5b60009182526020808320868452600782526040808520338652835280852060059490940290910160048181015483517f42da4eb300000000000000000000000000000000000000000000000000000000815293519297509495946001600160a01b0316936342da4eb39380830193919290829003018186803b1580156107b357600080fd5b505afa1580156107c7573d6000803e3d6000fd5b505050506040513d60208110156107dd57600080fd5b5051600480850154604080517f44a3955e00000000000000000000000000000000000000000000000000000000815290519394506000936001600160a01b03909216926344a3955e928282019260209290829003018186803b15801561084257600080fd5b505afa158015610856573d6000803e3d6000fd5b505050506040513d602081101561086c57600080fd5b505183549091506108c4576040805162461bcd60e51b815260206004820152601060248201527f757365722e736861726573206973203000000000000000000000000000000000604482015290519081900360640190fd5b60008111610919576040805162461bcd60e51b815260206004820152601060248201527f736861726573546f74616c206973203000000000000000000000000000000000604482015290519081900360640190fd5b6000610953846001015461094d64e8d4a5100061094789600301548960000154612ad690919063ffffffff16565b90612b36565b90612b9d565b90508015610b9d57600485015460009074010000000000000000000000000000000000000000900460ff16801561099457506003546001600160a01b031615155b15610acf57600354604080517f05e97bc60000000000000000000000000000000000000000000000000000000081529051610acc926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b1580156109f857600080fd5b505afa158015610a0c573d6000803e3d6000fd5b505050506040513d6020811015610a2257600080fd5b5051600354604080517f05e97bc60000000000000000000000000000000000000000000000000000000081529051610ac692610abf926001926001600160a01b03909216916305e97bc691600480820192602092909190829003018186803b158015610a8d57600080fd5b505afa158015610aa1573d6000803e3d6000fd5b505050506040513d6020811015610ab757600080fd5b505190612bfa565b8590612b36565b90612ad6565b90505b610ae233610add8484612b9d565b612c54565b508015610b8b57600354600090610b02906001600160a01b031683612c54565b600354604080517f282d3fdf0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290519293506001600160a01b039091169163282d3fdf9160448082019260009290919082900301818387803b158015610b7157600080fd5b505af1158015610b85573d6000803e3d6000fd5b50505050505b600b54610b989083612bfa565b600b55505b8354600090610bb29084906109479087612ad6565b90508383108015610bd657508454610bca9085612ad6565b610bd48285612ad6565b105b15610be957610be6816001612bfa565b90505b80871115610bf5578096505b8615610d8457600060068981548110610c0a57fe5b600091825260208083206004600590930201820154604080517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081529384018d9052516001600160a01b0390911693632e1a7d4d936024808201949392918390030190829087803b158015610c7e57600080fd5b505af1158015610c92573d6000803e3d6000fd5b505050506040513d6020811015610ca857600080fd5b50518654909150811115610cbf5760008655610cce565b8554610ccb9082612b9d565b86555b8654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d6020811015610d5b57600080fd5b5051905088811015610d6b578098505b8754610d81906001600160a01b0316338b612d16565b50505b60038601548554610d9f9164e8d4a510009161094791612ad6565b600186018190558554604080518a81526020810192909252818101929092529051899133917fe08737ac48a1dab4b1a46c7dc9398bd5bfc6d7ad6fabb7cd8caa254de14def359181900360600190a3505060018055505050505050565b60055481565b60008060068481548110610e1257fe5b600091825260208083208784526007825260408085206001600160a01b038981168752908452818620600595909502909201600381015460048083015484517f44a3955e000000000000000000000000000000000000000000000000000000008152945193995096979196919591909416936344a3955e93808201939190829003018186803b158015610ea457600080fd5b505afa158015610eb8573d6000803e3d6000fd5b505050506040513d6020811015610ece57600080fd5b5051600285015490915043118015610ee557508015155b15610f45576000610efa856002015443612d9b565b90506000610f216008546109478860010154610ac660045487612ad690919063ffffffff16565b9050610f40610f39846109478464e8d4a51000612ad6565b8590612bfa565b935050505b610f6d836001015461094d64e8d4a51000610947868860000154612ad690919063ffffffff16565b9450505050505b92915050565b600060068281548110610f8957fe5b9060005260206000209060050201905080600201544311610faa575061111b565b60008160040160009054906101000a90046001600160a01b03166001600160a01b03166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ffc57600080fd5b505afa158015611010573d6000803e3d6000fd5b505050506040513d602081101561102657600080fd5b505190508061103c57504360029091015561111b565b600061104c836002015443612d9b565b90508061105b5750505061111b565b60006110806008546109478660010154610ac660045487612ad690919063ffffffff16565b90506110a3611098846109478464e8d4a51000612ad6565b600386015490612bfa565b6003850155436002850155600a546110bb9082612bfa565b600a5583546003850154604080516001600160a01b039093168352602083019190915281810183905260608201859052517f50a1a2d4fcb1c08863a0b14fcc7d9d728e2b21d8d7588b9cfa3991efe8112ee79181900360800190a1505050505b50565b60026001541415611176576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260018190555060006006828154811061118d57fe5b60009182526020808320858452600782526040808520338652835280852060059490940290910160048181015483517f42da4eb300000000000000000000000000000000000000000000000000000000815293519297509495946001600160a01b0316936342da4eb39380830193919290829003018186803b15801561121257600080fd5b505afa158015611226573d6000803e3d6000fd5b505050506040513d602081101561123c57600080fd5b5051600480850154604080517f44a3955e00000000000000000000000000000000000000000000000000000000815290519394506000936001600160a01b03909216926344a3955e928282019260209290829003018186803b1580156112a157600080fd5b505afa1580156112b5573d6000803e3d6000fd5b505050506040513d60208110156112cb57600080fd5b505183549091506000906112e59083906109479086612ad6565b90508282108015611309575083546112fd9084612ad6565b6113078284612ad6565b105b1561131c57611319816001612bfa565b90505b600080855560018501819055600480870154604080517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152928301859052516001600160a01b0390911692632e1a7d4d92602480820193602093909283900390910190829087803b15801561139157600080fd5b505af11580156113a5573d6000803e3d6000fd5b505050506040513d60208110156113bb57600080fd5b50508454604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561142057600080fd5b505afa158015611434573d6000803e3d6000fd5b505050506040513d602081101561144a57600080fd5b505190508181101561145a578091505b8554611470906001600160a01b03163384612d16565b604080518381529051889133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a35050600180555050505050565b60006114cd600b54600a54612b9d90919063ffffffff16565b905090565b60005460ff1690565b60005b60065481101561111b576114f181610f7a565b6001016114de565b6000806006848154811061150957fe5b600091825260208083208784526007825260408085206001600160a01b03808a168752908452818620600460059096029093018581015483517f44a3955e000000000000000000000000000000000000000000000000000000008152935191985093969593909116936344a3955e9383810193919291829003018186803b15801561159357600080fd5b505afa1580156115a7573d6000803e3d6000fd5b505050506040513d60208110156115bd57600080fd5b5051600480850154604080517f42da4eb300000000000000000000000000000000000000000000000000000000815290519394506000936001600160a01b03909216926342da4eb3928282019260209290829003018186803b15801561162257600080fd5b505afa158015611636573d6000803e3d6000fd5b505050506040513d602081101561164c57600080fd5b5051905081611662576000945050505050610f74565b82546000906116779084906109479085612ad6565b9050818310801561169b5750835461168f9083612ad6565b6116998285612ad6565b105b15610f6d576116ab816001612bfa565b98975050505050505050565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b15801561171f57600080fd5b505afa158015611733573d6000803e3d6000fd5b505050506040513d602081101561174957600080fd5b50516117865760405162461bcd60e51b815260040180806020018281038252602f8152602001806132dc602f913960400191505060405180910390fd5b600080547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03841690810291909117825560405190917fad9400e618eb1344fde53db22397a1b82c765527ecbba3a5c86bcac15090828b91a250565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b15801561185557600080fd5b505afa158015611869573d6000803e3d6000fd5b505050506040513d602081101561187f57600080fd5b50518061191c5750600054604080517f0c68ba2100000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b031691630c68ba2191602480820192602092909190829003018186803b1580156118ef57600080fd5b505afa158015611903573d6000803e3d6000fd5b505050506040513d602081101561191957600080fd5b50515b6119575760405162461bcd60e51b81526004018080602001828103825260458152602001806133526045913960600191505060405180910390fd5b6106b1612da7565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b1580156119c757600080fd5b505afa1580156119db573d6000803e3d6000fd5b505050506040513d60208110156119f157600080fd5b505180611a8e5750600054604080517f0c68ba2100000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b031691630c68ba2191602480820192602092909190829003018186803b158015611a6157600080fd5b505afa158015611a75573d6000803e3d6000fd5b505050506040513d6020811015611a8b57600080fd5b50515b611ac95760405162461bcd60e51b81526004018080602001828103825260458152602001806133526045913960600191505060405180910390fd5b8115611ad757611ad76114db565b611b1483611b0e60068781548110611aeb57fe5b906000526020600020906005020160010154600854612b9d90919063ffffffff16565b90612bfa565b6008819055508260068581548110611b2857fe5b9060005260206000209060050201600101819055508060068581548110611b4b57fe5b6000918252602091829020600460059092020101805492151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909316929092179091556040805186815291820185905282151582820152517fc66cec52f6fc7c7c09b5f02578bd330a548d6b039f8ba5b5703204565bdb335b9181900360600190a150505050565b60076020908152600092835260408084209091529082529020805460019091015482565b61111b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6106b9565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b158015611ca157600080fd5b505afa158015611cb5573d6000803e3d6000fd5b505050506040513d6020811015611ccb57600080fd5b505180611d685750600054604080517f0c68ba2100000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b031691630c68ba2191602480820192602092909190829003018186803b158015611d3b57600080fd5b505afa158015611d4f573d6000803e3d6000fd5b505050506040513d6020811015611d6557600080fd5b50515b611da35760405162461bcd60e51b81526004018080602001828103825260458152602001806133526045913960600191505060405180910390fd5b611dab6114db565b600481905560408051828152905133917fc046b9c039c9ffb1fdabb0cfe01be65c43719afd0eaf5328532959a8d23e06a9919081900360200190a250565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b158015611e5157600080fd5b505afa158015611e65573d6000803e3d6000fd5b505050506040513d6020811015611e7b57600080fd5b5051611eb85760405162461bcd60e51b815260040180806020018281038252602f8152602001806132dc602f913960400191505060405180910390fd5b600380546001600160a01b0383167fffffffffffffffffffffffff00000000000000000000000000000000000000009091168117909155604080519182525133917f919b567067561e1cf00aa740f537687f1818f5089d37c8c6af13bb76caa7b9fb919081900360200190a250565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b158015611f8f57600080fd5b505afa158015611fa3573d6000803e3d6000fd5b505050506040513d6020811015611fb957600080fd5b5051611ff65760405162461bcd60e51b815260040180806020018281038252602f8152602001806132dc602f913960400191505060405180910390fd5b6002546001600160a01b0383811691161415612059576040805162461bcd60e51b815260206004820152600560248201527f2173616665000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61206d6001600160a01b0383163383612d16565b5050565b60096020526000908152604090205460ff1681565b7f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c81565b60026001541415612102576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260015561211082610f7a565b60006006838154811061211f57fe5b600091825260208083208684526007825260408085203386529092529220805460059092029092019250156122ef57600061217c826001015461094d64e8d4a5100061094787600301548760000154612ad690919063ffffffff16565b905080156122ed57600483015460009074010000000000000000000000000000000000000000900460ff1680156121bd57506003546001600160a01b031615155b1561222457600354604080517f05e97bc60000000000000000000000000000000000000000000000000000000081529051612221926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b1580156109f857600080fd5b90505b61223233610add8484612b9d565b5080156122db57600354600090612252906001600160a01b031683612c54565b600354604080517f282d3fdf0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290519293506001600160a01b039091169163282d3fdf9160448082019260009290919082900301818387803b1580156122c157600080fd5b505af11580156122d5573d6000803e3d6000fd5b50505050505b600b546122e89083612bfa565b600b55505b505b828015612505578254604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561235957600080fd5b505afa15801561236d573d6000803e3d6000fd5b505050506040513d602081101561238357600080fd5b5051845490915061239f906001600160a01b0316333088612e55565b8354604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561240257600080fd5b505afa158015612416573d6000803e3d6000fd5b505050506040513d602081101561242c57600080fd5b5051905061243a8183612b9d565b6004860154865491945061245b916001600160a01b03908116911685612ee3565b600480860154604080517fb6b55f25000000000000000000000000000000000000000000000000000000008152928301869052516000926001600160a01b039092169163b6b55f2591602480830192602092919082900301818787803b1580156124c457600080fd5b505af11580156124d8573d6000803e3d6000fd5b505050506040513d60208110156124ee57600080fd5b505185549091506124ff9082612bfa565b85555050505b600383015482546125209164e8d4a510009161094791612ad6565b600183018190558254604080518481526020810192909252818101929092529051869133917f7162984403f6c73c8639375d45a9187dfd04602231bd8e587c415718b5f7e5f99181900360600190a3505060018055505050565b60005461010090046001600160a01b031690565b6002546001600160a01b031681565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b15801561260557600080fd5b505afa158015612619573d6000803e3d6000fd5b505050506040513d602081101561262f57600080fd5b5051806126cc5750600054604080517f0c68ba2100000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b031691630c68ba2191602480820192602092909190829003018186803b15801561269f57600080fd5b505afa1580156126b3573d6000803e3d6000fd5b505050506040513d60208110156126c957600080fd5b50515b6127075760405162461bcd60e51b81526004018080602001828103825260458152602001806133526045913960600191505060405180910390fd5b6001600160a01b038216600090815260096020526040902054829060ff16156127615760405162461bcd60e51b81526004018080602001828103825260218152602001806132bb6021913960400191505060405180910390fd5b826001600160a01b031663e7a036796040518163ffffffff1660e01b815260040160206040518083038186803b15801561279a57600080fd5b505afa1580156127ae573d6000803e3d6000fd5b505050506040513d60208110156127c457600080fd5b50516001600160a01b03868116911614612825576040805162461bcd60e51b815260206004820152601960248201527f55704661726d3a3a6164643a20496e76616c69642077616e7400000000000000604482015290519081900360640190fd5b8315612833576128336114db565b6000600554431161284657600554612848565b435b6008549091506128589088612bfa565b60088190555060066040518060c00160405280886001600160a01b0316815260200189815260200183815260200160008152602001866001600160a01b03168152602001851515815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160040160146101000a81548160ff0219169083151502179055505050600160096000866001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507fa0a4b88a8d4fcb32394def5d2509ad6b47d469e651293d2b8a99e1d64ce5ac4b8787868660405180858152602001846001600160a01b03168152602001836001600160a01b03168152602001821515815260200194505050505060405180910390a150505050505050565b612a176114d2565b612a68576040805162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612ab9612fca565b604080516001600160a01b039092168252519081900360200190a1565b600082612ae557506000610f74565b82820282848281612af257fe5b0414612b2f5760405162461bcd60e51b81526004018080602001828103825260218152602001806133316021913960400191505060405180910390fd5b9392505050565b6000808211612b8c576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612b9557fe5b049392505050565b600082821115612bf4576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015612b2f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600254604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015612cbd57600080fd5b505afa158015612cd1573d6000803e3d6000fd5b505050506040513d6020811015612ce757600080fd5b5051905080831115612cf7578092505b600254612d0e906001600160a01b03168585612d16565b509092915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052612d96908490612fce565b505050565b6000612b2f8284612b9d565b612daf6114d2565b15612e01576040805162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612ab9612fca565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052612edd908590612fce565b50505050565b6000612f4782856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015610a8d57600080fd5b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052909150612edd908590612fce565b3390565b6060613023826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661307f9092919063ffffffff16565b805190915015612d965780806020019051602081101561304257600080fd5b5051612d965760405162461bcd60e51b815260040180806020018281038252602a815260200180613397602a913960400191505060405180910390fd5b606061308e8484600085613096565b949350505050565b6060824710156130d75760405162461bcd60e51b815260040180806020018281038252602681526020018061330b6026913960400191505060405180910390fd5b6130e085613210565b613131576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061318e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613151565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146131f0576040519150601f19603f3d011682016040523d82523d6000602084013e6131f5565b606091505b5091509150613205828286613216565b979650505050505050565b3b151590565b60608315613225575081612b2f565b8251156132355782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561327f578181015183820152602001613267565b50505050905090810190601f1680156132ac5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe55704661726d3a3a6e6f6e4475706c6963617465643a204475706c696361746564436f72655265663a3a6f6e6c79476f7665726e6f723a2043616c6c6572206973206e6f74206120676f7665726e6f72416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f72655265663a3a6f6e6c79477561726469616e4f72476f7665726e6f723a2043616c6c6572206973206e6f74206120677561726469616e206f7220676f7665726e6f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122067f4f9b97dddb051b763101e42eb6961c931fafb513c08cb0f4cfbf21b2c4d8f64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80637b84daec11610104578063c2ca2803116100a2578063e2bbb15811610071578063e2bbb158146104df578063f2f4eb2614610502578063f7c618c11461050a578063f98d19d814610512576101cf565b8063c2ca28031461045f578063c6d758cb14610485578063cbd258b5146104b1578063dc224863146104d7576101cf565b80638cb8c8f0116100de5780638cb8c8f0146103ad57806393f1a40b146103e0578063958e2d3114610425578063ae0e597a14610442576101cf565b80637b84daec14610353578063800096301461037f5780638456cb59146103a5576101cf565b806348cd4cb1116101715780635312ea8e1161014b5780635312ea8e1461030a5780635aca5e93146103275780635c975abb1461032f578063630b5ba11461034b576101cf565b806348cd4cb1146102b957806348e43af4146102c157806351eb05a6146102ed576101cf565b80631eccdf07116101ad5780631eccdf07146102605780633f4ba83a146102845780634198709a1461028e578063441a3e7014610296576101cf565b8063081e3eda146101d45780631526fe27146101ee57806317caf6f114610258575b600080fd5b6101dc610556565b60408051918252519081900360200190f35b61020b6004803603602081101561020457600080fd5b503561055c565b60405180876001600160a01b03168152602001868152602001858152602001848152602001836001600160a01b031681526020018215158152602001965050505050505060405180910390f35b6101dc6105c5565b6102686105cb565b604080516001600160a01b039092168252519081900360200190f35b61028c6105da565b005b6101dc6106b3565b61028c600480360360408110156102ac57600080fd5b50803590602001356106b9565b6101dc610dfc565b6101dc600480360360408110156102d757600080fd5b50803590602001356001600160a01b0316610e02565b61028c6004803603602081101561030357600080fd5b5035610f7a565b61028c6004803603602081101561032057600080fd5b503561111e565b6101dc6114b4565b6103376114d2565b604080519115158252519081900360200190f35b61028c6114db565b6101dc6004803603604081101561036957600080fd5b50803590602001356001600160a01b03166114f9565b61028c6004803603602081101561039557600080fd5b50356001600160a01b03166116b7565b61028c6117ed565b61028c600480360360808110156103c357600080fd5b50803590602081013590604081013515159060600135151561195f565b61040c600480360360408110156103f657600080fd5b50803590602001356001600160a01b0316611beb565b6040805192835260208301919091528051918290030190f35b61028c6004803603602081101561043b57600080fd5b5035611c0f565b61028c6004803603602081101561045857600080fd5b5035611c39565b61028c6004803603602081101561047557600080fd5b50356001600160a01b0316611de9565b61028c6004803603604081101561049b57600080fd5b506001600160a01b038135169060200135611f27565b610337600480360360208110156104c757600080fd5b50356001600160a01b0316612071565b6101dc612086565b61028c600480360360408110156104f557600080fd5b50803590602001356120aa565b61026861257a565b61026861258e565b61028c600480360360a081101561052857600080fd5b508035906001600160a01b03602082013581169160408101351515916060820135169060800135151561259d565b60065490565b6006818154811061056957fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0393841695509193909290919081169074010000000000000000000000000000000000000000900460ff1686565b60085481565b6003546001600160a01b031681565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b15801561064257600080fd5b505afa158015610656573d6000803e3d6000fd5b505050506040513d602081101561066c57600080fd5b50516106a95760405162461bcd60e51b815260040180806020018281038252602f8152602001806132dc602f913960400191505060405180910390fd5b6106b1612a0f565b565b60045481565b60026001541415610711576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260015561071f82610f7a565b60006006838154811061072e57fe5b60009182526020808320868452600782526040808520338652835280852060059490940290910160048181015483517f42da4eb300000000000000000000000000000000000000000000000000000000815293519297509495946001600160a01b0316936342da4eb39380830193919290829003018186803b1580156107b357600080fd5b505afa1580156107c7573d6000803e3d6000fd5b505050506040513d60208110156107dd57600080fd5b5051600480850154604080517f44a3955e00000000000000000000000000000000000000000000000000000000815290519394506000936001600160a01b03909216926344a3955e928282019260209290829003018186803b15801561084257600080fd5b505afa158015610856573d6000803e3d6000fd5b505050506040513d602081101561086c57600080fd5b505183549091506108c4576040805162461bcd60e51b815260206004820152601060248201527f757365722e736861726573206973203000000000000000000000000000000000604482015290519081900360640190fd5b60008111610919576040805162461bcd60e51b815260206004820152601060248201527f736861726573546f74616c206973203000000000000000000000000000000000604482015290519081900360640190fd5b6000610953846001015461094d64e8d4a5100061094789600301548960000154612ad690919063ffffffff16565b90612b36565b90612b9d565b90508015610b9d57600485015460009074010000000000000000000000000000000000000000900460ff16801561099457506003546001600160a01b031615155b15610acf57600354604080517f05e97bc60000000000000000000000000000000000000000000000000000000081529051610acc926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b1580156109f857600080fd5b505afa158015610a0c573d6000803e3d6000fd5b505050506040513d6020811015610a2257600080fd5b5051600354604080517f05e97bc60000000000000000000000000000000000000000000000000000000081529051610ac692610abf926001926001600160a01b03909216916305e97bc691600480820192602092909190829003018186803b158015610a8d57600080fd5b505afa158015610aa1573d6000803e3d6000fd5b505050506040513d6020811015610ab757600080fd5b505190612bfa565b8590612b36565b90612ad6565b90505b610ae233610add8484612b9d565b612c54565b508015610b8b57600354600090610b02906001600160a01b031683612c54565b600354604080517f282d3fdf0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290519293506001600160a01b039091169163282d3fdf9160448082019260009290919082900301818387803b158015610b7157600080fd5b505af1158015610b85573d6000803e3d6000fd5b50505050505b600b54610b989083612bfa565b600b55505b8354600090610bb29084906109479087612ad6565b90508383108015610bd657508454610bca9085612ad6565b610bd48285612ad6565b105b15610be957610be6816001612bfa565b90505b80871115610bf5578096505b8615610d8457600060068981548110610c0a57fe5b600091825260208083206004600590930201820154604080517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081529384018d9052516001600160a01b0390911693632e1a7d4d936024808201949392918390030190829087803b158015610c7e57600080fd5b505af1158015610c92573d6000803e3d6000fd5b505050506040513d6020811015610ca857600080fd5b50518654909150811115610cbf5760008655610cce565b8554610ccb9082612b9d565b86555b8654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d6020811015610d5b57600080fd5b5051905088811015610d6b578098505b8754610d81906001600160a01b0316338b612d16565b50505b60038601548554610d9f9164e8d4a510009161094791612ad6565b600186018190558554604080518a81526020810192909252818101929092529051899133917fe08737ac48a1dab4b1a46c7dc9398bd5bfc6d7ad6fabb7cd8caa254de14def359181900360600190a3505060018055505050505050565b60055481565b60008060068481548110610e1257fe5b600091825260208083208784526007825260408085206001600160a01b038981168752908452818620600595909502909201600381015460048083015484517f44a3955e000000000000000000000000000000000000000000000000000000008152945193995096979196919591909416936344a3955e93808201939190829003018186803b158015610ea457600080fd5b505afa158015610eb8573d6000803e3d6000fd5b505050506040513d6020811015610ece57600080fd5b5051600285015490915043118015610ee557508015155b15610f45576000610efa856002015443612d9b565b90506000610f216008546109478860010154610ac660045487612ad690919063ffffffff16565b9050610f40610f39846109478464e8d4a51000612ad6565b8590612bfa565b935050505b610f6d836001015461094d64e8d4a51000610947868860000154612ad690919063ffffffff16565b9450505050505b92915050565b600060068281548110610f8957fe5b9060005260206000209060050201905080600201544311610faa575061111b565b60008160040160009054906101000a90046001600160a01b03166001600160a01b03166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ffc57600080fd5b505afa158015611010573d6000803e3d6000fd5b505050506040513d602081101561102657600080fd5b505190508061103c57504360029091015561111b565b600061104c836002015443612d9b565b90508061105b5750505061111b565b60006110806008546109478660010154610ac660045487612ad690919063ffffffff16565b90506110a3611098846109478464e8d4a51000612ad6565b600386015490612bfa565b6003850155436002850155600a546110bb9082612bfa565b600a5583546003850154604080516001600160a01b039093168352602083019190915281810183905260608201859052517f50a1a2d4fcb1c08863a0b14fcc7d9d728e2b21d8d7588b9cfa3991efe8112ee79181900360800190a1505050505b50565b60026001541415611176576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260018190555060006006828154811061118d57fe5b60009182526020808320858452600782526040808520338652835280852060059490940290910160048181015483517f42da4eb300000000000000000000000000000000000000000000000000000000815293519297509495946001600160a01b0316936342da4eb39380830193919290829003018186803b15801561121257600080fd5b505afa158015611226573d6000803e3d6000fd5b505050506040513d602081101561123c57600080fd5b5051600480850154604080517f44a3955e00000000000000000000000000000000000000000000000000000000815290519394506000936001600160a01b03909216926344a3955e928282019260209290829003018186803b1580156112a157600080fd5b505afa1580156112b5573d6000803e3d6000fd5b505050506040513d60208110156112cb57600080fd5b505183549091506000906112e59083906109479086612ad6565b90508282108015611309575083546112fd9084612ad6565b6113078284612ad6565b105b1561131c57611319816001612bfa565b90505b600080855560018501819055600480870154604080517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152928301859052516001600160a01b0390911692632e1a7d4d92602480820193602093909283900390910190829087803b15801561139157600080fd5b505af11580156113a5573d6000803e3d6000fd5b505050506040513d60208110156113bb57600080fd5b50508454604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561142057600080fd5b505afa158015611434573d6000803e3d6000fd5b505050506040513d602081101561144a57600080fd5b505190508181101561145a578091505b8554611470906001600160a01b03163384612d16565b604080518381529051889133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a35050600180555050505050565b60006114cd600b54600a54612b9d90919063ffffffff16565b905090565b60005460ff1690565b60005b60065481101561111b576114f181610f7a565b6001016114de565b6000806006848154811061150957fe5b600091825260208083208784526007825260408085206001600160a01b03808a168752908452818620600460059096029093018581015483517f44a3955e000000000000000000000000000000000000000000000000000000008152935191985093969593909116936344a3955e9383810193919291829003018186803b15801561159357600080fd5b505afa1580156115a7573d6000803e3d6000fd5b505050506040513d60208110156115bd57600080fd5b5051600480850154604080517f42da4eb300000000000000000000000000000000000000000000000000000000815290519394506000936001600160a01b03909216926342da4eb3928282019260209290829003018186803b15801561162257600080fd5b505afa158015611636573d6000803e3d6000fd5b505050506040513d602081101561164c57600080fd5b5051905081611662576000945050505050610f74565b82546000906116779084906109479085612ad6565b9050818310801561169b5750835461168f9083612ad6565b6116998285612ad6565b105b15610f6d576116ab816001612bfa565b98975050505050505050565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b15801561171f57600080fd5b505afa158015611733573d6000803e3d6000fd5b505050506040513d602081101561174957600080fd5b50516117865760405162461bcd60e51b815260040180806020018281038252602f8152602001806132dc602f913960400191505060405180910390fd5b600080547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03841690810291909117825560405190917fad9400e618eb1344fde53db22397a1b82c765527ecbba3a5c86bcac15090828b91a250565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b15801561185557600080fd5b505afa158015611869573d6000803e3d6000fd5b505050506040513d602081101561187f57600080fd5b50518061191c5750600054604080517f0c68ba2100000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b031691630c68ba2191602480820192602092909190829003018186803b1580156118ef57600080fd5b505afa158015611903573d6000803e3d6000fd5b505050506040513d602081101561191957600080fd5b50515b6119575760405162461bcd60e51b81526004018080602001828103825260458152602001806133526045913960600191505060405180910390fd5b6106b1612da7565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b1580156119c757600080fd5b505afa1580156119db573d6000803e3d6000fd5b505050506040513d60208110156119f157600080fd5b505180611a8e5750600054604080517f0c68ba2100000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b031691630c68ba2191602480820192602092909190829003018186803b158015611a6157600080fd5b505afa158015611a75573d6000803e3d6000fd5b505050506040513d6020811015611a8b57600080fd5b50515b611ac95760405162461bcd60e51b81526004018080602001828103825260458152602001806133526045913960600191505060405180910390fd5b8115611ad757611ad76114db565b611b1483611b0e60068781548110611aeb57fe5b906000526020600020906005020160010154600854612b9d90919063ffffffff16565b90612bfa565b6008819055508260068581548110611b2857fe5b9060005260206000209060050201600101819055508060068581548110611b4b57fe5b6000918252602091829020600460059092020101805492151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909316929092179091556040805186815291820185905282151582820152517fc66cec52f6fc7c7c09b5f02578bd330a548d6b039f8ba5b5703204565bdb335b9181900360600190a150505050565b60076020908152600092835260408084209091529082529020805460019091015482565b61111b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6106b9565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b158015611ca157600080fd5b505afa158015611cb5573d6000803e3d6000fd5b505050506040513d6020811015611ccb57600080fd5b505180611d685750600054604080517f0c68ba2100000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b031691630c68ba2191602480820192602092909190829003018186803b158015611d3b57600080fd5b505afa158015611d4f573d6000803e3d6000fd5b505050506040513d6020811015611d6557600080fd5b50515b611da35760405162461bcd60e51b81526004018080602001828103825260458152602001806133526045913960600191505060405180910390fd5b611dab6114db565b600481905560408051828152905133917fc046b9c039c9ffb1fdabb0cfe01be65c43719afd0eaf5328532959a8d23e06a9919081900360200190a250565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b158015611e5157600080fd5b505afa158015611e65573d6000803e3d6000fd5b505050506040513d6020811015611e7b57600080fd5b5051611eb85760405162461bcd60e51b815260040180806020018281038252602f8152602001806132dc602f913960400191505060405180910390fd5b600380546001600160a01b0383167fffffffffffffffffffffffff00000000000000000000000000000000000000009091168117909155604080519182525133917f919b567067561e1cf00aa740f537687f1818f5089d37c8c6af13bb76caa7b9fb919081900360200190a250565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b158015611f8f57600080fd5b505afa158015611fa3573d6000803e3d6000fd5b505050506040513d6020811015611fb957600080fd5b5051611ff65760405162461bcd60e51b815260040180806020018281038252602f8152602001806132dc602f913960400191505060405180910390fd5b6002546001600160a01b0383811691161415612059576040805162461bcd60e51b815260206004820152600560248201527f2173616665000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61206d6001600160a01b0383163383612d16565b5050565b60096020526000908152604090205460ff1681565b7f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c81565b60026001541415612102576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260015561211082610f7a565b60006006838154811061211f57fe5b600091825260208083208684526007825260408085203386529092529220805460059092029092019250156122ef57600061217c826001015461094d64e8d4a5100061094787600301548760000154612ad690919063ffffffff16565b905080156122ed57600483015460009074010000000000000000000000000000000000000000900460ff1680156121bd57506003546001600160a01b031615155b1561222457600354604080517f05e97bc60000000000000000000000000000000000000000000000000000000081529051612221926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b1580156109f857600080fd5b90505b61223233610add8484612b9d565b5080156122db57600354600090612252906001600160a01b031683612c54565b600354604080517f282d3fdf0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290519293506001600160a01b039091169163282d3fdf9160448082019260009290919082900301818387803b1580156122c157600080fd5b505af11580156122d5573d6000803e3d6000fd5b50505050505b600b546122e89083612bfa565b600b55505b505b828015612505578254604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561235957600080fd5b505afa15801561236d573d6000803e3d6000fd5b505050506040513d602081101561238357600080fd5b5051845490915061239f906001600160a01b0316333088612e55565b8354604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561240257600080fd5b505afa158015612416573d6000803e3d6000fd5b505050506040513d602081101561242c57600080fd5b5051905061243a8183612b9d565b6004860154865491945061245b916001600160a01b03908116911685612ee3565b600480860154604080517fb6b55f25000000000000000000000000000000000000000000000000000000008152928301869052516000926001600160a01b039092169163b6b55f2591602480830192602092919082900301818787803b1580156124c457600080fd5b505af11580156124d8573d6000803e3d6000fd5b505050506040513d60208110156124ee57600080fd5b505185549091506124ff9082612bfa565b85555050505b600383015482546125209164e8d4a510009161094791612ad6565b600183018190558254604080518481526020810192909252818101929092529051869133917f7162984403f6c73c8639375d45a9187dfd04602231bd8e587c415718b5f7e5f99181900360600190a3505060018055505050565b60005461010090046001600160a01b031690565b6002546001600160a01b031681565b600054604080517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b03169163e43581b891602480820192602092909190829003018186803b15801561260557600080fd5b505afa158015612619573d6000803e3d6000fd5b505050506040513d602081101561262f57600080fd5b5051806126cc5750600054604080517f0c68ba2100000000000000000000000000000000000000000000000000000000815233600482015290516101009092046001600160a01b031691630c68ba2191602480820192602092909190829003018186803b15801561269f57600080fd5b505afa1580156126b3573d6000803e3d6000fd5b505050506040513d60208110156126c957600080fd5b50515b6127075760405162461bcd60e51b81526004018080602001828103825260458152602001806133526045913960600191505060405180910390fd5b6001600160a01b038216600090815260096020526040902054829060ff16156127615760405162461bcd60e51b81526004018080602001828103825260218152602001806132bb6021913960400191505060405180910390fd5b826001600160a01b031663e7a036796040518163ffffffff1660e01b815260040160206040518083038186803b15801561279a57600080fd5b505afa1580156127ae573d6000803e3d6000fd5b505050506040513d60208110156127c457600080fd5b50516001600160a01b03868116911614612825576040805162461bcd60e51b815260206004820152601960248201527f55704661726d3a3a6164643a20496e76616c69642077616e7400000000000000604482015290519081900360640190fd5b8315612833576128336114db565b6000600554431161284657600554612848565b435b6008549091506128589088612bfa565b60088190555060066040518060c00160405280886001600160a01b0316815260200189815260200183815260200160008152602001866001600160a01b03168152602001851515815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160040160146101000a81548160ff0219169083151502179055505050600160096000866001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507fa0a4b88a8d4fcb32394def5d2509ad6b47d469e651293d2b8a99e1d64ce5ac4b8787868660405180858152602001846001600160a01b03168152602001836001600160a01b03168152602001821515815260200194505050505060405180910390a150505050505050565b612a176114d2565b612a68576040805162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612ab9612fca565b604080516001600160a01b039092168252519081900360200190a1565b600082612ae557506000610f74565b82820282848281612af257fe5b0414612b2f5760405162461bcd60e51b81526004018080602001828103825260218152602001806133316021913960400191505060405180910390fd5b9392505050565b6000808211612b8c576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612b9557fe5b049392505050565b600082821115612bf4576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015612b2f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600254604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015612cbd57600080fd5b505afa158015612cd1573d6000803e3d6000fd5b505050506040513d6020811015612ce757600080fd5b5051905080831115612cf7578092505b600254612d0e906001600160a01b03168585612d16565b509092915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052612d96908490612fce565b505050565b6000612b2f8284612b9d565b612daf6114d2565b15612e01576040805162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612ab9612fca565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052612edd908590612fce565b50505050565b6000612f4782856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015610a8d57600080fd5b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052909150612edd908590612fce565b3390565b6060613023826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661307f9092919063ffffffff16565b805190915015612d965780806020019051602081101561304257600080fd5b5051612d965760405162461bcd60e51b815260040180806020018281038252602a815260200180613397602a913960400191505060405180910390fd5b606061308e8484600085613096565b949350505050565b6060824710156130d75760405162461bcd60e51b815260040180806020018281038252602681526020018061330b6026913960400191505060405180910390fd5b6130e085613210565b613131576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061318e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613151565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146131f0576040519150601f19603f3d011682016040523d82523d6000602084013e6131f5565b606091505b5091509150613205828286613216565b979650505050505050565b3b151590565b60608315613225575081612b2f565b8251156132355782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561327f578181015183820152602001613267565b50505050905090810190601f1680156132ac5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe55704661726d3a3a6e6f6e4475706c6963617465643a204475706c696361746564436f72655265663a3a6f6e6c79476f7665726e6f723a2043616c6c6572206973206e6f74206120676f7665726e6f72416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f72655265663a3a6f6e6c79477561726469616e4f72476f7665726e6f723a2043616c6c6572206973206e6f74206120677561726469616e206f7220676f7665726e6f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122067f4f9b97dddb051b763101e42eb6961c931fafb513c08cb0f4cfbf21b2c4d8f64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2370,
        "contract": "contracts/UpFarm.sol:UpFarm",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11642,
        "contract": "contracts/UpFarm.sol:UpFarm",
        "label": "_core",
        "offset": 1,
        "slot": "0",
        "type": "t_contract(ICore)11634"
      },
      {
        "astId": 2455,
        "contract": "contracts/UpFarm.sol:UpFarm",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7808,
        "contract": "contracts/UpFarm.sol:UpFarm",
        "label": "rewardToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7810,
        "contract": "contracts/UpFarm.sol:UpFarm",
        "label": "vestingMaster",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7812,
        "contract": "contracts/UpFarm.sol:UpFarm",
        "label": "tokenPerBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7814,
        "contract": "contracts/UpFarm.sol:UpFarm",
        "label": "startBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7817,
        "contract": "contracts/UpFarm.sol:UpFarm",
        "label": "poolInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(PoolInfo)7806_storage)dyn_storage"
      },
      {
        "astId": 7823,
        "contract": "contracts/UpFarm.sol:UpFarm",
        "label": "userInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7793_storage))"
      },
      {
        "astId": 7826,
        "contract": "contracts/UpFarm.sol:UpFarm",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7830,
        "contract": "contracts/UpFarm.sol:UpFarm",
        "label": "poolExistence",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7832,
        "contract": "contracts/UpFarm.sol:UpFarm",
        "label": "_accShareReward",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 7834,
        "contract": "contracts/UpFarm.sol:UpFarm",
        "label": "_accHarvestedReward",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)7806_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)7806_storage",
        "encoding": "dynamic_array",
        "label": "struct UpFarm.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICore)11634": {
        "encoding": "inplace",
        "label": "contract ICore",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1328": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)7793_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UpFarm.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)7793_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)7793_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct UpFarm.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)7793_storage)"
      },
      "t_struct(PoolInfo)7806_storage": {
        "encoding": "inplace",
        "label": "struct UpFarm.PoolInfo",
        "members": [
          {
            "astId": 7795,
            "contract": "contracts/UpFarm.sol:UpFarm",
            "label": "want",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1328"
          },
          {
            "astId": 7797,
            "contract": "contracts/UpFarm.sol:UpFarm",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7799,
            "contract": "contracts/UpFarm.sol:UpFarm",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7801,
            "contract": "contracts/UpFarm.sol:UpFarm",
            "label": "accTokenPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7803,
            "contract": "contracts/UpFarm.sol:UpFarm",
            "label": "strat",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 7805,
            "contract": "contracts/UpFarm.sol:UpFarm",
            "label": "locked",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)7793_storage": {
        "encoding": "inplace",
        "label": "struct UpFarm.UserInfo",
        "members": [
          {
            "astId": 7790,
            "contract": "contracts/UpFarm.sol:UpFarm",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7792,
            "contract": "contracts/UpFarm.sol:UpFarm",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}