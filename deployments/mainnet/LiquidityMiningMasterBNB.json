{
  "address": "0x48c42579d98aa768cde893f8214371ed607cabe3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xmsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vestingMaster",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WBNB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_xmsPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_core",
          "type": "address"
        }
      ],
      "name": "CoreUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenPerBlock",
          "type": "uint256"
        }
      ],
      "name": "UpdateEmissionRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "UpdateEndBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vestingMaster",
          "type": "address"
        }
      ],
      "name": "UpdateVestingMaster",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BONUS_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MASTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNoHarvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pair2Pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "core_",
          "type": "address"
        }
      ],
      "name": "setCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        }
      ],
      "name": "updateEndBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateTokenPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vestingMaster",
          "type": "address"
        }
      ],
      "name": "updateVestingMaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingMaster",
      "outputs": [
        {
          "internalType": "contract IVestingMaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xmsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x71a0f41d1035e128c76af83cd968786e9c9d5ea51caeb15f13b5294083b068c7",
  "receipt": {
    "to": null,
    "from": "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
    "contractAddress": "0x9a10eb528785cf41d9D04276CB90f877aa708fe3",
    "transactionIndex": 1,
    "gasUsed": "4265348",
    "logsBloom": "0x
    "blockHash": "0xcc11aa67fcd23c07b52c946b69d2b32287f7c66f8678338efa3253f4ce8924a6",
    "transactionHash": "0x71a0f41d1035e128c76af83cd968786e9c9d5ea51caeb15f13b5294083b068c7",
    "logs": [],
    "blockNumber": 16802711,
    "cumulativeGasUsed": "4292628",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x40fc3759Ccc4E466650891a91F34Bdd6129094D6",
    "0x70138966a7CcFd7DB437797126E547fcB21e69BC",
    "0x0000000000000000000000000000000000000000",
    "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd",
    "500000000000000000",
    0,
    "1000000000000000000"
  ],
  "solcInputHash": "2f541bcd60d5e1a907d6462ac5275e07",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xmsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WBNB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_xmsPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPerBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEndBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingMaster\",\"type\":\"address\"}],\"name\":\"UpdateVestingMaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNoHarvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pair2Pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"core_\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"updateEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateTokenPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingMaster\",\"type\":\"address\"}],\"name\":\"updateVestingMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingMaster\",\"outputs\":[{\"internalType\":\"contract IVestingMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xmsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"getPriorVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"to\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"from\":\"The address of the source account\",\"to\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DelegateChanged(address,address,address)\":{\"notice\":\"An event thats emitted when an account changes its delegate\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"notice\":\"An event thats emitted when a delegate account's vote balance changes\"}},\"kind\":\"user\",\"methods\":{\"DELEGATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"checkpoints(address,uint32)\":{\"notice\":\"A record of votes checkpoints for each account, by index\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates votes from signatory to `delegatee`\"},\"delegates(address)\":{\"notice\":\"A record of each accounts delegate\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"nonces(address)\":{\"notice\":\"A record of states for signing / validating signatures\"},\"numCheckpoints(address)\":{\"notice\":\"The number of checkpoints for each account\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `to`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `from` to `to`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/LiquidityMiningMasterBNB.sol\":\"LiquidityMiningMasterBNB\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/interfaces/IVestingMaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\npragma solidity 0.6.12;\\n\\ninterface IVestingMaster{\\n    function lock(address account, uint256 amount) external;\\n\\n    function claim() external;\\n\\n    function getVestingAmount() external view returns (uint256 lockedAmount, uint256 claimableAmount);\\n\\n    function lockedPeriodAmount() external view returns (uint256 periodAmount);\\n\\n    function vestingToken() external view returns (IERC20);\\n\\n    function period() external view returns (uint256);\\n\\n    function totalLockedRewards() external view returns (uint256);\\n}\",\"keccak256\":\"0x7755df88c51c0860b91a8dea5dbcb4f7ec676491ecbe23a2d9777b11d50fc9be\",\"license\":\"MIT\"},\"contracts/libs/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n// Helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: Approve failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: Transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransferFrom: Transfer from failed\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: Eth transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x08a193ea2646222d9800fcfa044eddbc4171933b1daf95ffc93557cabd79a071\",\"license\":\"MIT\"},\"contracts/refs/CoreRef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ninterface ICore {\\n    function isGovernor(address _address) external view returns (bool);\\n\\n    function isGuardian(address _address) external view returns (bool);\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\\n\\nabstract contract CoreRef is Pausable {\\n\\n    event CoreUpdate(address indexed _core);\\n\\n    ICore private _core;\\n\\n    bytes32 public constant MASTER_ROLE = keccak256(\\\"MASTER_ROLE\\\");\\n\\n    constructor(address core_) public {\\n        _core = ICore(core_);\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender),\\n            \\\"CoreRef::onlyGovernor: Caller is not a governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(\\n            _core.isGuardian(msg.sender),\\n            \\\"CoreRef::onlyGuardian: Caller is not a guardian\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardianOrGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender),\\n            \\\"CoreRef::onlyGuardianOrGovernor: Caller is not a guardian or governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMaster() {\\n        require(\\n            _core.hasRole(MASTER_ROLE, msg.sender),\\n            \\\"CoreRef::onlyMaster: Caller is not a master\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        require(\\n            _core.hasRole(role, msg.sender),\\n            \\\"CoreRef::onlyRole: Not permit\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        require(\\n            _core.hasRole(role, address(0)) || _core.hasRole(role, msg.sender),\\n            \\\"CoreRef::onlyRoleOrOpenRole: Not permit\\\"\\n        );\\n        _;\\n    }\\n\\n    function setCore(address core_) external onlyGovernor {\\n        _core = ICore(core_);\\n        emit CoreUpdate(core_);\\n    }\\n\\n    function pause() public onlyGuardianOrGovernor {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyGovernor {\\n        _unpause();\\n    }\\n\\n    function core() public view returns (ICore) {\\n        return _core;\\n    }\\n\\n}\",\"keccak256\":\"0x347c55d9c381f639b545aca006912b67dde6c675080086b7cd33dc205ebcc3d5\",\"license\":\"MIT\"},\"contracts/test/DAOToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IDAOToken.sol\\\";\\n\\n// DAOToken with Governance.\\ncontract DAOToken is IDAOToken, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) public override delegates;\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    constructor(string memory name, string memory symbol) public ERC20(name, symbol) {}\\n\\n    function _mint(address to, uint256 amount) internal override {\\n        super._mint(to, amount);\\n        _moveDelegates(address(0), delegates[to], amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal override {\\n        super._burn(from, amount);\\n        _moveDelegates(delegates[from], address(0), amount);\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external override {\\n        return _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name())),\\n                getChainId(),\\n                address(this)\\n            )\\n        );\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\n        );\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n        );\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(\\n            signatory != address(0),\\n            \\\"DAOToken::delegateBySig: Invalid signature\\\"\\n        );\\n        require(\\n            nonce == nonces[signatory]++,\\n            \\\"DAOToken::delegateBySig: Invalid nonce\\\"\\n        );\\n        require(\\n            block.timestamp <= expiry,\\n            \\\"DAOToken::delegateBySig: Signature expired\\\"\\n        );\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return\\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            blockNumber < block.number,\\n            \\\"DAOToken::getPriorVotes: Not yet determined\\\"\\n        );\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `to`\\n     * @param to The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address to, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), to, amount);\\n        _moveDelegates(delegates[_msgSender()], delegates[to], amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `from` to `to`\\n     * @param from The address of the source account\\n     * @param to The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(from, to, amount);\\n        _approve(\\n            from,\\n            _msgSender(),\\n            allowance(from, _msgSender()).sub(\\n                amount,\\n                \\\"DAOToken::transferFrom: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n\\n        _moveDelegates(delegates[from], delegates[to], amount);\\n        return true;\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint256 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld = srcRepNum > 0\\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\\n                    : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld = dstRepNum > 0\\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\\n                    : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    ) internal {\\n        uint32 blockNumber = safe32(\\n            block.number,\\n            \\\"DAOToken::_writeCheckpoint: Block number exceeds 32 bits\\\"\\n        );\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newVotes\\n            );\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0x4e05895551f9974850000f7402f8edbe7717a698c6227d26d287baaa8b856174\",\"license\":\"MIT\"},\"contracts/test/LiquidityMiningMaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ILiquidityMiningMaster.sol\\\";\\nimport \\\"../interfaces/IVestingMaster.sol\\\";\\nimport \\\"../refs/CoreRef.sol\\\";\\nimport \\\"./DAOToken.sol\\\";\\n\\n// Earn Token, V1.2\\ncontract LiquidityMiningMaster is\\n    ILiquidityMiningMaster,\\n    ReentrancyGuard,\\n    CoreRef,\\n    DAOToken\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IVestingMaster public vestingMaster;\\n\\n    // Info of each pool.\\n    PoolInfo[] public override poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public override userInfo;\\n\\n    // Pair corresponding pid\\n    mapping(address => uint256) public override pair2Pid;\\n    mapping(IERC20 => bool) public override poolExistence;\\n\\n    // Reward tokens created per block.\\n    uint256 public override tokenPerBlock;\\n\\n    // Bonus muliplier for early reward makers.\\n    uint256 public constant override BONUS_MULTIPLIER = 1;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public override totalAllocPoint = 0;\\n\\n    // The block number when mining starts.\\n    uint256 public override startBlock;\\n\\n    // The block number when mining ends.\\n    uint256 public override endBlock;\\n\\n    IERC20 public override rewardToken;\\n\\n    uint256 private _accShareReward;\\n\\n    uint256 private _accHarvestedReward;\\n\\n    address public xmsAddress;\\n\\n    constructor(\\n        address _core,\\n        address _xmsAddress,\\n        address _vestingMaster,\\n        address _rewardToken,\\n        uint256 _tokenPerBlock,\\n        uint256 _startBlock,\\n        uint256 _endBlock\\n    ) public CoreRef(_core) DAOToken(\\\"Mars Farms Seed Token\\\", \\\"MSEED\\\") {\\n        require(\\n            _startBlock < _endBlock,\\n            \\\"LiquidityMiningMaster::constructor: End less than start\\\"\\n        );\\n        xmsAddress = _xmsAddress;\\n        vestingMaster = IVestingMaster(_vestingMaster);\\n        rewardToken = IERC20(_rewardToken);\\n        tokenPerBlock = _tokenPerBlock;\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n    }\\n\\n    modifier nonDuplicated(IERC20 _lpToken) {\\n        require(\\n            !poolExistence[_lpToken],\\n            \\\"LiquidityMiningMaster::nonDuplicated: Duplicated lp\\\"\\n        );\\n        require(\\n            _lpToken != rewardToken || address(_lpToken) == xmsAddress,\\n            \\\"LiquidityMiningMaster::nonDuplicated: Duplicated reward and lp\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier validatePid(uint256 _pid) {\\n        require(\\n            _pid < poolInfo.length,\\n            \\\"LiquidityMiningMaster::validatePid: Not exist\\\"\\n        );\\n        _;\\n    }\\n\\n    function transfer(address to, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        revert(\\\"LiquidityMiningMaster::transfer: Not support transfer\\\");\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        revert(\\\"LiquidityMiningMaster::transferFrom: Not support transferFrom\\\");\\n    }\\n\\n    function poolLength() public view override returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the governor.\\n    function addPool(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _locked,\\n        bool _withUpdate\\n    ) public override onlyGuardianOrGovernor nonDuplicated(_lpToken) {\\n        require(\\n            block.number < endBlock,\\n            \\\"LiquidityMiningMaster::addPool: Exceed endblock\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolExistence[_lpToken] = true;\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accTokenPerShare: 0,\\n                locked: _locked\\n            })\\n        );\\n        pair2Pid[address(_lpToken)] = poolLength() - 1;\\n    }\\n\\n    // Update the given pool's allocation point and deposit fee. Can only be called by the governor.\\n    function setPool(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _locked,\\n        bool _withUpdate\\n    ) public override validatePid(_pid) onlyGuardianOrGovernor {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].locked = _locked;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        pure\\n        override\\n        returns (uint256)\\n    {\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n    }\\n\\n    function _getTokenReward(uint256 _pid)\\n        internal\\n        view\\n        returns (uint256 tokenReward)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n            pool.lastRewardBlock < block.number,\\n            \\\"LiquidityMiningMaster::_getTokenReward: Must little than the current block number\\\"\\n        );\\n        uint256 multiplier = getMultiplier(\\n            pool.lastRewardBlock,\\n            block.number >= endBlock ? endBlock : block.number\\n        );\\n        if (totalAllocPoint > 0) {\\n            tokenReward = multiplier\\n                .mul(tokenPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n        }\\n    }\\n\\n    // View function to see pending reward on frontend.\\n    function pendingToken(uint256 _pid, address _user)\\n        external\\n        view\\n        override\\n        validatePid(_pid)\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 lpSupply = xmsAddress == address(pool.lpToken)\\n            ? totalSupply()\\n            : pool.lpToken.balanceOf(address(this));\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 shareReward = _getTokenReward(_pid);\\n            accTokenPerShare = accTokenPerShare.add(\\n                shareReward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n        return user.amount.mul(accTokenPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public override {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public override validatePid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        if (pool.lastRewardBlock >= endBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = xmsAddress == address(pool.lpToken)\\n            ? totalSupply()\\n            : pool.lpToken.balanceOf(address(this));\\n        uint256 lastRewardBlock = block.number >= endBlock\\n            ? endBlock\\n            : block.number;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = lastRewardBlock;\\n            return;\\n        }\\n        uint256 shareReward = _getTokenReward(_pid);\\n        pool.accTokenPerShare = pool.accTokenPerShare.add(\\n            shareReward.mul(1e12).div(lpSupply)\\n        );\\n        pool.lastRewardBlock = lastRewardBlock;\\n        _accShareReward = _accShareReward.add(shareReward);\\n        emit UpdatePool(\\n            address(pool.lpToken),\\n            pool.accTokenPerShare,\\n            shareReward,\\n            lpSupply\\n        );\\n    }\\n\\n    // Deposit LP tokens to LiquidityMiningMaster for allocation.\\n    function deposit(uint256 _pid, uint256 _amount)\\n        public\\n        override\\n        validatePid(_pid)\\n        nonReentrant\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user\\n                .amount\\n                .mul(pool.accTokenPerShare)\\n                .div(1e12)\\n                .sub(user.rewardDebt);\\n            if (pending > 0) {\\n                uint256 locked;\\n                if (pool.locked && address(vestingMaster) != address(0)) {\\n                    locked = pending\\n                        .div(vestingMaster.lockedPeriodAmount() + 1)\\n                        .mul(vestingMaster.lockedPeriodAmount());\\n                }\\n                _safeTokenTransfer(msg.sender, pending.sub(locked));\\n                if (locked > 0) {\\n                    uint256 actualAmount = _safeTokenTransfer(\\n                        address(vestingMaster),\\n                        locked\\n                    );\\n                    vestingMaster.lock(msg.sender, actualAmount);\\n                }\\n                _accHarvestedReward = _accHarvestedReward.add(pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            uint256 balance = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(\\n                address(msg.sender),\\n                address(this),\\n                _amount\\n            );\\n            _amount = pool.lpToken.balanceOf(address(this)).sub(balance);\\n            if (xmsAddress == address(pool.lpToken)) {\\n                _mint(msg.sender, _amount);\\n            }\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount, user.amount, user.rewardDebt);\\n    }\\n\\n    // Withdraw LP tokens from LiquidityMiningMaster.\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        public\\n        override\\n        validatePid(_pid)\\n        nonReentrant\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(\\n            user.amount >= _amount,\\n            \\\"LiquidityMiningMaster::withdraw: Not good\\\"\\n        );\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user\\n                .amount\\n                .mul(pool.accTokenPerShare)\\n                .div(1e12)\\n                .sub(user.rewardDebt);\\n            if (pending > 0) {\\n                uint256 locked;\\n                if (pool.locked && address(vestingMaster) != address(0)) {\\n                    locked = pending\\n                        .div(vestingMaster.lockedPeriodAmount() + 1)\\n                        .mul(vestingMaster.lockedPeriodAmount());\\n                }\\n                _safeTokenTransfer(msg.sender, pending.sub(locked));\\n                if (locked > 0) {\\n                    uint256 actualAmount = _safeTokenTransfer(\\n                        address(vestingMaster),\\n                        locked\\n                    );\\n                    vestingMaster.lock(msg.sender, actualAmount);\\n                }\\n                _accHarvestedReward = _accHarvestedReward.add(pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            if (xmsAddress == address(pool.lpToken)) {\\n                _burn(msg.sender, _amount);\\n            }\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);\\n        emit Withdraw(msg.sender, _pid, _amount, user.amount, user.rewardDebt);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid)\\n        public\\n        override\\n        validatePid(_pid)\\n        nonReentrant\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        if (xmsAddress == address(pool.lpToken)) {\\n            _burn(msg.sender, amount);\\n        }\\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Safe token transfer function, just in case if rounding error causes pool to not have enough token.\\n    function _safeTokenTransfer(address _to, uint256 _amount)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n        uint256 amount;\\n        uint256 floorAmount = address(rewardToken) == xmsAddress ? totalSupply() : 0;\\n        if (balance > floorAmount) {\\n            if (_amount > balance.sub(floorAmount)) {\\n                amount = balance.sub(floorAmount);\\n            } else {\\n                amount = _amount;\\n            }\\n        }\\n        require(\\n            rewardToken.transfer(_to, amount),\\n            \\\"LiquidityMiningMaster::safeTokenTransfer: Transfer failed\\\"\\n        );\\n        return amount;\\n    }\\n\\n    function updateTokenPerBlock(uint256 _tokenPerBlock)\\n        public\\n        override\\n        onlyGuardianOrGovernor\\n    {\\n        massUpdatePools();\\n        tokenPerBlock = _tokenPerBlock;\\n        emit UpdateEmissionRate(msg.sender, _tokenPerBlock);\\n    }\\n\\n    function updateEndBlock(uint256 _endBlock)\\n        public\\n        override\\n        onlyGuardianOrGovernor\\n    {\\n        require(\\n            _endBlock > startBlock && _endBlock >= block.number,\\n            \\\"LiquidityMiningMaster::updateEndBlock: Less\\\"\\n        );\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            require(\\n                _endBlock > poolInfo[pid].lastRewardBlock,\\n                \\\"LiquidityMiningMaster::updateEndBlock: Less\\\"\\n            );\\n        }\\n        massUpdatePools();\\n        endBlock = _endBlock;\\n        emit UpdateEndBlock(msg.sender, _endBlock);\\n    }\\n\\n    function updateVestingMaster(address _vestingMaster)\\n        public\\n        override\\n        onlyGovernor\\n    {\\n        vestingMaster = IVestingMaster(_vestingMaster);\\n        emit UpdateVestingMaster(msg.sender, _vestingMaster);\\n    }\\n\\n    function getNoHarvestReward() public view returns (uint256) {\\n        return _accShareReward.sub(_accHarvestedReward);\\n    }\\n}\",\"keccak256\":\"0xcef066239f18959acef6054cf180dfc53bc387b717061d7f72ac3d7827d93de1\",\"license\":\"MIT\"},\"contracts/test/LiquidityMiningMasterBNB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./LiquidityMiningMaster.sol\\\";\\nimport \\\"../libs/TransferHelper.sol\\\";\\n\\n// Earn BNB\\ncontract LiquidityMiningMasterBNB is LiquidityMiningMaster {\\n    using SafeMath for uint256;\\n\\n    constructor(\\n        address _core,\\n        address _xmsAddress,\\n        address _vestingMaster,\\n        address _WBNB,\\n        uint256 _xmsPerBlock,\\n        uint256 _startBlock,\\n        uint256 _endBlock\\n    ) public\\n        LiquidityMiningMaster(\\n            _core,\\n            _xmsAddress,\\n            _vestingMaster,\\n            _WBNB,\\n            _xmsPerBlock,\\n            _startBlock,\\n            _endBlock\\n        )\\n    {}\\n\\n    receive() external payable {}\\n\\n    // Safe bnb transfer function, just in case if rounding error causes pool to not have enough bnb.\\n    function _safeTokenTransfer(address _to, uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        uint256 balance = address(this).balance;\\n        uint256 amount;\\n        if (_amount > balance) {\\n            amount = balance;\\n        } else {\\n            amount = _amount;\\n        }\\n        TransferHelper.safeTransferETH(_to, amount);\\n        return amount;\\n    }\\n}\",\"keccak256\":\"0xf0ec2202581347d595481fbb70da8c174f66ac59fdfe22417d04fb853aa11f8f\",\"license\":\"MIT\"},\"contracts/test/interfaces/IDAOToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IDAOToken {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    // ----------- Events -----------\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    // ----------- State changing api -----------\\n\\n    function delegates(address delegator) external view returns (address);\\n\\n    function delegate(address delegatee) external;\\n\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // ----------- Getters -----------\\n\\n    function getCurrentVotes(address account) external view returns (uint256);\\n\\n    function getPriorVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint256);\\n}\",\"keccak256\":\"0x0ca7bc073be02fca554d86fb92a29eedcdb26b813cc2a2448f53b22a20a2a259\",\"license\":\"MIT\"},\"contracts/test/interfaces/ILiquidityMiningMaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILiquidityMiningMaster {\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of token\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accTokenPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accTokenPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Token to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that token distribution occurs.\\n        uint256 accTokenPerShare; // Accumulated token per share, times 1e12. See below.\\n        bool locked;\\n    }\\n\\n    // ----------- Events -----------\\n\\n    event Deposit(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        uint256 totalAmount,\\n        uint256 rewardDebt\\n    );\\n    event Withdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        uint256 totalAmount,\\n        uint256 rewardDebt\\n    );\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event UpdatePool(\\n        address lpToken,\\n        uint256 accTokenPerShare,\\n        uint256 reward,\\n        uint256 lpSupply\\n    );\\n    event UpdateEmissionRate(address indexed user, uint256 tokenPerBlock);\\n    event UpdateEndBlock(address indexed user, uint256 endBlock);\\n    event UpdateVestingMaster(address indexed user, address vestingMaster);\\n\\n    // ----------- State changing api -----------\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 pid) external;\\n\\n    function deposit(uint256 pid, uint256 amount) external;\\n\\n    function withdraw(uint256 pid, uint256 amount) external;\\n\\n    function emergencyWithdraw(uint256 pid) external;\\n\\n    // ----------- Governor only state changing API -----------\\n\\n    function addPool(\\n        uint256 allocPoint,\\n        IERC20 lpToken,\\n        bool locked,\\n        bool withUpdate\\n    ) external;\\n\\n    function setPool(\\n        uint256 pid,\\n        uint256 allocPoint,\\n        bool locked,\\n        bool withUpdate\\n    ) external;\\n\\n    function updateTokenPerBlock(uint256) external;\\n\\n    function updateEndBlock(uint256) external;\\n\\n    function updateVestingMaster(address) external;\\n\\n    // ----------- Getters -----------\\n\\n    function pair2Pid(address pair) external view returns (uint256);\\n\\n    function pendingToken(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            IERC20 lpToken,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accTokenPerShare,\\n            bool locked\\n        );\\n\\n    function userInfo(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 amount, uint256 rewardDebt);\\n\\n    function poolExistence(IERC20 lp) external view returns (bool);\\n\\n    function tokenPerBlock() external view returns (uint256);\\n\\n    function BONUS_MULTIPLIER() external view returns (uint256);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function startBlock() external view returns (uint256);\\n\\n    function endBlock() external view returns (uint256);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function getMultiplier(uint256 from, uint256 to)\\n        external\\n        pure\\n        returns (uint256);\\n\\n    function rewardToken() external view returns (IERC20);\\n}\",\"keccak256\":\"0xddbc82025bfc880f6c6854f5ba290064c94f4a386345b103b40e96672a83c163\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006012553480156200001657600080fd5b5060405162004bea38038062004bea83398101604081905262000039916200023c565b604080518082018252601581527f4d617273204661726d73205365656420546f6b656e0000000000000000000000602080830191825283518085019094526005808552641354d1515160da1b918501919091526001600081905580546001600160a81b0319166101006001600160a01b038e160217905582518b948b948b948b948b948b948b9493909284928492620000d3929162000182565b508051620000e990600690602084019062000182565b50506007805460ff19166012179055505050808210620001265760405162461bcd60e51b81526004016200011d90620002b9565b60405180910390fd5b601880546001600160a01b03199081166001600160a01b0398891617909155600c805482169688169690961790955560158054909516939095169290921790925560119190915560135560145550620003169650505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001c557805160ff1916838001178555620001f5565b82800160010185558215620001f5579182015b82811115620001f5578251825591602001919060010190620001d8565b506200020392915062000207565b5090565b5b8082111562000203576000815560010162000208565b80516001600160a01b03811681146200023657600080fd5b92915050565b600080600080600080600060e0888a03121562000257578283fd5b6200026389896200021e565b9650620002748960208a016200021e565b9550620002858960408a016200021e565b9450620002968960608a016200021e565b93506080880151925060a0880151915060c0880151905092959891949750929550565b60208082526037908201527f4c69717569646974794d696e696e674d61737465723a3a636f6e73747275637460408201527f6f723a20456e64206c657373207468616e207374617274000000000000000000606082015260800190565b6148c480620003266000396000f3fe60806040526004361061034d5760003560e01c80635c19a95c116101bb578063a457c2d7116100f7578063dc22486311610095578063e7a324dc1161006f578063e7a324dc14610920578063f1127ed814610935578063f2f4eb2614610963578063f7c618c11461097857610354565b8063dc224863146108cb578063dd62ed3e146108e0578063e2bbb1581461090057610354565b8063b4b5ea57116100d1578063b4b5ea571461084b578063c3cda5201461086b578063c81165851461088b578063cbd258b5146108ab57610354565b8063a457c2d7146107eb578063a9059cbb1461080b578063ae0e597a1461082b57610354565b80637ecebe00116101645780638aa285501161013e5780638aa28550146107735780638dbb1e3a1461078857806393f1a40b146107a857806395d89b41146107d657610354565b80637ecebe001461071e578063800096301461073e5780638456cb591461075e57610354565b80636fcfff45116101955780636fcfff45146106b157806370a08231146106de578063782d6fe1146106fe57610354565b80635c19a95c146106675780635c975abb14610687578063630b5ba11461069c57610354565b806323ddfa331161028a578063441a3e701161023357806351eb05a61161020d57806351eb05a6146105f25780635312ea8e14610612578063587cde1e146106325780635aca5e931461065257610354565b8063441a3e701461059d57806348cd4cb1146105bd57806348e43af4146105d257610354565b8063395093511161026457806339509351146105535780633f4ba83a146105735780634198709a1461058857610354565b806323ddfa33146104fc578063313ce5671461051c578063382c05ad1461053e57610354565b80631526fe27116102f75780631eccdf07116102d15780631eccdf071461048557806320606b70146104a75780632124ca44146104bc57806323b872dd146104dc57610354565b80631526fe271461042a57806317caf6f11461045b57806318160ddd1461047057610354565b8063083c632311610328578063083c6323146103c8578063095ea7b3146103dd5780630a0ee0361461040a57610354565b80626f02311461035957806306fdde031461037b578063081e3eda146103a657610354565b3661035457005b600080fd5b34801561036557600080fd5b50610379610374366004613aac565b61098d565b005b34801561038757600080fd5b50610390610bbc565b60405161039d9190613d14565b60405180910390f35b3480156103b257600080fd5b506103bb610c52565b60405161039d9190613c75565b3480156103d457600080fd5b506103bb610c58565b3480156103e957600080fd5b506103fd6103f83660046139d0565b610c5e565b60405161039d9190613c6a565b34801561041657600080fd5b50610379610425366004613b00565b610c7c565b34801561043657600080fd5b5061044a610445366004613aac565b611053565b60405161039d959493929190613ce4565b34801561046757600080fd5b506103bb61109e565b34801561047c57600080fd5b506103bb6110a4565b34801561049157600080fd5b5061049a6110aa565b60405161039d9190613bf3565b3480156104b357600080fd5b506103bb6110b9565b3480156104c857600080fd5b506103796104d736600461393c565b6110dd565b3480156104e857600080fd5b506103fd6104f7366004613990565b6111fb565b34801561050857600080fd5b50610379610517366004613b73565b611215565b34801561052857600080fd5b5061053161145d565b60405161039d91906147b2565b34801561054a57600080fd5b5061049a611466565b34801561055f57600080fd5b506103fd61056e3660046139d0565b611475565b34801561057f57600080fd5b506103796114c8565b34801561059457600080fd5b506103bb61158b565b3480156105a957600080fd5b506103796105b8366004613b52565b611591565b3480156105c957600080fd5b506103bb61196e565b3480156105de57600080fd5b506103bb6105ed366004613adc565b611974565b3480156105fe57600080fd5b5061037961060d366004613aac565b611b14565b34801561061e57600080fd5b5061037961062d366004613aac565b611d16565b34801561063e57600080fd5b5061049a61064d36600461393c565b611e1b565b34801561065e57600080fd5b506103bb611e36565b34801561067357600080fd5b5061037961068236600461393c565b611e54565b34801561069357600080fd5b506103fd611e68565b3480156106a857600080fd5b50610379611e71565b3480156106bd57600080fd5b506106d16106cc36600461393c565b611e90565b60405161039d919061478b565b3480156106ea57600080fd5b506103bb6106f936600461393c565b611ea8565b34801561070a57600080fd5b506103bb6107193660046139d0565b611ec3565b34801561072a57600080fd5b506103bb61073936600461393c565b6120ac565b34801561074a57600080fd5b5061037961075936600461393c565b6120be565b34801561076a57600080fd5b506103796121e0565b34801561077f57600080fd5b506103bb612344565b34801561079457600080fd5b506103bb6107a3366004613b52565b612349565b3480156107b457600080fd5b506107c86107c3366004613adc565b612361565b60405161039d929190614767565b3480156107e257600080fd5b50610390612385565b3480156107f757600080fd5b506103fd6108063660046139d0565b6123e6565b34801561081757600080fd5b506103fd6108263660046139d0565b61244e565b34801561083757600080fd5b50610379610846366004613aac565b612468565b34801561085757600080fd5b506103bb61086636600461393c565b612603565b34801561087757600080fd5b506103796108863660046139fb565b612666565b34801561089757600080fd5b506103bb6108a636600461393c565b612858565b3480156108b757600080fd5b506103fd6108c636600461393c565b61286a565b3480156108d757600080fd5b506103bb61287f565b3480156108ec57600080fd5b506103bb6108fb366004613958565b6128a3565b34801561090c57600080fd5b5061037961091b366004613b52565b6128ce565b34801561092c57600080fd5b506103bb612cc6565b34801561094157600080fd5b50610955610950366004613a5b565b612cea565b60405161039d92919061479c565b34801561096f57600080fd5b5061049a612d17565b34801561098457600080fd5b5061049a612d2b565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b8906109da903390600401613bf3565b60206040518083038186803b1580156109f257600080fd5b505afa158015610a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2a9190613a90565b80610acd57506001546040517f0c68ba210000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b031690630c68ba2190610a7d903390600401613bf3565b60206040518083038186803b158015610a9557600080fd5b505afa158015610aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acd9190613a90565b610af25760405162461bcd60e51b8152600401610ae990614160565b60405180910390fd5b60135481118015610b035750438110155b610b1f5760405162461bcd60e51b8152600401610ae99061455f565b60005b600d54811015610b7157600d8181548110610b3957fe5b9060005260206000209060050201600201548211610b695760405162461bcd60e51b8152600401610ae99061455f565b600101610b22565b50610b7a611e71565b601481905560405133907f316ee89ca026e5355cff2b64939ee0e5af49bde19b755b42bbde0f5bea03982590610bb1908490613c75565b60405180910390a250565b60058054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c485780601f10610c1d57610100808354040283529160200191610c48565b820191906000526020600020905b815481529060010190602001808311610c2b57829003601f168201915b5050505050905090565b600d5490565b60145481565b6000610c72610c6b612d3a565b8484612d3e565b5060015b92915050565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b890610cc9903390600401613bf3565b60206040518083038186803b158015610ce157600080fd5b505afa158015610cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d199190613a90565b80610dbc57506001546040517f0c68ba210000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b031690630c68ba2190610d6c903390600401613bf3565b60206040518083038186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbc9190613a90565b610dd85760405162461bcd60e51b8152600401610ae990614160565b6001600160a01b038316600090815260106020526040902054839060ff1615610e135760405162461bcd60e51b8152600401610ae990614049565b6015546001600160a01b038281169116141580610e3d57506018546001600160a01b038281169116145b610e595760405162461bcd60e51b8152600401610ae990613e30565b6014544310610e7a5760405162461bcd60e51b8152600401610ae9906145bc565b8115610e8857610e88611e71565b60006013544311610e9b57601354610e9d565b435b601254909150610ead9087612df2565b6012556001600160a01b038581166000818152601060209081526040808320805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009182168117909255825160a0810184529586529285018c8152918501878152606086018581528b151560808801908152600d80548086018255975296517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5600590970296870180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919099161790975591517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb685015590517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb784015593517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb883015591517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb9909101805490921690151517905561102e610c52565b6001600160a01b039096166000908152600f6020526040902095039094555050505050565b600d818154811061106057fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff1685565b60125481565b60045490565b600c546001600160a01b031681565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b89061112a903390600401613bf3565b60206040518083038186803b15801561114257600080fd5b505afa158015611156573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117a9190613a90565b6111965760405162461bcd60e51b8152600401610ae990613e8d565b600c80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831617905560405133907fedd017b4981fb4d0d4df1c48baed994ce8b4dc47ba89a2010ce592b7df5c6dc490610bb1908490613bf3565b600060405162461bcd60e51b8152600401610ae990613fb5565b600d54849081106112385760405162461bcd60e51b8152600401610ae9906141e3565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b890611285903390600401613bf3565b60206040518083038186803b15801561129d57600080fd5b505afa1580156112b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d59190613a90565b8061137857506001546040517f0c68ba210000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b031690630c68ba2190611328903390600401613bf3565b60206040518083038186803b15801561134057600080fd5b505afa158015611354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113789190613a90565b6113945760405162461bcd60e51b8152600401610ae990614160565b81156113a2576113a2611e71565b6113df846113d9600d88815481106113b657fe5b906000526020600020906005020160010154601254612e1790919063ffffffff16565b90612df2565b60128190555083600d86815481106113f357fe5b90600052602060002090600502016001018190555082600d868154811061141657fe5b6000918252602090912060059091020160040180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790555050505050565b60075460ff1690565b6018546001600160a01b031681565b6000610c72611482612d3a565b846114c38560036000611493612d3a565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490612df2565b612d3e565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b890611515903390600401613bf3565b60206040518083038186803b15801561152d57600080fd5b505afa158015611541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115659190613a90565b6115815760405162461bcd60e51b8152600401610ae990613e8d565b611589612e3f565b565b60115481565b600d54829081106115b45760405162461bcd60e51b8152600401610ae9906141e3565b600260005414156115d75760405162461bcd60e51b8152600401610ae990614619565b60026000908155600d8054859081106115ec57fe5b60009182526020808320878452600e8252604080852033865290925292208054600590920290920192508411156116355760405162461bcd60e51b8152600401610ae9906143eb565b61163e85611b14565b8054156118b557600061167f826001015461167964e8d4a5100061167387600301548760000154612ecb90919063ffffffff16565b90612f05565b90612e17565b905080156118b357600483015460009060ff1680156116a85750600c546001600160a01b031615155b156117ee57600c54604080517f05e97bc600000000000000000000000000000000000000000000000000000000815290516117eb926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b15801561170c57600080fd5b505afa158015611720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117449190613ac4565b600c54604080517f05e97bc600000000000000000000000000000000000000000000000000000000815290516117e5926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b1580156117a357600080fd5b505afa1580156117b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117db9190613ac4565b8590600101612f05565b90612ecb565b90505b611801336117fc8484612e17565b612f37565b5080156118a157600c54600090611821906001600160a01b031683612f37565b600c546040517f282d3fdf0000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063282d3fdf9061186d9033908590600401613c07565b600060405180830381600087803b15801561188757600080fd5b505af115801561189b573d6000803e3d6000fd5b50505050505b6017546118ae9083612df2565b601755505b505b83156119015780546118c79085612e17565b815581546018546001600160a01b03908116911614156118eb576118eb3385612f5f565b8154611901906001600160a01b03163386612f8f565b6003820154815461191c9164e8d4a510009161167391612ecb565b600182018190558154604051879233927fe08737ac48a1dab4b1a46c7dc9398bd5bfc6d7ad6fabb7cd8caa254de14def359261195a928a9291614775565b60405180910390a350506001600055505050565b60135481565b600d546000908390811061199a5760405162461bcd60e51b8152600401610ae9906141e3565b6000600d85815481106119a957fe5b60009182526020808320888452600e825260408085206001600160a01b038a81168752935284206005939093020160038101548154601854929650939490939092908116911614611a915783546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906370a0823190611a3c903090600401613bf3565b60206040518083038186803b158015611a5457600080fd5b505afa158015611a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8c9190613ac4565b611a99565b611a996110a4565b9050836002015443118015611aad57508015155b15611ae0576000611abd89613035565b9050611adc611ad5836116738464e8d4a51000612ecb565b8490612df2565b9250505b611b08836001015461167964e8d4a51000611673868860000154612ecb90919063ffffffff16565b98975050505050505050565b600d5481908110611b375760405162461bcd60e51b8152600401610ae9906141e3565b6000600d8381548110611b4657fe5b9060005260206000209060050201905080600201544311611b675750611d12565b601454816002015410611b7a5750611d12565b80546018546000916001600160a01b03918216911614611c315781546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906370a0823190611bdc903090600401613bf3565b60206040518083038186803b158015611bf457600080fd5b505afa158015611c08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2c9190613ac4565b611c39565b611c396110a4565b90506000601454431015611c4d5743611c51565b6014545b9050811580611c6257506001830154155b15611c765760029092019190915550611d12565b6000611c8186613035565b9050611ca4611c99846116738464e8d4a51000612ecb565b600386015490612df2565b600385015560028401829055601654611cbd9082612df2565b601655835460038501546040517f50a1a2d4fcb1c08863a0b14fcc7d9d728e2b21d8d7588b9cfa3991efe8112ee792611d05926001600160a01b039091169185908890613c44565b60405180910390a1505050505b5050565b600d5481908110611d395760405162461bcd60e51b8152600401610ae9906141e3565b60026000541415611d5c5760405162461bcd60e51b8152600401610ae990614619565b60026000908155600d805484908110611d7157fe5b60009182526020808320868452600e825260408085203386529092529083208054848255600182019490945560059092020180546018549194509192916001600160a01b0391821691161415611dcb57611dcb3382612f5f565b8254611de1906001600160a01b03163383612f8f565b84336001600160a01b03167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05958360405161195a9190613c75565b6008602052600090815260409020546001600160a01b031681565b6000611e4f601754601654612e1790919063ffffffff16565b905090565b611e65611e5f612d3a565b826130d2565b50565b60015460ff1690565b600d5460005b81811015611d1257611e8881611b14565b600101611e77565b600a6020526000908152604090205463ffffffff1681565b6001600160a01b031660009081526002602052604090205490565b6000438210611ee45760405162461bcd60e51b8152600401610ae990614650565b6001600160a01b0383166000908152600a602052604090205463ffffffff1680611f12576000915050610c76565b6001600160a01b038416600090815260096020908152604080832063ffffffff600019860181168552925290912054168310611f81576001600160a01b03841660009081526009602090815260408083206000199490940163ffffffff16835292905220600101549050610c76565b6001600160a01b038416600090815260096020908152604080832083805290915290205463ffffffff16831015611fbc576000915050610c76565b600060001982015b8163ffffffff168163ffffffff16111561207557600282820363ffffffff16048103611fee613925565b506001600160a01b038716600090815260096020908152604080832063ffffffff80861685529083529281902081518083019092528054909316808252600190930154918101919091529087141561205057602001519450610c769350505050565b805163ffffffff168711156120675781935061206e565b6001820392505b5050611fc4565b506001600160a01b038516600090815260096020908152604080832063ffffffff9094168352929052206001015491505092915050565b600b6020526000908152604090205481565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b89061210b903390600401613bf3565b60206040518083038186803b15801561212357600080fd5b505afa158015612137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215b9190613a90565b6121775760405162461bcd60e51b8152600401610ae990613e8d565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038416908102919091179091556040517fad9400e618eb1344fde53db22397a1b82c765527ecbba3a5c86bcac15090828b90600090a250565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b89061222d903390600401613bf3565b60206040518083038186803b15801561224557600080fd5b505afa158015612259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227d9190613a90565b8061232057506001546040517f0c68ba210000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b031690630c68ba21906122d0903390600401613bf3565b60206040518083038186803b1580156122e857600080fd5b505afa1580156122fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123209190613a90565b61233c5760405162461bcd60e51b8152600401610ae990614160565b61158961317f565b600181565b600061235a60016117e58486612e17565b9392505050565b600e6020908152600092835260408084209091529082529020805460019091015482565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c485780601f10610c1d57610100808354040283529160200191610c48565b6000610c726123f3612d3a565b846114c38560405180606001604052806025815260200161486a602591396003600061241d612d3a565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906131f7565b600060405162461bcd60e51b8152600401610ae9906140a6565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b8906124b5903390600401613bf3565b60206040518083038186803b1580156124cd57600080fd5b505afa1580156124e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125059190613a90565b806125a857506001546040517f0c68ba210000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b031690630c68ba2190612558903390600401613bf3565b60206040518083038186803b15801561257057600080fd5b505afa158015612584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a89190613a90565b6125c45760405162461bcd60e51b8152600401610ae990614160565b6125cc611e71565b601181905560405133907fe2492e003bbe8afa53088b406f0c1cb5d9e280370fc72a74cf116ffd343c405390610bb1908490613c75565b6001600160a01b0381166000908152600a602052604081205463ffffffff168061262e57600061235a565b6001600160a01b038316600090815260096020908152604080832063ffffffff60001986011684529091529020600101549392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866612691610bbc565b805190602001206126a0613223565b306040516020016126b49493929190613ca2565b60405160208183030381529060405280519060200120905060007fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf8888886040516020016127059493929190613c7e565b60405160208183030381529060405280519060200120905060008282604051602001612732929190613bbd565b60405160208183030381529060405280519060200120905060006001828888886040516000815260200160405260405161276f9493929190613cc6565b6020604051602081039080840390855afa158015612791573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b0381166127e25760405162461bcd60e51b8152600401610ae9906144a5565b6001600160a01b0381166000908152600b6020526040902080546001810190915589146128215760405162461bcd60e51b8152600401610ae990614357565b874211156128415760405162461bcd60e51b8152600401610ae990614448565b61284b818b6130d2565b505050505b505050505050565b600f6020526000908152604090205481565b60106020526000908152604090205460ff1681565b7f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c81565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b600d54829081106128f15760405162461bcd60e51b8152600401610ae9906141e3565b600260005414156129145760405162461bcd60e51b8152600401610ae990614619565b60026000908155600d80548590811061292957fe5b60009182526020808320878452600e8252604080852033865290925292206005909102909101915061295a85611b14565b805415612ae157600061298f826001015461167964e8d4a5100061167387600301548760000154612ecb90919063ffffffff16565b90508015612adf57600483015460009060ff1680156129b85750600c546001600160a01b031615155b15612a1f57600c54604080517f05e97bc60000000000000000000000000000000000000000000000000000000081529051612a1c926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b15801561170c57600080fd5b90505b612a2d336117fc8484612e17565b508015612acd57600c54600090612a4d906001600160a01b031683612f37565b600c546040517f282d3fdf0000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063282d3fdf90612a999033908590600401613c07565b600060405180830381600087803b158015612ab357600080fd5b505af1158015612ac7573d6000803e3d6000fd5b50505050505b601754612ada9083612df2565b601755505b505b8315612c6d5781546040517f70a082310000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906370a0823190612b30903090600401613bf3565b60206040518083038186803b158015612b4857600080fd5b505afa158015612b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b809190613ac4565b8354909150612b9a906001600160a01b0316333088613227565b82546040517f70a08231000000000000000000000000000000000000000000000000000000008152612c389183916001600160a01b03909116906370a0823190612be8903090600401613bf3565b60206040518083038186803b158015612c0057600080fd5b505afa158015612c14573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116799190613ac4565b83546018549196506001600160a01b0391821691161415612c5d57612c5d3386613248565b8154612c699086612df2565b8255505b60038201548154612c889164e8d4a510009161167391612ecb565b600182018190558154604051879233927f7162984403f6c73c8639375d45a9187dfd04602231bd8e587c415718b5f7e5f99261195a928a9291614775565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b60096020908152600092835260408084209091529082529020805460019091015463ffffffff9091169082565b60015461010090046001600160a01b031690565b6015546001600160a01b031681565b3390565b6001600160a01b038316612d645760405162461bcd60e51b8152600401610ae9906142fa565b6001600160a01b038216612d8a5760405162461bcd60e51b8152600401610ae990613d9c565b6001600160a01b0380841660008181526003602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590612de5908590613c75565b60405180910390a3505050565b60008282018381101561235a5760405162461bcd60e51b8152600401610ae990613df9565b600082821115612e395760405162461bcd60e51b8152600401610ae990613eea565b50900390565b612e47611e68565b612e635760405162461bcd60e51b8152600401610ae990613d65565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612eb4612d3a565b604051612ec19190613bf3565b60405180910390a1565b600082612eda57506000610c76565b82820282848281612ee757fe5b041461235a5760405162461bcd60e51b8152600401610ae990614103565b6000808211612f265760405162461bcd60e51b8152600401610ae990613f7e565b818381612f2f57fe5b049392505050565b6000478181841115612f4a575080612f4d565b50825b612f578582613277565b949350505050565b612f698282613304565b6001600160a01b03808316600090815260086020526040812054611d12921690836133e6565b6130308363a9059cbb60e01b8484604051602401612fae929190613c07565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613523565b505050565b600080600d838154811061304557fe5b90600052602060002090600502019050438160020154106130785760405162461bcd60e51b8152600401610ae9906146ad565b600061309a826002015460145443101561309257436107a3565b601454612349565b601254909150156130cb576130c860125461167384600101546117e560115486612ecb90919063ffffffff16565b92505b5050919050565b6001600160a01b03808316600090815260086020526040812054909116906130f984611ea8565b6001600160a01b0385811660008181526008602052604080822080547fffffffffffffffffffffffff000000000000000000000000000000000000000016898616908117909155905194955093928616927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46131798284836133e6565b50505050565b613187611e68565b156131a45760405162461bcd60e51b8152600401610ae990614012565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612eb4612d3a565b6000818484111561321b5760405162461bcd60e51b8152600401610ae99190613d14565b505050900390565b4690565b613179846323b872dd60e01b858585604051602401612fae93929190613c20565b61325282826135b2565b6001600160a01b03808316600090815260086020526040812054611d129216836133e6565b604080516000808252602082019092526001600160a01b0384169083906040516132a19190613ba1565b60006040518083038185875af1925050503d80600081146132de576040519150601f19603f3d011682016040523d82523d6000602084013e6132e3565b606091505b50509050806130305760405162461bcd60e51b8152600401610ae99061429d565b6001600160a01b03821661332a5760405162461bcd60e51b8152600401610ae990614240565b61333682600083613030565b61337381604051806060016040528060228152602001614810602291396001600160a01b03851660009081526002602052604090205491906131f7565b6001600160a01b0383166000908152600260205260409020556004546133999082612e17565b6004556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906133da908590613c75565b60405180910390a35050565b816001600160a01b0316836001600160a01b0316141580156134085750600081115b15613030576001600160a01b0383161561349a576001600160a01b0383166000908152600a602052604081205463ffffffff16908161344857600061347a565b6001600160a01b038516600090815260096020908152604080832063ffffffff60001987011684529091529020600101545b905060006134888285612e17565b905061349686848484613666565b5050505b6001600160a01b03821615613030576001600160a01b0382166000908152600a602052604081205463ffffffff1690816134d5576000613507565b6001600160a01b038416600090815260096020908152604080832063ffffffff60001987011684529091529020600101545b905060006135158285612df2565b905061285085848484613666565b6060613578826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137e69092919063ffffffff16565b80519091501561303057808060200190518101906135969190613a90565b6130305760405162461bcd60e51b8152600401610ae990614502565b6001600160a01b0382166135d85760405162461bcd60e51b8152600401610ae990614730565b6135e460008383613030565b6004546135f19082612df2565b6004556001600160a01b0382166000908152600260205260409020546136179082612df2565b6001600160a01b0383166000818152600260205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906133da908590613c75565b600061368a43604051806060016040528060388152602001614832603891396137f5565b905060008463ffffffff161180156136d357506001600160a01b038516600090815260096020908152604080832063ffffffff6000198901811685529252909120548282169116145b15613710576001600160a01b038516600090815260096020908152604080832063ffffffff6000198901168452909152902060010182905561379c565b60408051808201825263ffffffff808416825260208083018681526001600160a01b038a166000818152600984528681208b861682528452868120955186549086167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009182161787559251600196870155908152600a9092529390208054928801909116919092161790555b846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72484846040516137d7929190614767565b60405180910390a25050505050565b6060612f578484600085613825565b600081640100000000841061381d5760405162461bcd60e51b8152600401610ae99190613d14565b509192915050565b6060824710156138475760405162461bcd60e51b8152600401610ae990613f21565b613850856138e6565b61386c5760405162461bcd60e51b8152600401610ae9906143b4565b60006060866001600160a01b031685876040516138899190613ba1565b60006040518083038185875af1925050503d80600081146138c6576040519150601f19603f3d011682016040523d82523d6000602084013e6138cb565b606091505b50915091506138db8282866138ec565b979650505050505050565b3b151590565b606083156138fb57508161235a565b82511561390b5782518084602001fd5b8160405162461bcd60e51b8152600401610ae99190613d14565b604080518082019091526000808252602082015290565b60006020828403121561394d578081fd5b813561235a816147ec565b6000806040838503121561396a578081fd5b8235613975816147ec565b91506020830135613985816147ec565b809150509250929050565b6000806000606084860312156139a4578081fd5b83356139af816147ec565b925060208401356139bf816147ec565b929592945050506040919091013590565b600080604083850312156139e2578182fd5b82356139ed816147ec565b946020939093013593505050565b60008060008060008060c08789031215613a13578182fd5b8635613a1e816147ec565b95506020870135945060408701359350606087013560ff81168114613a41578283fd5b9598949750929560808101359460a0909101359350915050565b60008060408385031215613a6d578182fd5b8235613a78816147ec565b9150602083013563ffffffff81168114613985578182fd5b600060208284031215613aa1578081fd5b815161235a81614801565b600060208284031215613abd578081fd5b5035919050565b600060208284031215613ad5578081fd5b5051919050565b60008060408385031215613aee578182fd5b823591506020830135613985816147ec565b60008060008060808587031215613b15578384fd5b843593506020850135613b27816147ec565b92506040850135613b3781614801565b91506060850135613b4781614801565b939692955090935050565b60008060408385031215613b64578182fd5b50508035926020909101359150565b60008060008060808587031215613b88578182fd5b84359350602085013592506040850135613b3781614801565b60008251613bb38184602087016147c0565b9190910192915050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b901515815260200190565b90815260200190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6001600160a01b039590951685526020850193909352604084019190915260608301521515608082015260a00190565b6000602082528251806020840152613d338160408501602087016147c0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252603e908201527f4c69717569646974794d696e696e674d61737465723a3a6e6f6e4475706c696360408201527f617465643a204475706c6963617465642072657761726420616e64206c700000606082015260800190565b6020808252602f908201527f436f72655265663a3a6f6e6c79476f7665726e6f723a2043616c6c657220697360408201527f206e6f74206120676f7665726e6f720000000000000000000000000000000000606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252603d908201527f4c69717569646974794d696e696e674d61737465723a3a7472616e736665724660408201527f726f6d3a204e6f7420737570706f7274207472616e7366657246726f6d000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526033908201527f4c69717569646974794d696e696e674d61737465723a3a6e6f6e4475706c696360408201527f617465643a204475706c696361746564206c7000000000000000000000000000606082015260800190565b60208082526035908201527f4c69717569646974794d696e696e674d61737465723a3a7472616e736665723a60408201527f204e6f7420737570706f7274207472616e736665720000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526045908201527f436f72655265663a3a6f6e6c79477561726469616e4f72476f7665726e6f723a60408201527f2043616c6c6572206973206e6f74206120677561726469616e206f7220676f7660608201527f65726e6f72000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252602d908201527f4c69717569646974794d696e696e674d61737465723a3a76616c69646174655060408201527f69643a204e6f7420657869737400000000000000000000000000000000000000606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20457468207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f44414f546f6b656e3a3a64656c656761746542795369673a20496e76616c696460408201527f206e6f6e63650000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526029908201527f4c69717569646974794d696e696e674d61737465723a3a77697468647261773a60408201527f204e6f7420676f6f640000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f44414f546f6b656e3a3a64656c656761746542795369673a205369676e61747560408201527f7265206578706972656400000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f44414f546f6b656e3a3a64656c656761746542795369673a20496e76616c696460408201527f207369676e617475726500000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f4c69717569646974794d696e696e674d61737465723a3a757064617465456e6460408201527f426c6f636b3a204c657373000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f4c69717569646974794d696e696e674d61737465723a3a616464506f6f6c3a2060408201527f45786365656420656e64626c6f636b0000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f44414f546f6b656e3a3a6765745072696f72566f7465733a204e6f742079657460408201527f2064657465726d696e6564000000000000000000000000000000000000000000606082015260800190565b60208082526051908201527f4c69717569646974794d696e696e674d61737465723a3a5f676574546f6b656e60408201527f5265776172643a204d757374206c6974746c65207468616e207468652063757260608201527f72656e7420626c6f636b206e756d626572000000000000000000000000000000608082015260a00190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b918252602082015260400190565b9283526020830191909152604082015260600190565b63ffffffff91909116815260200190565b63ffffffff929092168252602082015260400190565b60ff91909116815260200190565b60005b838110156147db5781810151838201526020016147c3565b838111156131795750506000910152565b6001600160a01b0381168114611e6557600080fd5b8015158114611e6557600080fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636544414f546f6b656e3a3a5f7772697465436865636b706f696e743a20426c6f636b206e756d6265722065786365656473203332206269747345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122003cb431fdd32eefb5f9b0ea7b2d34e23f1de1b6ca7d920e6471311b6609c1d6464736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061034d5760003560e01c80635c19a95c116101bb578063a457c2d7116100f7578063dc22486311610095578063e7a324dc1161006f578063e7a324dc14610920578063f1127ed814610935578063f2f4eb2614610963578063f7c618c11461097857610354565b8063dc224863146108cb578063dd62ed3e146108e0578063e2bbb1581461090057610354565b8063b4b5ea57116100d1578063b4b5ea571461084b578063c3cda5201461086b578063c81165851461088b578063cbd258b5146108ab57610354565b8063a457c2d7146107eb578063a9059cbb1461080b578063ae0e597a1461082b57610354565b80637ecebe00116101645780638aa285501161013e5780638aa28550146107735780638dbb1e3a1461078857806393f1a40b146107a857806395d89b41146107d657610354565b80637ecebe001461071e578063800096301461073e5780638456cb591461075e57610354565b80636fcfff45116101955780636fcfff45146106b157806370a08231146106de578063782d6fe1146106fe57610354565b80635c19a95c146106675780635c975abb14610687578063630b5ba11461069c57610354565b806323ddfa331161028a578063441a3e701161023357806351eb05a61161020d57806351eb05a6146105f25780635312ea8e14610612578063587cde1e146106325780635aca5e931461065257610354565b8063441a3e701461059d57806348cd4cb1146105bd57806348e43af4146105d257610354565b8063395093511161026457806339509351146105535780633f4ba83a146105735780634198709a1461058857610354565b806323ddfa33146104fc578063313ce5671461051c578063382c05ad1461053e57610354565b80631526fe27116102f75780631eccdf07116102d15780631eccdf071461048557806320606b70146104a75780632124ca44146104bc57806323b872dd146104dc57610354565b80631526fe271461042a57806317caf6f11461045b57806318160ddd1461047057610354565b8063083c632311610328578063083c6323146103c8578063095ea7b3146103dd5780630a0ee0361461040a57610354565b80626f02311461035957806306fdde031461037b578063081e3eda146103a657610354565b3661035457005b600080fd5b34801561036557600080fd5b50610379610374366004613aac565b61098d565b005b34801561038757600080fd5b50610390610bbc565b60405161039d9190613d14565b60405180910390f35b3480156103b257600080fd5b506103bb610c52565b60405161039d9190613c75565b3480156103d457600080fd5b506103bb610c58565b3480156103e957600080fd5b506103fd6103f83660046139d0565b610c5e565b60405161039d9190613c6a565b34801561041657600080fd5b50610379610425366004613b00565b610c7c565b34801561043657600080fd5b5061044a610445366004613aac565b611053565b60405161039d959493929190613ce4565b34801561046757600080fd5b506103bb61109e565b34801561047c57600080fd5b506103bb6110a4565b34801561049157600080fd5b5061049a6110aa565b60405161039d9190613bf3565b3480156104b357600080fd5b506103bb6110b9565b3480156104c857600080fd5b506103796104d736600461393c565b6110dd565b3480156104e857600080fd5b506103fd6104f7366004613990565b6111fb565b34801561050857600080fd5b50610379610517366004613b73565b611215565b34801561052857600080fd5b5061053161145d565b60405161039d91906147b2565b34801561054a57600080fd5b5061049a611466565b34801561055f57600080fd5b506103fd61056e3660046139d0565b611475565b34801561057f57600080fd5b506103796114c8565b34801561059457600080fd5b506103bb61158b565b3480156105a957600080fd5b506103796105b8366004613b52565b611591565b3480156105c957600080fd5b506103bb61196e565b3480156105de57600080fd5b506103bb6105ed366004613adc565b611974565b3480156105fe57600080fd5b5061037961060d366004613aac565b611b14565b34801561061e57600080fd5b5061037961062d366004613aac565b611d16565b34801561063e57600080fd5b5061049a61064d36600461393c565b611e1b565b34801561065e57600080fd5b506103bb611e36565b34801561067357600080fd5b5061037961068236600461393c565b611e54565b34801561069357600080fd5b506103fd611e68565b3480156106a857600080fd5b50610379611e71565b3480156106bd57600080fd5b506106d16106cc36600461393c565b611e90565b60405161039d919061478b565b3480156106ea57600080fd5b506103bb6106f936600461393c565b611ea8565b34801561070a57600080fd5b506103bb6107193660046139d0565b611ec3565b34801561072a57600080fd5b506103bb61073936600461393c565b6120ac565b34801561074a57600080fd5b5061037961075936600461393c565b6120be565b34801561076a57600080fd5b506103796121e0565b34801561077f57600080fd5b506103bb612344565b34801561079457600080fd5b506103bb6107a3366004613b52565b612349565b3480156107b457600080fd5b506107c86107c3366004613adc565b612361565b60405161039d929190614767565b3480156107e257600080fd5b50610390612385565b3480156107f757600080fd5b506103fd6108063660046139d0565b6123e6565b34801561081757600080fd5b506103fd6108263660046139d0565b61244e565b34801561083757600080fd5b50610379610846366004613aac565b612468565b34801561085757600080fd5b506103bb61086636600461393c565b612603565b34801561087757600080fd5b506103796108863660046139fb565b612666565b34801561089757600080fd5b506103bb6108a636600461393c565b612858565b3480156108b757600080fd5b506103fd6108c636600461393c565b61286a565b3480156108d757600080fd5b506103bb61287f565b3480156108ec57600080fd5b506103bb6108fb366004613958565b6128a3565b34801561090c57600080fd5b5061037961091b366004613b52565b6128ce565b34801561092c57600080fd5b506103bb612cc6565b34801561094157600080fd5b50610955610950366004613a5b565b612cea565b60405161039d92919061479c565b34801561096f57600080fd5b5061049a612d17565b34801561098457600080fd5b5061049a612d2b565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b8906109da903390600401613bf3565b60206040518083038186803b1580156109f257600080fd5b505afa158015610a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2a9190613a90565b80610acd57506001546040517f0c68ba210000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b031690630c68ba2190610a7d903390600401613bf3565b60206040518083038186803b158015610a9557600080fd5b505afa158015610aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acd9190613a90565b610af25760405162461bcd60e51b8152600401610ae990614160565b60405180910390fd5b60135481118015610b035750438110155b610b1f5760405162461bcd60e51b8152600401610ae99061455f565b60005b600d54811015610b7157600d8181548110610b3957fe5b9060005260206000209060050201600201548211610b695760405162461bcd60e51b8152600401610ae99061455f565b600101610b22565b50610b7a611e71565b601481905560405133907f316ee89ca026e5355cff2b64939ee0e5af49bde19b755b42bbde0f5bea03982590610bb1908490613c75565b60405180910390a250565b60058054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c485780601f10610c1d57610100808354040283529160200191610c48565b820191906000526020600020905b815481529060010190602001808311610c2b57829003601f168201915b5050505050905090565b600d5490565b60145481565b6000610c72610c6b612d3a565b8484612d3e565b5060015b92915050565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b890610cc9903390600401613bf3565b60206040518083038186803b158015610ce157600080fd5b505afa158015610cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d199190613a90565b80610dbc57506001546040517f0c68ba210000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b031690630c68ba2190610d6c903390600401613bf3565b60206040518083038186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbc9190613a90565b610dd85760405162461bcd60e51b8152600401610ae990614160565b6001600160a01b038316600090815260106020526040902054839060ff1615610e135760405162461bcd60e51b8152600401610ae990614049565b6015546001600160a01b038281169116141580610e3d57506018546001600160a01b038281169116145b610e595760405162461bcd60e51b8152600401610ae990613e30565b6014544310610e7a5760405162461bcd60e51b8152600401610ae9906145bc565b8115610e8857610e88611e71565b60006013544311610e9b57601354610e9d565b435b601254909150610ead9087612df2565b6012556001600160a01b038581166000818152601060209081526040808320805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009182168117909255825160a0810184529586529285018c8152918501878152606086018581528b151560808801908152600d80548086018255975296517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5600590970296870180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919099161790975591517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb685015590517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb784015593517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb883015591517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb9909101805490921690151517905561102e610c52565b6001600160a01b039096166000908152600f6020526040902095039094555050505050565b600d818154811061106057fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff1685565b60125481565b60045490565b600c546001600160a01b031681565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b89061112a903390600401613bf3565b60206040518083038186803b15801561114257600080fd5b505afa158015611156573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117a9190613a90565b6111965760405162461bcd60e51b8152600401610ae990613e8d565b600c80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831617905560405133907fedd017b4981fb4d0d4df1c48baed994ce8b4dc47ba89a2010ce592b7df5c6dc490610bb1908490613bf3565b600060405162461bcd60e51b8152600401610ae990613fb5565b600d54849081106112385760405162461bcd60e51b8152600401610ae9906141e3565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b890611285903390600401613bf3565b60206040518083038186803b15801561129d57600080fd5b505afa1580156112b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d59190613a90565b8061137857506001546040517f0c68ba210000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b031690630c68ba2190611328903390600401613bf3565b60206040518083038186803b15801561134057600080fd5b505afa158015611354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113789190613a90565b6113945760405162461bcd60e51b8152600401610ae990614160565b81156113a2576113a2611e71565b6113df846113d9600d88815481106113b657fe5b906000526020600020906005020160010154601254612e1790919063ffffffff16565b90612df2565b60128190555083600d86815481106113f357fe5b90600052602060002090600502016001018190555082600d868154811061141657fe5b6000918252602090912060059091020160040180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790555050505050565b60075460ff1690565b6018546001600160a01b031681565b6000610c72611482612d3a565b846114c38560036000611493612d3a565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490612df2565b612d3e565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b890611515903390600401613bf3565b60206040518083038186803b15801561152d57600080fd5b505afa158015611541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115659190613a90565b6115815760405162461bcd60e51b8152600401610ae990613e8d565b611589612e3f565b565b60115481565b600d54829081106115b45760405162461bcd60e51b8152600401610ae9906141e3565b600260005414156115d75760405162461bcd60e51b8152600401610ae990614619565b60026000908155600d8054859081106115ec57fe5b60009182526020808320878452600e8252604080852033865290925292208054600590920290920192508411156116355760405162461bcd60e51b8152600401610ae9906143eb565b61163e85611b14565b8054156118b557600061167f826001015461167964e8d4a5100061167387600301548760000154612ecb90919063ffffffff16565b90612f05565b90612e17565b905080156118b357600483015460009060ff1680156116a85750600c546001600160a01b031615155b156117ee57600c54604080517f05e97bc600000000000000000000000000000000000000000000000000000000815290516117eb926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b15801561170c57600080fd5b505afa158015611720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117449190613ac4565b600c54604080517f05e97bc600000000000000000000000000000000000000000000000000000000815290516117e5926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b1580156117a357600080fd5b505afa1580156117b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117db9190613ac4565b8590600101612f05565b90612ecb565b90505b611801336117fc8484612e17565b612f37565b5080156118a157600c54600090611821906001600160a01b031683612f37565b600c546040517f282d3fdf0000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063282d3fdf9061186d9033908590600401613c07565b600060405180830381600087803b15801561188757600080fd5b505af115801561189b573d6000803e3d6000fd5b50505050505b6017546118ae9083612df2565b601755505b505b83156119015780546118c79085612e17565b815581546018546001600160a01b03908116911614156118eb576118eb3385612f5f565b8154611901906001600160a01b03163386612f8f565b6003820154815461191c9164e8d4a510009161167391612ecb565b600182018190558154604051879233927fe08737ac48a1dab4b1a46c7dc9398bd5bfc6d7ad6fabb7cd8caa254de14def359261195a928a9291614775565b60405180910390a350506001600055505050565b60135481565b600d546000908390811061199a5760405162461bcd60e51b8152600401610ae9906141e3565b6000600d85815481106119a957fe5b60009182526020808320888452600e825260408085206001600160a01b038a81168752935284206005939093020160038101548154601854929650939490939092908116911614611a915783546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906370a0823190611a3c903090600401613bf3565b60206040518083038186803b158015611a5457600080fd5b505afa158015611a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8c9190613ac4565b611a99565b611a996110a4565b9050836002015443118015611aad57508015155b15611ae0576000611abd89613035565b9050611adc611ad5836116738464e8d4a51000612ecb565b8490612df2565b9250505b611b08836001015461167964e8d4a51000611673868860000154612ecb90919063ffffffff16565b98975050505050505050565b600d5481908110611b375760405162461bcd60e51b8152600401610ae9906141e3565b6000600d8381548110611b4657fe5b9060005260206000209060050201905080600201544311611b675750611d12565b601454816002015410611b7a5750611d12565b80546018546000916001600160a01b03918216911614611c315781546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906370a0823190611bdc903090600401613bf3565b60206040518083038186803b158015611bf457600080fd5b505afa158015611c08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2c9190613ac4565b611c39565b611c396110a4565b90506000601454431015611c4d5743611c51565b6014545b9050811580611c6257506001830154155b15611c765760029092019190915550611d12565b6000611c8186613035565b9050611ca4611c99846116738464e8d4a51000612ecb565b600386015490612df2565b600385015560028401829055601654611cbd9082612df2565b601655835460038501546040517f50a1a2d4fcb1c08863a0b14fcc7d9d728e2b21d8d7588b9cfa3991efe8112ee792611d05926001600160a01b039091169185908890613c44565b60405180910390a1505050505b5050565b600d5481908110611d395760405162461bcd60e51b8152600401610ae9906141e3565b60026000541415611d5c5760405162461bcd60e51b8152600401610ae990614619565b60026000908155600d805484908110611d7157fe5b60009182526020808320868452600e825260408085203386529092529083208054848255600182019490945560059092020180546018549194509192916001600160a01b0391821691161415611dcb57611dcb3382612f5f565b8254611de1906001600160a01b03163383612f8f565b84336001600160a01b03167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05958360405161195a9190613c75565b6008602052600090815260409020546001600160a01b031681565b6000611e4f601754601654612e1790919063ffffffff16565b905090565b611e65611e5f612d3a565b826130d2565b50565b60015460ff1690565b600d5460005b81811015611d1257611e8881611b14565b600101611e77565b600a6020526000908152604090205463ffffffff1681565b6001600160a01b031660009081526002602052604090205490565b6000438210611ee45760405162461bcd60e51b8152600401610ae990614650565b6001600160a01b0383166000908152600a602052604090205463ffffffff1680611f12576000915050610c76565b6001600160a01b038416600090815260096020908152604080832063ffffffff600019860181168552925290912054168310611f81576001600160a01b03841660009081526009602090815260408083206000199490940163ffffffff16835292905220600101549050610c76565b6001600160a01b038416600090815260096020908152604080832083805290915290205463ffffffff16831015611fbc576000915050610c76565b600060001982015b8163ffffffff168163ffffffff16111561207557600282820363ffffffff16048103611fee613925565b506001600160a01b038716600090815260096020908152604080832063ffffffff80861685529083529281902081518083019092528054909316808252600190930154918101919091529087141561205057602001519450610c769350505050565b805163ffffffff168711156120675781935061206e565b6001820392505b5050611fc4565b506001600160a01b038516600090815260096020908152604080832063ffffffff9094168352929052206001015491505092915050565b600b6020526000908152604090205481565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b89061210b903390600401613bf3565b60206040518083038186803b15801561212357600080fd5b505afa158015612137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215b9190613a90565b6121775760405162461bcd60e51b8152600401610ae990613e8d565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038416908102919091179091556040517fad9400e618eb1344fde53db22397a1b82c765527ecbba3a5c86bcac15090828b90600090a250565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b89061222d903390600401613bf3565b60206040518083038186803b15801561224557600080fd5b505afa158015612259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227d9190613a90565b8061232057506001546040517f0c68ba210000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b031690630c68ba21906122d0903390600401613bf3565b60206040518083038186803b1580156122e857600080fd5b505afa1580156122fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123209190613a90565b61233c5760405162461bcd60e51b8152600401610ae990614160565b61158961317f565b600181565b600061235a60016117e58486612e17565b9392505050565b600e6020908152600092835260408084209091529082529020805460019091015482565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c485780601f10610c1d57610100808354040283529160200191610c48565b6000610c726123f3612d3a565b846114c38560405180606001604052806025815260200161486a602591396003600061241d612d3a565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906131f7565b600060405162461bcd60e51b8152600401610ae9906140a6565b6001546040517fe43581b80000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03169063e43581b8906124b5903390600401613bf3565b60206040518083038186803b1580156124cd57600080fd5b505afa1580156124e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125059190613a90565b806125a857506001546040517f0c68ba210000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b031690630c68ba2190612558903390600401613bf3565b60206040518083038186803b15801561257057600080fd5b505afa158015612584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a89190613a90565b6125c45760405162461bcd60e51b8152600401610ae990614160565b6125cc611e71565b601181905560405133907fe2492e003bbe8afa53088b406f0c1cb5d9e280370fc72a74cf116ffd343c405390610bb1908490613c75565b6001600160a01b0381166000908152600a602052604081205463ffffffff168061262e57600061235a565b6001600160a01b038316600090815260096020908152604080832063ffffffff60001986011684529091529020600101549392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866612691610bbc565b805190602001206126a0613223565b306040516020016126b49493929190613ca2565b60405160208183030381529060405280519060200120905060007fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf8888886040516020016127059493929190613c7e565b60405160208183030381529060405280519060200120905060008282604051602001612732929190613bbd565b60405160208183030381529060405280519060200120905060006001828888886040516000815260200160405260405161276f9493929190613cc6565b6020604051602081039080840390855afa158015612791573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b0381166127e25760405162461bcd60e51b8152600401610ae9906144a5565b6001600160a01b0381166000908152600b6020526040902080546001810190915589146128215760405162461bcd60e51b8152600401610ae990614357565b874211156128415760405162461bcd60e51b8152600401610ae990614448565b61284b818b6130d2565b505050505b505050505050565b600f6020526000908152604090205481565b60106020526000908152604090205460ff1681565b7f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c81565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b600d54829081106128f15760405162461bcd60e51b8152600401610ae9906141e3565b600260005414156129145760405162461bcd60e51b8152600401610ae990614619565b60026000908155600d80548590811061292957fe5b60009182526020808320878452600e8252604080852033865290925292206005909102909101915061295a85611b14565b805415612ae157600061298f826001015461167964e8d4a5100061167387600301548760000154612ecb90919063ffffffff16565b90508015612adf57600483015460009060ff1680156129b85750600c546001600160a01b031615155b15612a1f57600c54604080517f05e97bc60000000000000000000000000000000000000000000000000000000081529051612a1c926001600160a01b0316916305e97bc6916004808301926020929190829003018186803b15801561170c57600080fd5b90505b612a2d336117fc8484612e17565b508015612acd57600c54600090612a4d906001600160a01b031683612f37565b600c546040517f282d3fdf0000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063282d3fdf90612a999033908590600401613c07565b600060405180830381600087803b158015612ab357600080fd5b505af1158015612ac7573d6000803e3d6000fd5b50505050505b601754612ada9083612df2565b601755505b505b8315612c6d5781546040517f70a082310000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906370a0823190612b30903090600401613bf3565b60206040518083038186803b158015612b4857600080fd5b505afa158015612b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b809190613ac4565b8354909150612b9a906001600160a01b0316333088613227565b82546040517f70a08231000000000000000000000000000000000000000000000000000000008152612c389183916001600160a01b03909116906370a0823190612be8903090600401613bf3565b60206040518083038186803b158015612c0057600080fd5b505afa158015612c14573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116799190613ac4565b83546018549196506001600160a01b0391821691161415612c5d57612c5d3386613248565b8154612c699086612df2565b8255505b60038201548154612c889164e8d4a510009161167391612ecb565b600182018190558154604051879233927f7162984403f6c73c8639375d45a9187dfd04602231bd8e587c415718b5f7e5f99261195a928a9291614775565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b60096020908152600092835260408084209091529082529020805460019091015463ffffffff9091169082565b60015461010090046001600160a01b031690565b6015546001600160a01b031681565b3390565b6001600160a01b038316612d645760405162461bcd60e51b8152600401610ae9906142fa565b6001600160a01b038216612d8a5760405162461bcd60e51b8152600401610ae990613d9c565b6001600160a01b0380841660008181526003602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590612de5908590613c75565b60405180910390a3505050565b60008282018381101561235a5760405162461bcd60e51b8152600401610ae990613df9565b600082821115612e395760405162461bcd60e51b8152600401610ae990613eea565b50900390565b612e47611e68565b612e635760405162461bcd60e51b8152600401610ae990613d65565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612eb4612d3a565b604051612ec19190613bf3565b60405180910390a1565b600082612eda57506000610c76565b82820282848281612ee757fe5b041461235a5760405162461bcd60e51b8152600401610ae990614103565b6000808211612f265760405162461bcd60e51b8152600401610ae990613f7e565b818381612f2f57fe5b049392505050565b6000478181841115612f4a575080612f4d565b50825b612f578582613277565b949350505050565b612f698282613304565b6001600160a01b03808316600090815260086020526040812054611d12921690836133e6565b6130308363a9059cbb60e01b8484604051602401612fae929190613c07565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613523565b505050565b600080600d838154811061304557fe5b90600052602060002090600502019050438160020154106130785760405162461bcd60e51b8152600401610ae9906146ad565b600061309a826002015460145443101561309257436107a3565b601454612349565b601254909150156130cb576130c860125461167384600101546117e560115486612ecb90919063ffffffff16565b92505b5050919050565b6001600160a01b03808316600090815260086020526040812054909116906130f984611ea8565b6001600160a01b0385811660008181526008602052604080822080547fffffffffffffffffffffffff000000000000000000000000000000000000000016898616908117909155905194955093928616927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46131798284836133e6565b50505050565b613187611e68565b156131a45760405162461bcd60e51b8152600401610ae990614012565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612eb4612d3a565b6000818484111561321b5760405162461bcd60e51b8152600401610ae99190613d14565b505050900390565b4690565b613179846323b872dd60e01b858585604051602401612fae93929190613c20565b61325282826135b2565b6001600160a01b03808316600090815260086020526040812054611d129216836133e6565b604080516000808252602082019092526001600160a01b0384169083906040516132a19190613ba1565b60006040518083038185875af1925050503d80600081146132de576040519150601f19603f3d011682016040523d82523d6000602084013e6132e3565b606091505b50509050806130305760405162461bcd60e51b8152600401610ae99061429d565b6001600160a01b03821661332a5760405162461bcd60e51b8152600401610ae990614240565b61333682600083613030565b61337381604051806060016040528060228152602001614810602291396001600160a01b03851660009081526002602052604090205491906131f7565b6001600160a01b0383166000908152600260205260409020556004546133999082612e17565b6004556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906133da908590613c75565b60405180910390a35050565b816001600160a01b0316836001600160a01b0316141580156134085750600081115b15613030576001600160a01b0383161561349a576001600160a01b0383166000908152600a602052604081205463ffffffff16908161344857600061347a565b6001600160a01b038516600090815260096020908152604080832063ffffffff60001987011684529091529020600101545b905060006134888285612e17565b905061349686848484613666565b5050505b6001600160a01b03821615613030576001600160a01b0382166000908152600a602052604081205463ffffffff1690816134d5576000613507565b6001600160a01b038416600090815260096020908152604080832063ffffffff60001987011684529091529020600101545b905060006135158285612df2565b905061285085848484613666565b6060613578826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137e69092919063ffffffff16565b80519091501561303057808060200190518101906135969190613a90565b6130305760405162461bcd60e51b8152600401610ae990614502565b6001600160a01b0382166135d85760405162461bcd60e51b8152600401610ae990614730565b6135e460008383613030565b6004546135f19082612df2565b6004556001600160a01b0382166000908152600260205260409020546136179082612df2565b6001600160a01b0383166000818152600260205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906133da908590613c75565b600061368a43604051806060016040528060388152602001614832603891396137f5565b905060008463ffffffff161180156136d357506001600160a01b038516600090815260096020908152604080832063ffffffff6000198901811685529252909120548282169116145b15613710576001600160a01b038516600090815260096020908152604080832063ffffffff6000198901168452909152902060010182905561379c565b60408051808201825263ffffffff808416825260208083018681526001600160a01b038a166000818152600984528681208b861682528452868120955186549086167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009182161787559251600196870155908152600a9092529390208054928801909116919092161790555b846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72484846040516137d7929190614767565b60405180910390a25050505050565b6060612f578484600085613825565b600081640100000000841061381d5760405162461bcd60e51b8152600401610ae99190613d14565b509192915050565b6060824710156138475760405162461bcd60e51b8152600401610ae990613f21565b613850856138e6565b61386c5760405162461bcd60e51b8152600401610ae9906143b4565b60006060866001600160a01b031685876040516138899190613ba1565b60006040518083038185875af1925050503d80600081146138c6576040519150601f19603f3d011682016040523d82523d6000602084013e6138cb565b606091505b50915091506138db8282866138ec565b979650505050505050565b3b151590565b606083156138fb57508161235a565b82511561390b5782518084602001fd5b8160405162461bcd60e51b8152600401610ae99190613d14565b604080518082019091526000808252602082015290565b60006020828403121561394d578081fd5b813561235a816147ec565b6000806040838503121561396a578081fd5b8235613975816147ec565b91506020830135613985816147ec565b809150509250929050565b6000806000606084860312156139a4578081fd5b83356139af816147ec565b925060208401356139bf816147ec565b929592945050506040919091013590565b600080604083850312156139e2578182fd5b82356139ed816147ec565b946020939093013593505050565b60008060008060008060c08789031215613a13578182fd5b8635613a1e816147ec565b95506020870135945060408701359350606087013560ff81168114613a41578283fd5b9598949750929560808101359460a0909101359350915050565b60008060408385031215613a6d578182fd5b8235613a78816147ec565b9150602083013563ffffffff81168114613985578182fd5b600060208284031215613aa1578081fd5b815161235a81614801565b600060208284031215613abd578081fd5b5035919050565b600060208284031215613ad5578081fd5b5051919050565b60008060408385031215613aee578182fd5b823591506020830135613985816147ec565b60008060008060808587031215613b15578384fd5b843593506020850135613b27816147ec565b92506040850135613b3781614801565b91506060850135613b4781614801565b939692955090935050565b60008060408385031215613b64578182fd5b50508035926020909101359150565b60008060008060808587031215613b88578182fd5b84359350602085013592506040850135613b3781614801565b60008251613bb38184602087016147c0565b9190910192915050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b901515815260200190565b90815260200190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6001600160a01b039590951685526020850193909352604084019190915260608301521515608082015260a00190565b6000602082528251806020840152613d338160408501602087016147c0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252603e908201527f4c69717569646974794d696e696e674d61737465723a3a6e6f6e4475706c696360408201527f617465643a204475706c6963617465642072657761726420616e64206c700000606082015260800190565b6020808252602f908201527f436f72655265663a3a6f6e6c79476f7665726e6f723a2043616c6c657220697360408201527f206e6f74206120676f7665726e6f720000000000000000000000000000000000606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252603d908201527f4c69717569646974794d696e696e674d61737465723a3a7472616e736665724660408201527f726f6d3a204e6f7420737570706f7274207472616e7366657246726f6d000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526033908201527f4c69717569646974794d696e696e674d61737465723a3a6e6f6e4475706c696360408201527f617465643a204475706c696361746564206c7000000000000000000000000000606082015260800190565b60208082526035908201527f4c69717569646974794d696e696e674d61737465723a3a7472616e736665723a60408201527f204e6f7420737570706f7274207472616e736665720000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526045908201527f436f72655265663a3a6f6e6c79477561726469616e4f72476f7665726e6f723a60408201527f2043616c6c6572206973206e6f74206120677561726469616e206f7220676f7660608201527f65726e6f72000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252602d908201527f4c69717569646974794d696e696e674d61737465723a3a76616c69646174655060408201527f69643a204e6f7420657869737400000000000000000000000000000000000000606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526034908201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60408201527f20457468207472616e73666572206661696c6564000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f44414f546f6b656e3a3a64656c656761746542795369673a20496e76616c696460408201527f206e6f6e63650000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526029908201527f4c69717569646974794d696e696e674d61737465723a3a77697468647261773a60408201527f204e6f7420676f6f640000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f44414f546f6b656e3a3a64656c656761746542795369673a205369676e61747560408201527f7265206578706972656400000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f44414f546f6b656e3a3a64656c656761746542795369673a20496e76616c696460408201527f207369676e617475726500000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f4c69717569646974794d696e696e674d61737465723a3a757064617465456e6460408201527f426c6f636b3a204c657373000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f4c69717569646974794d696e696e674d61737465723a3a616464506f6f6c3a2060408201527f45786365656420656e64626c6f636b0000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602b908201527f44414f546f6b656e3a3a6765745072696f72566f7465733a204e6f742079657460408201527f2064657465726d696e6564000000000000000000000000000000000000000000606082015260800190565b60208082526051908201527f4c69717569646974794d696e696e674d61737465723a3a5f676574546f6b656e60408201527f5265776172643a204d757374206c6974746c65207468616e207468652063757260608201527f72656e7420626c6f636b206e756d626572000000000000000000000000000000608082015260a00190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b918252602082015260400190565b9283526020830191909152604082015260600190565b63ffffffff91909116815260200190565b63ffffffff929092168252602082015260400190565b60ff91909116815260200190565b60005b838110156147db5781810151838201526020016147c3565b838111156131795750506000910152565b6001600160a01b0381168114611e6557600080fd5b8015158114611e6557600080fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636544414f546f6b656e3a3a5f7772697465436865636b706f696e743a20426c6f636b206e756d6265722065786365656473203332206269747345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122003cb431fdd32eefb5f9b0ea7b2d34e23f1de1b6ca7d920e6471311b6609c1d6464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "to": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "from": "The address of the source account",
          "to": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DelegateChanged(address,address,address)": {
        "notice": "An event thats emitted when an account changes its delegate"
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "notice": "An event thats emitted when a delegate account's vote balance changes"
      }
    },
    "kind": "user",
    "methods": {
      "DELEGATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the delegation struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "checkpoints(address,uint32)": {
        "notice": "A record of votes checkpoints for each account, by index"
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`"
      },
      "delegates(address)": {
        "notice": "A record of each accounts delegate"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "nonces(address)": {
        "notice": "A record of states for signing / validating signatures"
      },
      "numCheckpoints(address)": {
        "notice": "The number of checkpoints for each account"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `to`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `from` to `to`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2455,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2370,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 11642,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "_core",
        "offset": 1,
        "slot": "1",
        "type": "t_contract(ICore)11634"
      },
      {
        "astId": 764,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 770,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "_allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 772,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 774,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 776,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 778,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "_decimals",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 11821,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "delegates",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11828,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "checkpoints",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)14052_storage))"
      },
      {
        "astId": 11833,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 11850,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "nonces",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12610,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "vestingMaster",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IVestingMaster)11432"
      },
      {
        "astId": 12614,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "poolInfo",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(PoolInfo)14134_storage)dyn_storage"
      },
      {
        "astId": 12621,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "userInfo",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)14123_storage))"
      },
      {
        "astId": 12626,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "pair2Pid",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12631,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "poolExistence",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_contract(IERC20)1328,t_bool)"
      },
      {
        "astId": 12634,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "tokenPerBlock",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 12642,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 12645,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "startBlock",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 12648,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "endBlock",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 12651,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "rewardToken",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(IERC20)1328"
      },
      {
        "astId": 12653,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "_accShareReward",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 12655,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "_accHarvestedReward",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 12657,
        "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
        "label": "xmsAddress",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)14134_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)14134_storage",
        "encoding": "dynamic_array",
        "label": "struct ILiquidityMiningMaster.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICore)11634": {
        "encoding": "inplace",
        "label": "contract ICore",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1328": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IVestingMaster)11432": {
        "encoding": "inplace",
        "label": "contract IVestingMaster",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)14052_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct IDAOToken.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)14052_storage)"
      },
      "t_mapping(t_address,t_struct(UserInfo)14123_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ILiquidityMiningMaster.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)14123_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_contract(IERC20)1328,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1328",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)14123_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ILiquidityMiningMaster.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)14123_storage)"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)14052_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct IDAOToken.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)14052_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)14052_storage": {
        "encoding": "inplace",
        "label": "struct IDAOToken.Checkpoint",
        "members": [
          {
            "astId": 14049,
            "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 14051,
            "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
            "label": "votes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)14134_storage": {
        "encoding": "inplace",
        "label": "struct ILiquidityMiningMaster.PoolInfo",
        "members": [
          {
            "astId": 14125,
            "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1328"
          },
          {
            "astId": 14127,
            "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14129,
            "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14131,
            "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
            "label": "accTokenPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14133,
            "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
            "label": "locked",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)14123_storage": {
        "encoding": "inplace",
        "label": "struct ILiquidityMiningMaster.UserInfo",
        "members": [
          {
            "astId": 14120,
            "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14122,
            "contract": "contracts/test/LiquidityMiningMasterBNB.sol:LiquidityMiningMasterBNB",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}